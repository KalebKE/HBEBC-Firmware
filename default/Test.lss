
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041c4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028c  00800060  000041c4  00004278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010f  008002ec  008002ec  00004504  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  00004504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000360  00000000  00000000  0000452c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000ea7  00000000  00000000  0000488c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005eaa  00000000  00000000  00005733  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002785  00000000  00000000  0000b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f1f  00000000  00000000  0000dd62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b30  00000000  00000000  00011c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011d3  00000000  00000000  000127b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024ad  00000000  00000000  00013987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00015e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__vector_4>
      14:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_5>
      18:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_6>
      1c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_7>
      20:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__vector_8>
      24:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_9>
      28:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_10>
      2c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_11>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_13>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_15>
      40:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__vector_16>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000054 <TimerPrescaleFactor>:
      54:	00 00 01 00 08 00 40 00 00 01 00 04                 ......@.....

00000060 <TimerRTCPrescaleFactor>:
      60:	00 00 01 00 08 00 20 00 40 00 80 00 00 01 00 04     ...... .@.......

00000070 <HexChars>:
      70:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf e5       	ldi	r28, 0x5F	; 95
      88:	d8 e0       	ldi	r29, 0x08	; 8
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	12 e0       	ldi	r17, 0x02	; 2
      90:	a0 e6       	ldi	r26, 0x60	; 96
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	e4 ec       	ldi	r30, 0xC4	; 196
      96:	f1 e4       	ldi	r31, 0x41	; 65
      98:	02 c0       	rjmp	.+4      	; 0x9e <.do_copy_data_start>

0000009a <.do_copy_data_loop>:
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0

0000009e <.do_copy_data_start>:
      9e:	ac 3e       	cpi	r26, 0xEC	; 236
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <.do_copy_data_loop>

000000a4 <__do_clear_bss>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	ac ee       	ldi	r26, 0xEC	; 236
      a8:	b2 e0       	ldi	r27, 0x02	; 2
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	ab 3f       	cpi	r26, 0xFB	; 251
      b0:	b1 07       	cpc	r27, r17
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	0e 94 04 06 	call	0xc08	; 0xc08 <main>
      b8:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_default>

000000c0 <initButtons>:
button returnButton;


void initButtons(void)
{
	scrollUpButton.id = 0x01;
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	80 93 d2 03 	sts	0x03D2, r24
	scrollDownButton.id = 0x02;
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	80 93 d3 03 	sts	0x03D3, r24
	selectButton.id = 0x80;
      cc:	80 e8       	ldi	r24, 0x80	; 128
      ce:	80 93 d4 03 	sts	0x03D4, r24
	returnButton.id = 0x40;
      d2:	80 e4       	ldi	r24, 0x40	; 64
      d4:	80 93 d9 03 	sts	0x03D9, r24
}
      d8:	08 95       	ret

000000da <getButtonState>:

u08 getButtonState(button *sw)
{
      da:	fc 01       	movw	r30, r24
	u08 state1, state2;
	state1 = (PINC & sw->id);
      dc:	83 b3       	in	r24, 0x13	; 19
	if(state1 == 0)
      de:	90 81       	ld	r25, Z
      e0:	89 23       	and	r24, r25
      e2:	11 f0       	breq	.+4      	; 0xe8 <getButtonState+0xe>
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	08 95       	ret
      e8:	8f ef       	ldi	r24, 0xFF	; 255
		return 255;
	else
		return 0;	
}
      ea:	08 95       	ret

000000ec <__vector_default>:


ISR(BADISR_vect)
{
      ec:	1f 92       	push	r1
      ee:	0f 92       	push	r0
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	0f 92       	push	r0
      f4:	11 24       	eor	r1, r1
 asm("nop");   // user code here
      f6:	00 00       	nop
}
      f8:	0f 90       	pop	r0
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	0f 90       	pop	r0
      fe:	1f 90       	pop	r1
     100:	18 95       	reti

00000102 <editParameter>:
void editParameter(mainCtrl *master, boostCtrl *bstCtrl, waterMethCtrl *wmCtrl)
{
	static float oldVal;
	static float oldMode = 0;
	
}
     102:	08 95       	ret

00000104 <systemCounter>:


void systemCounter()
{
	systemCount++;
     104:	80 91 d5 03 	lds	r24, 0x03D5
     108:	90 91 d6 03 	lds	r25, 0x03D6
     10c:	a0 91 d7 03 	lds	r26, 0x03D7
     110:	b0 91 d8 03 	lds	r27, 0x03D8
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	a1 1d       	adc	r26, r1
     118:	b1 1d       	adc	r27, r1
     11a:	80 93 d5 03 	sts	0x03D5, r24
     11e:	90 93 d6 03 	sts	0x03D6, r25
     122:	a0 93 d7 03 	sts	0x03D7, r26
     126:	b0 93 d8 03 	sts	0x03D8, r27
}
     12a:	08 95       	ret

0000012c <abs>:

float abs(float x)
{
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	7b 01       	movw	r14, r22
     136:	8c 01       	movw	r16, r24
	((x > 0) ? (x *= 1) : (x *= -1));
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e0       	ldi	r20, 0x00	; 0
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     144:	18 16       	cp	r1, r24
     146:	24 f0       	brlt	.+8      	; 0x150 <abs+0x24>
     148:	17 fb       	bst	r17, 7
     14a:	10 95       	com	r17
     14c:	17 f9       	bld	r17, 7
     14e:	10 95       	com	r17
	return x;
}		
     150:	b7 01       	movw	r22, r14
     152:	c8 01       	movw	r24, r16
     154:	1f 91       	pop	r17
     156:	0f 91       	pop	r16
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	08 95       	ret

0000015e <displayData>:
	}

}

void displayData(mainCtrl *master, boostCtrl *bstCtrl, waterMethCtrl *wmCtrl, TriAx *accel)
{
     15e:	8f 92       	push	r8
     160:	9f 92       	push	r9
     162:	af 92       	push	r10
     164:	bf 92       	push	r11
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	6c 01       	movw	r12, r24
     178:	eb 01       	movw	r28, r22
     17a:	4a 01       	movw	r8, r20
     17c:	59 01       	movw	r10, r18
	static float first = 1;
	static float oldVal;
	static float oldMode = 0;

	if(first)
     17e:	60 91 7e 00 	lds	r22, 0x007E
     182:	70 91 7f 00 	lds	r23, 0x007F
     186:	80 91 80 00 	lds	r24, 0x0080
     18a:	90 91 81 00 	lds	r25, 0x0081
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     19a:	88 23       	and	r24, r24
     19c:	89 f1       	breq	.+98     	; 0x200 <displayData+0xa2>
	{
		lcdClearDisplay();		
     19e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
		(master->units > 0) ? lcdPrintMetricBoostPressure(bstCtrl->boost/14.7) : 
     1a2:	f6 01       	movw	r30, r12
     1a4:	85 81       	ldd	r24, Z+5	; 0x05
     1a6:	88 23       	and	r24, r24
     1a8:	69 f0       	breq	.+26     	; 0x1c4 <displayData+0x66>
     1aa:	68 81       	ld	r22, Y
     1ac:	79 81       	ldd	r23, Y+1	; 0x01
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	9b 81       	ldd	r25, Y+3	; 0x03
     1b2:	23 e3       	ldi	r18, 0x33	; 51
     1b4:	33 e3       	ldi	r19, 0x33	; 51
     1b6:	4b e6       	ldi	r20, 0x6B	; 107
     1b8:	51 e4       	ldi	r21, 0x41	; 65
     1ba:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
     1be:	0e 94 42 12 	call	0x2484	; 0x2484 <lcdPrintMetricBoostPressure>
     1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <displayData+0x72>
     1c4:	68 81       	ld	r22, Y
     1c6:	79 81       	ldd	r23, Y+1	; 0x01
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	9b 81       	ldd	r25, Y+3	; 0x03
     1cc:	0e 94 a2 12 	call	0x2544	; 0x2544 <lcdPrintStandBoostPressure>
							  lcdPrintStandBoostPressure(bstCtrl->boost);
		oldVal = bstCtrl->boost;
     1d0:	88 81       	ld	r24, Y
     1d2:	99 81       	ldd	r25, Y+1	; 0x01
     1d4:	aa 81       	ldd	r26, Y+2	; 0x02
     1d6:	bb 81       	ldd	r27, Y+3	; 0x03
     1d8:	80 93 f0 02 	sts	0x02F0, r24
     1dc:	90 93 f1 02 	sts	0x02F1, r25
     1e0:	a0 93 f2 02 	sts	0x02F2, r26
     1e4:	b0 93 f3 02 	sts	0x02F3, r27
		first = 0;		
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	a0 e0       	ldi	r26, 0x00	; 0
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	80 93 7e 00 	sts	0x007E, r24
     1f4:	90 93 7f 00 	sts	0x007F, r25
     1f8:	a0 93 80 00 	sts	0x0080, r26
     1fc:	b0 93 81 00 	sts	0x0081, r27
	}

	switch(master->displayMode)
     200:	f6 01       	movw	r30, r12
     202:	81 81       	ldd	r24, Z+1	; 0x01
     204:	83 30       	cpi	r24, 0x03	; 3
     206:	09 f4       	brne	.+2      	; 0x20a <displayData+0xac>
     208:	1a c1       	rjmp	.+564    	; 0x43e <displayData+0x2e0>
     20a:	84 30       	cpi	r24, 0x04	; 4
     20c:	38 f4       	brcc	.+14     	; 0x21c <displayData+0xbe>
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	09 f4       	brne	.+2      	; 0x214 <displayData+0xb6>
     212:	6a c0       	rjmp	.+212    	; 0x2e8 <displayData+0x18a>
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	08 f0       	brcs	.+2      	; 0x21a <displayData+0xbc>
     218:	c3 c0       	rjmp	.+390    	; 0x3a0 <displayData+0x242>
     21a:	0a c0       	rjmp	.+20     	; 0x230 <displayData+0xd2>
     21c:	85 30       	cpi	r24, 0x05	; 5
     21e:	09 f4       	brne	.+2      	; 0x222 <displayData+0xc4>
     220:	ac c1       	rjmp	.+856    	; 0x57a <displayData+0x41c>
     222:	85 30       	cpi	r24, 0x05	; 5
     224:	08 f4       	brcc	.+2      	; 0x228 <displayData+0xca>
     226:	5a c1       	rjmp	.+692    	; 0x4dc <displayData+0x37e>
     228:	86 30       	cpi	r24, 0x06	; 6
     22a:	09 f0       	breq	.+2      	; 0x22e <displayData+0xd0>
     22c:	5d c2       	rjmp	.+1210   	; 0x6e8 <displayData+0x58a>
     22e:	f6 c1       	rjmp	.+1004   	; 0x61c <displayData+0x4be>
	{
		case 0:
			if((abs(oldVal - bstCtrl->boost) > 0.5) || (oldMode != master->displayMode))
     230:	60 91 f0 02 	lds	r22, 0x02F0
     234:	70 91 f1 02 	lds	r23, 0x02F1
     238:	80 91 f2 02 	lds	r24, 0x02F2
     23c:	90 91 f3 02 	lds	r25, 0x02F3
     240:	28 81       	ld	r18, Y
     242:	39 81       	ldd	r19, Y+1	; 0x01
     244:	4a 81       	ldd	r20, Y+2	; 0x02
     246:	5b 81       	ldd	r21, Y+3	; 0x03
     248:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     24c:	7b 01       	movw	r14, r22
     24e:	8c 01       	movw	r16, r24
	systemCount++;
}

float abs(float x)
{
	((x > 0) ? (x *= 1) : (x *= -1));
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     25c:	18 16       	cp	r1, r24
     25e:	24 f0       	brlt	.+8      	; 0x268 <displayData+0x10a>
     260:	17 fb       	bst	r17, 7
     262:	10 95       	com	r17
     264:	17 f9       	bld	r17, 7
     266:	10 95       	com	r17
	}

	switch(master->displayMode)
	{
		case 0:
			if((abs(oldVal - bstCtrl->boost) > 0.5) || (oldMode != master->displayMode))
     268:	c8 01       	movw	r24, r16
     26a:	b7 01       	movw	r22, r14
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	5f e3       	ldi	r21, 0x3F	; 63
     274:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     278:	18 16       	cp	r1, r24
     27a:	c4 f0       	brlt	.+48     	; 0x2ac <displayData+0x14e>
     27c:	f6 01       	movw	r30, r12
     27e:	61 81       	ldd	r22, Z+1	; 0x01
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	88 27       	eor	r24, r24
     284:	77 fd       	sbrc	r23, 7
     286:	80 95       	com	r24
     288:	98 2f       	mov	r25, r24
     28a:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
     28e:	9b 01       	movw	r18, r22
     290:	ac 01       	movw	r20, r24
     292:	60 91 ec 02 	lds	r22, 0x02EC
     296:	70 91 ed 02 	lds	r23, 0x02ED
     29a:	80 91 ee 02 	lds	r24, 0x02EE
     29e:	90 91 ef 02 	lds	r25, 0x02EF
     2a2:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	09 f4       	brne	.+2      	; 0x2ac <displayData+0x14e>
     2aa:	1e c2       	rjmp	.+1084   	; 0x6e8 <displayData+0x58a>
			{
				lcdClearDisplay();		
     2ac:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
				(master->units > 0) ? lcdPrintMetricBoostPressure(bstCtrl->boost/14.7) : 
     2b0:	f6 01       	movw	r30, r12
     2b2:	85 81       	ldd	r24, Z+5	; 0x05
     2b4:	88 23       	and	r24, r24
     2b6:	69 f0       	breq	.+26     	; 0x2d2 <displayData+0x174>
     2b8:	68 81       	ld	r22, Y
     2ba:	79 81       	ldd	r23, Y+1	; 0x01
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	9b 81       	ldd	r25, Y+3	; 0x03
     2c0:	23 e3       	ldi	r18, 0x33	; 51
     2c2:	33 e3       	ldi	r19, 0x33	; 51
     2c4:	4b e6       	ldi	r20, 0x6B	; 107
     2c6:	51 e4       	ldi	r21, 0x41	; 65
     2c8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
     2cc:	0e 94 42 12 	call	0x2484	; 0x2484 <lcdPrintMetricBoostPressure>
     2d0:	06 c0       	rjmp	.+12     	; 0x2de <displayData+0x180>
     2d2:	68 81       	ld	r22, Y
     2d4:	79 81       	ldd	r23, Y+1	; 0x01
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	9b 81       	ldd	r25, Y+3	; 0x03
     2da:	0e 94 a2 12 	call	0x2544	; 0x2544 <lcdPrintStandBoostPressure>
									  lcdPrintStandBoostPressure(bstCtrl->boost);
				oldVal = bstCtrl->boost;
     2de:	88 81       	ld	r24, Y
     2e0:	99 81       	ldd	r25, Y+1	; 0x01
     2e2:	aa 81       	ldd	r26, Y+2	; 0x02
     2e4:	bb 81       	ldd	r27, Y+3	; 0x03
     2e6:	e9 c1       	rjmp	.+978    	; 0x6ba <displayData+0x55c>
				oldMode = master->displayMode;
			}
			break;
		case 1: 
			if((abs(oldVal - wmCtrl->pressure) > 5.0) || (oldMode != master->displayMode))
     2e8:	60 91 f0 02 	lds	r22, 0x02F0
     2ec:	70 91 f1 02 	lds	r23, 0x02F1
     2f0:	80 91 f2 02 	lds	r24, 0x02F2
     2f4:	90 91 f3 02 	lds	r25, 0x02F3
     2f8:	f4 01       	movw	r30, r8
     2fa:	20 81       	ld	r18, Z
     2fc:	31 81       	ldd	r19, Z+1	; 0x01
     2fe:	42 81       	ldd	r20, Z+2	; 0x02
     300:	53 81       	ldd	r21, Z+3	; 0x03
     302:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     306:	7b 01       	movw	r14, r22
     308:	8c 01       	movw	r16, r24
	systemCount++;
}

float abs(float x)
{
	((x > 0) ? (x *= 1) : (x *= -1));
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     316:	18 16       	cp	r1, r24
     318:	24 f0       	brlt	.+8      	; 0x322 <displayData+0x1c4>
     31a:	17 fb       	bst	r17, 7
     31c:	10 95       	com	r17
     31e:	17 f9       	bld	r17, 7
     320:	10 95       	com	r17
				oldVal = bstCtrl->boost;
				oldMode = master->displayMode;
			}
			break;
		case 1: 
			if((abs(oldVal - wmCtrl->pressure) > 5.0) || (oldMode != master->displayMode))
     322:	c8 01       	movw	r24, r16
     324:	b7 01       	movw	r22, r14
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 ea       	ldi	r20, 0xA0	; 160
     32c:	50 e4       	ldi	r21, 0x40	; 64
     32e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     332:	18 16       	cp	r1, r24
     334:	c4 f0       	brlt	.+48     	; 0x366 <displayData+0x208>
     336:	f6 01       	movw	r30, r12
     338:	61 81       	ldd	r22, Z+1	; 0x01
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	88 27       	eor	r24, r24
     33e:	77 fd       	sbrc	r23, 7
     340:	80 95       	com	r24
     342:	98 2f       	mov	r25, r24
     344:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
     348:	9b 01       	movw	r18, r22
     34a:	ac 01       	movw	r20, r24
     34c:	60 91 ec 02 	lds	r22, 0x02EC
     350:	70 91 ed 02 	lds	r23, 0x02ED
     354:	80 91 ee 02 	lds	r24, 0x02EE
     358:	90 91 ef 02 	lds	r25, 0x02EF
     35c:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     360:	88 23       	and	r24, r24
     362:	09 f4       	brne	.+2      	; 0x366 <displayData+0x208>
     364:	c1 c1       	rjmp	.+898    	; 0x6e8 <displayData+0x58a>
			{
				lcdClearDisplay();
     366:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
				(master->units > 0) ? lcdPrintMetricWaterPressure(wmCtrl->pressure/14.7) : 
     36a:	f6 01       	movw	r30, r12
     36c:	85 81       	ldd	r24, Z+5	; 0x05
     36e:	88 23       	and	r24, r24
     370:	71 f0       	breq	.+28     	; 0x38e <displayData+0x230>
     372:	f4 01       	movw	r30, r8
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	23 e3       	ldi	r18, 0x33	; 51
     37e:	33 e3       	ldi	r19, 0x33	; 51
     380:	4b e6       	ldi	r20, 0x6B	; 107
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
     388:	0e 94 22 12 	call	0x2444	; 0x2444 <lcdPrintMetricWaterPressure>
     38c:	07 c0       	rjmp	.+14     	; 0x39c <displayData+0x23e>
     38e:	f4 01       	movw	r30, r8
     390:	60 81       	ld	r22, Z
     392:	71 81       	ldd	r23, Z+1	; 0x01
     394:	82 81       	ldd	r24, Z+2	; 0x02
     396:	93 81       	ldd	r25, Z+3	; 0x03
     398:	0e 94 82 12 	call	0x2504	; 0x2504 <lcdPrintStandWaterPressure>
									  lcdPrintStandWaterPressure(wmCtrl->pressure);
				oldVal = wmCtrl->pressure;
     39c:	f4 01       	movw	r30, r8
     39e:	4a c0       	rjmp	.+148    	; 0x434 <displayData+0x2d6>
				oldMode = master->displayMode;
			}
			break;
		case 2:
			if((abs(oldVal - accel->x) > 0.1) || (oldMode != master->displayMode))
     3a0:	60 91 f0 02 	lds	r22, 0x02F0
     3a4:	70 91 f1 02 	lds	r23, 0x02F1
     3a8:	80 91 f2 02 	lds	r24, 0x02F2
     3ac:	90 91 f3 02 	lds	r25, 0x02F3
     3b0:	f5 01       	movw	r30, r10
     3b2:	20 81       	ld	r18, Z
     3b4:	31 81       	ldd	r19, Z+1	; 0x01
     3b6:	42 81       	ldd	r20, Z+2	; 0x02
     3b8:	53 81       	ldd	r21, Z+3	; 0x03
     3ba:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     3be:	7b 01       	movw	r14, r22
     3c0:	8c 01       	movw	r16, r24
	systemCount++;
}

float abs(float x)
{
	((x > 0) ? (x *= 1) : (x *= -1));
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     3ce:	18 16       	cp	r1, r24
     3d0:	24 f0       	brlt	.+8      	; 0x3da <displayData+0x27c>
     3d2:	17 fb       	bst	r17, 7
     3d4:	10 95       	com	r17
     3d6:	17 f9       	bld	r17, 7
     3d8:	10 95       	com	r17
				oldVal = wmCtrl->pressure;
				oldMode = master->displayMode;
			}
			break;
		case 2:
			if((abs(oldVal - accel->x) > 0.1) || (oldMode != master->displayMode))
     3da:	c8 01       	movw	r24, r16
     3dc:	b7 01       	movw	r22, r14
     3de:	2d ec       	ldi	r18, 0xCD	; 205
     3e0:	3c ec       	ldi	r19, 0xCC	; 204
     3e2:	4c ec       	ldi	r20, 0xCC	; 204
     3e4:	5d e3       	ldi	r21, 0x3D	; 61
     3e6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	c4 f0       	brlt	.+48     	; 0x41e <displayData+0x2c0>
     3ee:	f6 01       	movw	r30, r12
     3f0:	61 81       	ldd	r22, Z+1	; 0x01
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	88 27       	eor	r24, r24
     3f6:	77 fd       	sbrc	r23, 7
     3f8:	80 95       	com	r24
     3fa:	98 2f       	mov	r25, r24
     3fc:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
     400:	9b 01       	movw	r18, r22
     402:	ac 01       	movw	r20, r24
     404:	60 91 ec 02 	lds	r22, 0x02EC
     408:	70 91 ed 02 	lds	r23, 0x02ED
     40c:	80 91 ee 02 	lds	r24, 0x02EE
     410:	90 91 ef 02 	lds	r25, 0x02EF
     414:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     418:	88 23       	and	r24, r24
     41a:	09 f4       	brne	.+2      	; 0x41e <displayData+0x2c0>
     41c:	65 c1       	rjmp	.+714    	; 0x6e8 <displayData+0x58a>
			{
				lcdClearDisplay();
     41e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
				lcdPrintAccelAxis(0, accel->x);
     422:	f5 01       	movw	r30, r10
     424:	40 81       	ld	r20, Z
     426:	51 81       	ldd	r21, Z+1	; 0x01
     428:	62 81       	ldd	r22, Z+2	; 0x02
     42a:	73 81       	ldd	r23, Z+3	; 0x03
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <lcdPrintAccelAxis>
				oldVal = accel->x;
     432:	f5 01       	movw	r30, r10
     434:	80 81       	ld	r24, Z
     436:	91 81       	ldd	r25, Z+1	; 0x01
     438:	a2 81       	ldd	r26, Z+2	; 0x02
     43a:	b3 81       	ldd	r27, Z+3	; 0x03
     43c:	3e c1       	rjmp	.+636    	; 0x6ba <displayData+0x55c>
				oldMode = master->displayMode;
			}
			break;
        case 3:
			if((abs(oldVal - accel->y) > 0.1) || (oldMode != master->displayMode))
     43e:	60 91 f0 02 	lds	r22, 0x02F0
     442:	70 91 f1 02 	lds	r23, 0x02F1
     446:	80 91 f2 02 	lds	r24, 0x02F2
     44a:	90 91 f3 02 	lds	r25, 0x02F3
     44e:	f5 01       	movw	r30, r10
     450:	24 81       	ldd	r18, Z+4	; 0x04
     452:	35 81       	ldd	r19, Z+5	; 0x05
     454:	46 81       	ldd	r20, Z+6	; 0x06
     456:	57 81       	ldd	r21, Z+7	; 0x07
     458:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     45c:	7b 01       	movw	r14, r22
     45e:	8c 01       	movw	r16, r24
	systemCount++;
}

float abs(float x)
{
	((x > 0) ? (x *= 1) : (x *= -1));
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     46c:	18 16       	cp	r1, r24
     46e:	24 f0       	brlt	.+8      	; 0x478 <displayData+0x31a>
     470:	17 fb       	bst	r17, 7
     472:	10 95       	com	r17
     474:	17 f9       	bld	r17, 7
     476:	10 95       	com	r17
				oldVal = accel->x;
				oldMode = master->displayMode;
			}
			break;
        case 3:
			if((abs(oldVal - accel->y) > 0.1) || (oldMode != master->displayMode))
     478:	c8 01       	movw	r24, r16
     47a:	b7 01       	movw	r22, r14
     47c:	2d ec       	ldi	r18, 0xCD	; 205
     47e:	3c ec       	ldi	r19, 0xCC	; 204
     480:	4c ec       	ldi	r20, 0xCC	; 204
     482:	5d e3       	ldi	r21, 0x3D	; 61
     484:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     488:	18 16       	cp	r1, r24
     48a:	c4 f0       	brlt	.+48     	; 0x4bc <displayData+0x35e>
     48c:	f6 01       	movw	r30, r12
     48e:	61 81       	ldd	r22, Z+1	; 0x01
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	88 27       	eor	r24, r24
     494:	77 fd       	sbrc	r23, 7
     496:	80 95       	com	r24
     498:	98 2f       	mov	r25, r24
     49a:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
     49e:	9b 01       	movw	r18, r22
     4a0:	ac 01       	movw	r20, r24
     4a2:	60 91 ec 02 	lds	r22, 0x02EC
     4a6:	70 91 ed 02 	lds	r23, 0x02ED
     4aa:	80 91 ee 02 	lds	r24, 0x02EE
     4ae:	90 91 ef 02 	lds	r25, 0x02EF
     4b2:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     4b6:	88 23       	and	r24, r24
     4b8:	09 f4       	brne	.+2      	; 0x4bc <displayData+0x35e>
     4ba:	16 c1       	rjmp	.+556    	; 0x6e8 <displayData+0x58a>
			{
				lcdClearDisplay();
     4bc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
				lcdPrintAccelAxis(1, accel->y);
     4c0:	f5 01       	movw	r30, r10
     4c2:	44 81       	ldd	r20, Z+4	; 0x04
     4c4:	55 81       	ldd	r21, Z+5	; 0x05
     4c6:	66 81       	ldd	r22, Z+6	; 0x06
     4c8:	77 81       	ldd	r23, Z+7	; 0x07
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <lcdPrintAccelAxis>
				oldVal = accel->y;
     4d0:	f5 01       	movw	r30, r10
     4d2:	84 81       	ldd	r24, Z+4	; 0x04
     4d4:	95 81       	ldd	r25, Z+5	; 0x05
     4d6:	a6 81       	ldd	r26, Z+6	; 0x06
     4d8:	b7 81       	ldd	r27, Z+7	; 0x07
     4da:	ef c0       	rjmp	.+478    	; 0x6ba <displayData+0x55c>
				oldMode = master->displayMode;
			}
			break;
		case 4:
			if((abs(oldVal - accel->z) > 0.1) || (oldMode != master->displayMode))
     4dc:	60 91 f0 02 	lds	r22, 0x02F0
     4e0:	70 91 f1 02 	lds	r23, 0x02F1
     4e4:	80 91 f2 02 	lds	r24, 0x02F2
     4e8:	90 91 f3 02 	lds	r25, 0x02F3
     4ec:	f5 01       	movw	r30, r10
     4ee:	20 85       	ldd	r18, Z+8	; 0x08
     4f0:	31 85       	ldd	r19, Z+9	; 0x09
     4f2:	42 85       	ldd	r20, Z+10	; 0x0a
     4f4:	53 85       	ldd	r21, Z+11	; 0x0b
     4f6:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     4fa:	7b 01       	movw	r14, r22
     4fc:	8c 01       	movw	r16, r24
	systemCount++;
}

float abs(float x)
{
	((x > 0) ? (x *= 1) : (x *= -1));
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     50a:	18 16       	cp	r1, r24
     50c:	24 f0       	brlt	.+8      	; 0x516 <displayData+0x3b8>
     50e:	17 fb       	bst	r17, 7
     510:	10 95       	com	r17
     512:	17 f9       	bld	r17, 7
     514:	10 95       	com	r17
				oldVal = accel->y;
				oldMode = master->displayMode;
			}
			break;
		case 4:
			if((abs(oldVal - accel->z) > 0.1) || (oldMode != master->displayMode))
     516:	c8 01       	movw	r24, r16
     518:	b7 01       	movw	r22, r14
     51a:	2d ec       	ldi	r18, 0xCD	; 205
     51c:	3c ec       	ldi	r19, 0xCC	; 204
     51e:	4c ec       	ldi	r20, 0xCC	; 204
     520:	5d e3       	ldi	r21, 0x3D	; 61
     522:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     526:	18 16       	cp	r1, r24
     528:	c4 f0       	brlt	.+48     	; 0x55a <displayData+0x3fc>
     52a:	f6 01       	movw	r30, r12
     52c:	61 81       	ldd	r22, Z+1	; 0x01
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	88 27       	eor	r24, r24
     532:	77 fd       	sbrc	r23, 7
     534:	80 95       	com	r24
     536:	98 2f       	mov	r25, r24
     538:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
     53c:	9b 01       	movw	r18, r22
     53e:	ac 01       	movw	r20, r24
     540:	60 91 ec 02 	lds	r22, 0x02EC
     544:	70 91 ed 02 	lds	r23, 0x02ED
     548:	80 91 ee 02 	lds	r24, 0x02EE
     54c:	90 91 ef 02 	lds	r25, 0x02EF
     550:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     554:	88 23       	and	r24, r24
     556:	09 f4       	brne	.+2      	; 0x55a <displayData+0x3fc>
     558:	c7 c0       	rjmp	.+398    	; 0x6e8 <displayData+0x58a>
			{	
				lcdClearDisplay();
     55a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
				lcdPrintAccelAxis(2, accel->z);
     55e:	f5 01       	movw	r30, r10
     560:	40 85       	ldd	r20, Z+8	; 0x08
     562:	51 85       	ldd	r21, Z+9	; 0x09
     564:	62 85       	ldd	r22, Z+10	; 0x0a
     566:	73 85       	ldd	r23, Z+11	; 0x0b
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <lcdPrintAccelAxis>
				oldVal = accel->z;
     56e:	f5 01       	movw	r30, r10
     570:	80 85       	ldd	r24, Z+8	; 0x08
     572:	91 85       	ldd	r25, Z+9	; 0x09
     574:	a2 85       	ldd	r26, Z+10	; 0x0a
     576:	b3 85       	ldd	r27, Z+11	; 0x0b
     578:	a0 c0       	rjmp	.+320    	; 0x6ba <displayData+0x55c>
				oldMode = master->displayMode;
			}
			break;
		case 5:
			if((abs(oldVal - bstCtrl->dutyCycle) > 0.1) || (oldMode != master->displayMode))
     57a:	60 91 f0 02 	lds	r22, 0x02F0
     57e:	70 91 f1 02 	lds	r23, 0x02F1
     582:	80 91 f2 02 	lds	r24, 0x02F2
     586:	90 91 f3 02 	lds	r25, 0x02F3
     58a:	28 85       	ldd	r18, Y+8	; 0x08
     58c:	39 85       	ldd	r19, Y+9	; 0x09
     58e:	4a 85       	ldd	r20, Y+10	; 0x0a
     590:	5b 85       	ldd	r21, Y+11	; 0x0b
     592:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     596:	7b 01       	movw	r14, r22
     598:	8c 01       	movw	r16, r24
	systemCount++;
}

float abs(float x)
{
	((x > 0) ? (x *= 1) : (x *= -1));
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	24 f0       	brlt	.+8      	; 0x5b2 <displayData+0x454>
     5aa:	17 fb       	bst	r17, 7
     5ac:	10 95       	com	r17
     5ae:	17 f9       	bld	r17, 7
     5b0:	10 95       	com	r17
				oldVal = accel->z;
				oldMode = master->displayMode;
			}
			break;
		case 5:
			if((abs(oldVal - bstCtrl->dutyCycle) > 0.1) || (oldMode != master->displayMode))
     5b2:	c8 01       	movw	r24, r16
     5b4:	b7 01       	movw	r22, r14
     5b6:	2d ec       	ldi	r18, 0xCD	; 205
     5b8:	3c ec       	ldi	r19, 0xCC	; 204
     5ba:	4c ec       	ldi	r20, 0xCC	; 204
     5bc:	5d e3       	ldi	r21, 0x3D	; 61
     5be:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     5c2:	18 16       	cp	r1, r24
     5c4:	c4 f0       	brlt	.+48     	; 0x5f6 <displayData+0x498>
     5c6:	f6 01       	movw	r30, r12
     5c8:	61 81       	ldd	r22, Z+1	; 0x01
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	88 27       	eor	r24, r24
     5ce:	77 fd       	sbrc	r23, 7
     5d0:	80 95       	com	r24
     5d2:	98 2f       	mov	r25, r24
     5d4:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
     5d8:	9b 01       	movw	r18, r22
     5da:	ac 01       	movw	r20, r24
     5dc:	60 91 ec 02 	lds	r22, 0x02EC
     5e0:	70 91 ed 02 	lds	r23, 0x02ED
     5e4:	80 91 ee 02 	lds	r24, 0x02EE
     5e8:	90 91 ef 02 	lds	r25, 0x02EF
     5ec:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     5f0:	88 23       	and	r24, r24
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <displayData+0x498>
     5f4:	79 c0       	rjmp	.+242    	; 0x6e8 <displayData+0x58a>
			{	
				lcdClearDisplay();
     5f6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
				lcdSendString(" Boost Duty:");
     5fa:	80 e6       	ldi	r24, 0x60	; 96
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
				lcdNewLine();
     602:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
				lcdPrintFloat(bstCtrl->dutyCycle);
     606:	68 85       	ldd	r22, Y+8	; 0x08
     608:	79 85       	ldd	r23, Y+9	; 0x09
     60a:	8a 85       	ldd	r24, Y+10	; 0x0a
     60c:	9b 85       	ldd	r25, Y+11	; 0x0b
     60e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <lcdPrintFloat>
				oldVal = bstCtrl->dutyCycle;
     612:	88 85       	ldd	r24, Y+8	; 0x08
     614:	99 85       	ldd	r25, Y+9	; 0x09
     616:	aa 85       	ldd	r26, Y+10	; 0x0a
     618:	bb 85       	ldd	r27, Y+11	; 0x0b
     61a:	4f c0       	rjmp	.+158    	; 0x6ba <displayData+0x55c>
				oldMode = master->displayMode;
			}
			break;
	
		case 6:
			if((abs(oldVal - bstCtrl->dutyCycle) > 0.1) || (oldMode != master->displayMode))
     61c:	60 91 f0 02 	lds	r22, 0x02F0
     620:	70 91 f1 02 	lds	r23, 0x02F1
     624:	80 91 f2 02 	lds	r24, 0x02F2
     628:	90 91 f3 02 	lds	r25, 0x02F3
     62c:	28 85       	ldd	r18, Y+8	; 0x08
     62e:	39 85       	ldd	r19, Y+9	; 0x09
     630:	4a 85       	ldd	r20, Y+10	; 0x0a
     632:	5b 85       	ldd	r21, Y+11	; 0x0b
     634:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     638:	7b 01       	movw	r14, r22
     63a:	8c 01       	movw	r16, r24
	systemCount++;
}

float abs(float x)
{
	((x > 0) ? (x *= 1) : (x *= -1));
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     648:	18 16       	cp	r1, r24
     64a:	24 f0       	brlt	.+8      	; 0x654 <displayData+0x4f6>
     64c:	17 fb       	bst	r17, 7
     64e:	10 95       	com	r17
     650:	17 f9       	bld	r17, 7
     652:	10 95       	com	r17
				oldMode = master->displayMode;
			}
			break;
	
		case 6:
			if((abs(oldVal - bstCtrl->dutyCycle) > 0.1) || (oldMode != master->displayMode))
     654:	c8 01       	movw	r24, r16
     656:	b7 01       	movw	r22, r14
     658:	2d ec       	ldi	r18, 0xCD	; 205
     65a:	3c ec       	ldi	r19, 0xCC	; 204
     65c:	4c ec       	ldi	r20, 0xCC	; 204
     65e:	5d e3       	ldi	r21, 0x3D	; 61
     660:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
     664:	18 16       	cp	r1, r24
     666:	bc f0       	brlt	.+46     	; 0x696 <displayData+0x538>
     668:	f6 01       	movw	r30, r12
     66a:	61 81       	ldd	r22, Z+1	; 0x01
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	88 27       	eor	r24, r24
     670:	77 fd       	sbrc	r23, 7
     672:	80 95       	com	r24
     674:	98 2f       	mov	r25, r24
     676:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	60 91 ec 02 	lds	r22, 0x02EC
     682:	70 91 ed 02 	lds	r23, 0x02ED
     686:	80 91 ee 02 	lds	r24, 0x02EE
     68a:	90 91 ef 02 	lds	r25, 0x02EF
     68e:	0e 94 4d 1c 	call	0x389a	; 0x389a <__nesf2>
     692:	88 23       	and	r24, r24
     694:	49 f1       	breq	.+82     	; 0x6e8 <displayData+0x58a>
			{	
				lcdClearDisplay();
     696:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
				lcdSendString(" Boost Integral:");
     69a:	8d e6       	ldi	r24, 0x6D	; 109
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
				lcdNewLine();
     6a2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
				lcdPrintFloat(bstCtrl->integral);
     6a6:	6c 89       	ldd	r22, Y+20	; 0x14
     6a8:	7d 89       	ldd	r23, Y+21	; 0x15
     6aa:	8e 89       	ldd	r24, Y+22	; 0x16
     6ac:	9f 89       	ldd	r25, Y+23	; 0x17
     6ae:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <lcdPrintFloat>
				oldVal = bstCtrl->integral;
     6b2:	8c 89       	ldd	r24, Y+20	; 0x14
     6b4:	9d 89       	ldd	r25, Y+21	; 0x15
     6b6:	ae 89       	ldd	r26, Y+22	; 0x16
     6b8:	bf 89       	ldd	r27, Y+23	; 0x17
     6ba:	80 93 f0 02 	sts	0x02F0, r24
     6be:	90 93 f1 02 	sts	0x02F1, r25
     6c2:	a0 93 f2 02 	sts	0x02F2, r26
     6c6:	b0 93 f3 02 	sts	0x02F3, r27
				oldMode = master->displayMode;
     6ca:	f6 01       	movw	r30, r12
     6cc:	61 81       	ldd	r22, Z+1	; 0x01
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
     6d8:	60 93 ec 02 	sts	0x02EC, r22
     6dc:	70 93 ed 02 	sts	0x02ED, r23
     6e0:	80 93 ee 02 	sts	0x02EE, r24
     6e4:	90 93 ef 02 	sts	0x02EF, r25
			break;

		default:
			break;
	}
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	bf 90       	pop	r11
     6fa:	af 90       	pop	r10
     6fc:	9f 90       	pop	r9
     6fe:	8f 90       	pop	r8
     700:	08 95       	ret

00000702 <initEEPROM>:
		initEEPROM();
	}
}

void initEEPROM()
{
     702:	8f 92       	push	r8
     704:	9f 92       	push	r9
     706:	af 92       	push	r10
     708:	bf 92       	push	r11
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	df 93       	push	r29
     718:	cf 93       	push	r28
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	28 97       	sbiw	r28, 0x08	; 8
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
	u08 val08;
	u16 val16;
	u32 val32;
	float valf;

	val32 = 0x0F2010F0;
     72a:	80 ef       	ldi	r24, 0xF0	; 240
     72c:	90 e1       	ldi	r25, 0x10	; 16
     72e:	a0 e2       	ldi	r26, 0x20	; 32
     730:	bf e0       	ldi	r27, 0x0F	; 15
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	ab 83       	std	Y+3, r26	; 0x03
     738:	bc 83       	std	Y+4, r27	; 0x04
	eeprom_write_block((const void*)&val32, (void*)&initialBoot, 4);
     73a:	ce 01       	movw	r24, r28
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	44 e0       	ldi	r20, 0x04	; 4
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 10.0;
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	a0 e2       	ldi	r26, 0x20	; 32
     750:	b1 e4       	ldi	r27, 0x41	; 65
     752:	8d 83       	std	Y+5, r24	; 0x05
     754:	9e 83       	std	Y+6, r25	; 0x06
     756:	af 83       	std	Y+7, r26	; 0x07
     758:	b8 87       	std	Y+8, r27	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userBoost, 4);
     75a:	8e 01       	movw	r16, r28
     75c:	0b 5f       	subi	r16, 0xFB	; 251
     75e:	1f 4f       	sbci	r17, 0xFF	; 255
     760:	c8 01       	movw	r24, r16
     762:	64 e0       	ldi	r22, 0x04	; 4
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	44 e0       	ldi	r20, 0x04	; 4
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 2.5;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	a0 e2       	ldi	r26, 0x20	; 32
     774:	b0 e4       	ldi	r27, 0x40	; 64
     776:	8d 83       	std	Y+5, r24	; 0x05
     778:	9e 83       	std	Y+6, r25	; 0x06
     77a:	af 83       	std	Y+7, r26	; 0x07
     77c:	b8 87       	std	Y+8, r27	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userBoostKp, 4);
     77e:	c8 01       	movw	r24, r16
     780:	68 e0       	ldi	r22, 0x08	; 8
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	44 e0       	ldi	r20, 0x04	; 4
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 0.001;
     78c:	0f 2e       	mov	r0, r31
     78e:	ff e6       	ldi	r31, 0x6F	; 111
     790:	8f 2e       	mov	r8, r31
     792:	f2 e1       	ldi	r31, 0x12	; 18
     794:	9f 2e       	mov	r9, r31
     796:	f3 e8       	ldi	r31, 0x83	; 131
     798:	af 2e       	mov	r10, r31
     79a:	fa e3       	ldi	r31, 0x3A	; 58
     79c:	bf 2e       	mov	r11, r31
     79e:	f0 2d       	mov	r31, r0
     7a0:	8d 82       	std	Y+5, r8	; 0x05
     7a2:	9e 82       	std	Y+6, r9	; 0x06
     7a4:	af 82       	std	Y+7, r10	; 0x07
     7a6:	b8 86       	std	Y+8, r11	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userBoostKi, 4);
     7a8:	c8 01       	movw	r24, r16
     7aa:	6c e0       	ldi	r22, 0x0C	; 12
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	44 e0       	ldi	r20, 0x04	; 4
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 0.0001;
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f7 e1       	ldi	r31, 0x17	; 23
     7ba:	cf 2e       	mov	r12, r31
     7bc:	f7 eb       	ldi	r31, 0xB7	; 183
     7be:	df 2e       	mov	r13, r31
     7c0:	f1 ed       	ldi	r31, 0xD1	; 209
     7c2:	ef 2e       	mov	r14, r31
     7c4:	f8 e3       	ldi	r31, 0x38	; 56
     7c6:	ff 2e       	mov	r15, r31
     7c8:	f0 2d       	mov	r31, r0
     7ca:	cd 82       	std	Y+5, r12	; 0x05
     7cc:	de 82       	std	Y+6, r13	; 0x06
     7ce:	ef 82       	std	Y+7, r14	; 0x07
     7d0:	f8 86       	std	Y+8, r15	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userBoostKd, 4);
     7d2:	c8 01       	movw	r24, r16
     7d4:	60 e1       	ldi	r22, 0x10	; 16
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	44 e0       	ldi	r20, 0x04	; 4
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 100.0;
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a8 ec       	ldi	r26, 0xC8	; 200
     7e6:	b2 e4       	ldi	r27, 0x42	; 66
     7e8:	8d 83       	std	Y+5, r24	; 0x05
     7ea:	9e 83       	std	Y+6, r25	; 0x06
     7ec:	af 83       	std	Y+7, r26	; 0x07
     7ee:	b8 87       	std	Y+8, r27	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userPressure, 4);
     7f0:	c8 01       	movw	r24, r16
     7f2:	64 e1       	ldi	r22, 0x14	; 20
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	44 e0       	ldi	r20, 0x04	; 4
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 1.0;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e8       	ldi	r26, 0x80	; 128
     804:	bf e3       	ldi	r27, 0x3F	; 63
     806:	8d 83       	std	Y+5, r24	; 0x05
     808:	9e 83       	std	Y+6, r25	; 0x06
     80a:	af 83       	std	Y+7, r26	; 0x07
     80c:	b8 87       	std	Y+8, r27	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userOnBoost, 4);
     80e:	c8 01       	movw	r24, r16
     810:	68 e1       	ldi	r22, 0x18	; 24
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	44 e0       	ldi	r20, 0x04	; 4
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>
	
	valf = 0.1;
     81c:	8d ec       	ldi	r24, 0xCD	; 205
     81e:	9c ec       	ldi	r25, 0xCC	; 204
     820:	ac ec       	ldi	r26, 0xCC	; 204
     822:	bd e3       	ldi	r27, 0x3D	; 61
     824:	8d 83       	std	Y+5, r24	; 0x05
     826:	9e 83       	std	Y+6, r25	; 0x06
     828:	af 83       	std	Y+7, r26	; 0x07
     82a:	b8 87       	std	Y+8, r27	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userWMKp, 4);
     82c:	c8 01       	movw	r24, r16
     82e:	6c e1       	ldi	r22, 0x1C	; 28
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	44 e0       	ldi	r20, 0x04	; 4
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 0.001;
     83a:	8d 82       	std	Y+5, r8	; 0x05
     83c:	9e 82       	std	Y+6, r9	; 0x06
     83e:	af 82       	std	Y+7, r10	; 0x07
     840:	b8 86       	std	Y+8, r11	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userWMKi, 4);
     842:	c8 01       	movw	r24, r16
     844:	60 e2       	ldi	r22, 0x20	; 32
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	44 e0       	ldi	r20, 0x04	; 4
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

	valf = 0.0001;
     850:	cd 82       	std	Y+5, r12	; 0x05
     852:	de 82       	std	Y+6, r13	; 0x06
     854:	ef 82       	std	Y+7, r14	; 0x07
     856:	f8 86       	std	Y+8, r15	; 0x08
	eeprom_write_block((const void*)&valf, (void*)&userWMKd, 4);
     858:	c8 01       	movw	r24, r16
     85a:	64 e2       	ldi	r22, 0x24	; 36
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	44 e0       	ldi	r20, 0x04	; 4
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>

}
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	08 95       	ret

0000088c <initProcessor>:
	return 0;
}


void initProcessor(mainCtrl *master)
{
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	df 93       	push	r29
     892:	cf 93       	push	r28
     894:	00 d0       	rcall	.+0      	; 0x896 <initProcessor+0xa>
     896:	00 d0       	rcall	.+0      	; 0x898 <initProcessor+0xc>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	8c 01       	movw	r16, r24
	u32 val;

	uartInit();												// initialize UART
     89e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uartInit>
	a2dInit();												// initialize A2D
     8a2:	0e 94 c2 12 	call	0x2584	; 0x2584 <a2dInit>
	timerInit();											// initialize timer
     8a6:	0e 94 60 07 	call	0xec0	; 0xec0 <timerInit>
	sbi(DDRD, PD5);											// set PD5 to PWM function
     8aa:	8d 9a       	sbi	0x11, 5	; 17
	sbi(DDRD, PD4);											// set PD4 to PWM function
     8ac:	8c 9a       	sbi	0x11, 4	; 17
	timer1PWMInitICR(PWM_SCALER);							// set PWM period
     8ae:	86 eb       	ldi	r24, 0xB6	; 182
     8b0:	95 e3       	ldi	r25, 0x35	; 53
     8b2:	0e 94 8b 08 	call	0x1116	; 0x1116 <timer1PWMInitICR>
	rprintfInit(uartSendByte);								// initialize float printing
     8b6:	8c e7       	ldi	r24, 0x7C	; 124
     8b8:	9e e0       	ldi	r25, 0x0E	; 14
     8ba:	0e 94 a0 0b 	call	0x1740	; 0x1740 <rprintfInit>
button returnButton;


void initButtons(void)
{
	scrollUpButton.id = 0x01;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 d2 03 	sts	0x03D2, r24
	scrollDownButton.id = 0x02;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	80 93 d3 03 	sts	0x03D3, r24
	selectButton.id = 0x80;
     8ca:	80 e8       	ldi	r24, 0x80	; 128
     8cc:	80 93 d4 03 	sts	0x03D4, r24
	returnButton.id = 0x40;
     8d0:	80 e4       	ldi	r24, 0x40	; 64
     8d2:	80 93 d9 03 	sts	0x03D9, r24
	sbi(DDRD, PD5);											// set PD5 to PWM function
	sbi(DDRD, PD4);											// set PD4 to PWM function
	timer1PWMInitICR(PWM_SCALER);							// set PWM period
	rprintfInit(uartSendByte);								// initialize float printing
	initButtons();											// initialize buttons
	timer1PWMAOn();											// turn on PWMA
     8d6:	0e 94 b1 08 	call	0x1162	; 0x1162 <timer1PWMAOn>
	timer1PWMASet(0);										// set PWMA to 0% duty cycle
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 cd 08 	call	0x119a	; 0x119a <timer1PWMASet>
	timer1PWMBOn();											// turn on PWMB
     8e2:	0e 94 b8 08 	call	0x1170	; 0x1170 <timer1PWMBOn>
	timer1PWMBSet(0);										// set PWMB to 0% duty cycle
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <timer1PWMBSet>

	timerAttach(0, systemCounter);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	62 e8       	ldi	r22, 0x82	; 130
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	0e 94 ab 07 	call	0xf56	; 0xf56 <timerAttach>

	DDRC &= 0x00;											// set PC0-PC7 as button inputs 
     8f8:	84 b3       	in	r24, 0x14	; 20
     8fa:	14 ba       	out	0x14, r1	; 20
	DDRB |= 0xFF;	 										// set PB-PB7 as outputs
     8fc:	87 b3       	in	r24, 0x17	; 23
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	87 bb       	out	0x17, r24	; 23
	asm ("nop");
     902:	00 00       	nop
	PORTB = 0x00;											// turn off all lights
     904:	18 ba       	out	0x18, r1	; 24
	PORTB |= S_R + S_G;										// turn on status lights	
     906:	88 b3       	in	r24, 0x18	; 24
     908:	80 6c       	ori	r24, 0xC0	; 192
     90a:	88 bb       	out	0x18, r24	; 24

	master->mainMode = 0;									// reset main mode
     90c:	f8 01       	movw	r30, r16
     90e:	10 82       	st	Z, r1
	master->displayMode = 0;								// reset dislplay mode
     910:	11 82       	std	Z+1, r1	; 0x01
	master->numDisplayModes = 7;							// set number of display modes
     912:	87 e0       	ldi	r24, 0x07	; 7
     914:	82 83       	std	Z+2, r24	; 0x02
	master->menuMode = 0;									// reset menu mode
     916:	13 82       	std	Z+3, r1	; 0x03
	master->numMenuModes = 4;
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	84 83       	std	Z+4, r24	; 0x04
	master->units = 0;
     91c:	15 82       	std	Z+5, r1	; 0x05
	master->editVal = 0;
     91e:	16 82       	std	Z+6, r1	; 0x06

	eeprom_read_block((void*)&val, (const void*)&initialBoot, 4);
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	44 e0       	ldi	r20, 0x04	; 4
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>

	if(val != 0x0F2010F0)
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	ab 81       	ldd	r26, Y+3	; 0x03
     936:	bc 81       	ldd	r27, Y+4	; 0x04
     938:	80 5f       	subi	r24, 0xF0	; 240
     93a:	90 41       	sbci	r25, 0x10	; 16
     93c:	a0 42       	sbci	r26, 0x20	; 32
     93e:	bf 40       	sbci	r27, 0x0F	; 15
     940:	11 f0       	breq	.+4      	; 0x946 <initProcessor+0xba>
	{
		initEEPROM();
     942:	0e 94 81 03 	call	0x702	; 0x702 <initEEPROM>
	}
}
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <checkButtons>:

}


void checkButtons(mainCtrl *master, boostCtrl *bstCtrl, waterMethCtrl *wmCtrl)
{
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	7b 01       	movw	r14, r22
     96c:	6a 01       	movw	r12, r20
	static u08 recentPress = 0;
	static u32 pressCount = 0; 
	static u08 hold = 0;	

	if(recentPress)
     96e:	80 91 f9 02 	lds	r24, 0x02F9
     972:	88 23       	and	r24, r24
     974:	a9 f0       	breq	.+42     	; 0x9a0 <checkButtons+0x48>
	{
		pressCount = systemCount;
     976:	80 91 d5 03 	lds	r24, 0x03D5
     97a:	90 91 d6 03 	lds	r25, 0x03D6
     97e:	a0 91 d7 03 	lds	r26, 0x03D7
     982:	b0 91 d8 03 	lds	r27, 0x03D8
     986:	80 93 f5 02 	sts	0x02F5, r24
     98a:	90 93 f6 02 	sts	0x02F6, r25
     98e:	a0 93 f7 02 	sts	0x02F7, r26
     992:	b0 93 f8 02 	sts	0x02F8, r27
		recentPress = 0;
     996:	10 92 f9 02 	sts	0x02F9, r1
		hold = 1;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 f4 02 	sts	0x02F4, r24
	}

	if((((systemCount - pressCount) < 2000) && hold))
     9a0:	80 91 d5 03 	lds	r24, 0x03D5
     9a4:	90 91 d6 03 	lds	r25, 0x03D6
     9a8:	a0 91 d7 03 	lds	r26, 0x03D7
     9ac:	b0 91 d8 03 	lds	r27, 0x03D8
     9b0:	20 91 f5 02 	lds	r18, 0x02F5
     9b4:	30 91 f6 02 	lds	r19, 0x02F6
     9b8:	40 91 f7 02 	lds	r20, 0x02F7
     9bc:	50 91 f8 02 	lds	r21, 0x02F8
     9c0:	82 1b       	sub	r24, r18
     9c2:	93 0b       	sbc	r25, r19
     9c4:	a4 0b       	sbc	r26, r20
     9c6:	b5 0b       	sbc	r27, r21
     9c8:	80 5d       	subi	r24, 0xD0	; 208
     9ca:	97 40       	sbci	r25, 0x07	; 7
     9cc:	a0 40       	sbci	r26, 0x00	; 0
     9ce:	b0 40       	sbci	r27, 0x00	; 0
     9d0:	28 f4       	brcc	.+10     	; 0x9dc <checkButtons+0x84>
     9d2:	80 91 f4 02 	lds	r24, 0x02F4
     9d6:	88 23       	and	r24, r24
     9d8:	09 f0       	breq	.+2      	; 0x9dc <checkButtons+0x84>
     9da:	0d c1       	rjmp	.+538    	; 0xbf6 <checkButtons+0x29e>
	{
		return;
	}
	else
	{
		hold = 0;
     9dc:	10 92 f4 02 	sts	0x02F4, r1
}

u08 getButtonState(button *sw)
{
	u08 state1, state2;
	state1 = (PINC & sw->id);
     9e0:	83 b3       	in	r24, 0x13	; 19
	if(state1 == 0)
     9e2:	90 91 d4 03 	lds	r25, 0x03D4
     9e6:	89 23       	and	r24, r25
     9e8:	09 f0       	breq	.+2      	; 0x9ec <checkButtons+0x94>
     9ea:	f3 c0       	rjmp	.+486    	; 0xbd2 <checkButtons+0x27a>
	}

	// switch from display to menu mode
	if(getButtonState(&selectButton))
	{
		recentPress = 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 f9 02 	sts	0x02F9, r24
		master->mainMode = 1;		
     9f2:	88 83       	st	Y, r24

		master->displayMode = 0;
     9f4:	19 82       	std	Y+1, r1	; 0x01
		master->menuMode = 0;
     9f6:	1b 82       	std	Y+3, r1	; 0x03
     9f8:	fe c0       	rjmp	.+508    	; 0xbf6 <checkButtons+0x29e>
	}

	// scroll through menu and display modes
	if(getButtonState(&scrollUpButton))
	{
		recentPress = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 f9 02 	sts	0x02F9, r24

		if(master->editVal)
     a00:	8e 81       	ldd	r24, Y+6	; 0x06
     a02:	88 23       	and	r24, r24
     a04:	49 f1       	breq	.+82     	; 0xa58 <checkButtons+0x100>
		{	
			if(master->menuMode == 2)
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	49 f4       	brne	.+18     	; 0xa1e <checkButtons+0xc6>
			{
				master->val += 2;
     a0c:	6f 81       	ldd	r22, Y+7	; 0x07
     a0e:	78 85       	ldd	r23, Y+8	; 0x08
     a10:	89 85       	ldd	r24, Y+9	; 0x09
     a12:	9a 85       	ldd	r25, Y+10	; 0x0a
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e4       	ldi	r21, 0x40	; 64
     a1c:	1a c0       	rjmp	.+52     	; 0xa52 <checkButtons+0xfa>
			}
			else if(master->menuMode == 1)
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	79 f4       	brne	.+30     	; 0xa42 <checkButtons+0xea>
			{
				master->val *= 10;
     a24:	6f 81       	ldd	r22, Y+7	; 0x07
     a26:	78 85       	ldd	r23, Y+8	; 0x08
     a28:	89 85       	ldd	r24, Y+9	; 0x09
     a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e2       	ldi	r20, 0x20	; 32
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
     a38:	6f 83       	std	Y+7, r22	; 0x07
     a3a:	78 87       	std	Y+8, r23	; 0x08
     a3c:	89 87       	std	Y+9, r24	; 0x09
     a3e:	9a 87       	std	Y+10, r25	; 0x0a
     a40:	da c0       	rjmp	.+436    	; 0xbf6 <checkButtons+0x29e>
			}

			else
			{
				master->val += 0.1;
     a42:	6f 81       	ldd	r22, Y+7	; 0x07
     a44:	78 85       	ldd	r23, Y+8	; 0x08
     a46:	89 85       	ldd	r24, Y+9	; 0x09
     a48:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4a:	2d ec       	ldi	r18, 0xCD	; 205
     a4c:	3c ec       	ldi	r19, 0xCC	; 204
     a4e:	4c ec       	ldi	r20, 0xCC	; 204
     a50:	5d e3       	ldi	r21, 0x3D	; 61
     a52:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>
     a56:	f0 cf       	rjmp	.-32     	; 0xa38 <checkButtons+0xe0>
			}
			return;
		}

		// in edit parameter mode 
		if(master->mainMode)
     a58:	88 81       	ld	r24, Y
     a5a:	88 23       	and	r24, r24
     a5c:	61 f0       	breq	.+24     	; 0xa76 <checkButtons+0x11e>
		{
			if(master->menuMode < (master->numMenuModes - 1))
     a5e:	2b 81       	ldd	r18, Y+3	; 0x03
     a60:	8c 81       	ldd	r24, Y+4	; 0x04
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	28 17       	cp	r18, r24
     a6a:	39 07       	cpc	r19, r25
     a6c:	0c f0       	brlt	.+2      	; 0xa70 <checkButtons+0x118>
     a6e:	c3 c0       	rjmp	.+390    	; 0xbf6 <checkButtons+0x29e>
			{
				master->menuMode++;
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	40 c0       	rjmp	.+128    	; 0xaf6 <checkButtons+0x19e>
			}
		}

		else
		{
			if(master->displayMode < (master->numDisplayModes - 1))
     a76:	29 81       	ldd	r18, Y+1	; 0x01
     a78:	8a 81       	ldd	r24, Y+2	; 0x02
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	28 17       	cp	r18, r24
     a82:	39 07       	cpc	r19, r25
     a84:	0c f0       	brlt	.+2      	; 0xa88 <checkButtons+0x130>
     a86:	b7 c0       	rjmp	.+366    	; 0xbf6 <checkButtons+0x29e>
			{
				master->displayMode++;
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	3c c0       	rjmp	.+120    	; 0xb06 <checkButtons+0x1ae>
		return;
	}

	if(getButtonState(&scrollDownButton))
	{
		recentPress = 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 f9 02 	sts	0x02F9, r24

		if(master->editVal)
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	88 23       	and	r24, r24
     a98:	29 f1       	breq	.+74     	; 0xae4 <checkButtons+0x18c>
		{	
			if(master->menuMode == 2)
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	49 f4       	brne	.+18     	; 0xab2 <checkButtons+0x15a>
			{
				master->val -= 2;
     aa0:	6f 81       	ldd	r22, Y+7	; 0x07
     aa2:	78 85       	ldd	r23, Y+8	; 0x08
     aa4:	89 85       	ldd	r24, Y+9	; 0x09
     aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e4       	ldi	r21, 0x40	; 64
     ab0:	16 c0       	rjmp	.+44     	; 0xade <checkButtons+0x186>
			}
			else if(master->menuMode == 1)
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	59 f4       	brne	.+22     	; 0xace <checkButtons+0x176>
			{
				master->val /= 10;
     ab8:	6f 81       	ldd	r22, Y+7	; 0x07
     aba:	78 85       	ldd	r23, Y+8	; 0x08
     abc:	89 85       	ldd	r24, Y+9	; 0x09
     abe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e2       	ldi	r20, 0x20	; 32
     ac6:	51 e4       	ldi	r21, 0x41	; 65
     ac8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
     acc:	b5 cf       	rjmp	.-150    	; 0xa38 <checkButtons+0xe0>
			}
			else
			{
				master->val -= 0.1;
     ace:	6f 81       	ldd	r22, Y+7	; 0x07
     ad0:	78 85       	ldd	r23, Y+8	; 0x08
     ad2:	89 85       	ldd	r24, Y+9	; 0x09
     ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad6:	2d ec       	ldi	r18, 0xCD	; 205
     ad8:	3c ec       	ldi	r19, 0xCC	; 204
     ada:	4c ec       	ldi	r20, 0xCC	; 204
     adc:	5d e3       	ldi	r21, 0x3D	; 61
     ade:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
     ae2:	aa cf       	rjmp	.-172    	; 0xa38 <checkButtons+0xe0>
			}
			return;
		}

		// in edit parameter mode 
		if(master->mainMode)
     ae4:	88 81       	ld	r24, Y
     ae6:	88 23       	and	r24, r24
     ae8:	41 f0       	breq	.+16     	; 0xafa <checkButtons+0x1a2>
		{
			if(master->menuMode > 0)
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	88 23       	and	r24, r24
     aee:	09 f4       	brne	.+2      	; 0xaf2 <checkButtons+0x19a>
     af0:	82 c0       	rjmp	.+260    	; 0xbf6 <checkButtons+0x29e>
			{
				master->menuMode--;
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	81 50       	subi	r24, 0x01	; 1
     af6:	8b 83       	std	Y+3, r24	; 0x03
     af8:	7e c0       	rjmp	.+252    	; 0xbf6 <checkButtons+0x29e>
			}
		}

		else
		{
			if(master->displayMode > 0)
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	88 23       	and	r24, r24
     afe:	09 f4       	brne	.+2      	; 0xb02 <checkButtons+0x1aa>
     b00:	7a c0       	rjmp	.+244    	; 0xbf6 <checkButtons+0x29e>
			{
				master->displayMode--;
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	81 50       	subi	r24, 0x01	; 1
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	76 c0       	rjmp	.+236    	; 0xbf6 <checkButtons+0x29e>
		return;
	}

	if(getButtonState(&returnButton))
	{
		recentPress = 1;
     b0a:	01 e0       	ldi	r16, 0x01	; 1
     b0c:	00 93 f9 02 	sts	0x02F9, r16
		if(master->mainMode)
     b10:	88 81       	ld	r24, Y
     b12:	88 23       	and	r24, r24
     b14:	09 f4       	brne	.+2      	; 0xb18 <checkButtons+0x1c0>
     b16:	6f c0       	rjmp	.+222    	; 0xbf6 <checkButtons+0x29e>
		{
			if(master->editVal)
     b18:	8e 81       	ldd	r24, Y+6	; 0x06
     b1a:	88 23       	and	r24, r24
     b1c:	61 f1       	breq	.+88     	; 0xb76 <checkButtons+0x21e>
			{
				master->editVal = 0;
     b1e:	1e 82       	std	Y+6, r1	; 0x06

				switch(master->menuMode)
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	61 f0       	breq	.+24     	; 0xb3e <checkButtons+0x1e6>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	28 f0       	brcs	.+10     	; 0xb34 <checkButtons+0x1dc>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	69 f0       	breq	.+26     	; 0xb48 <checkButtons+0x1f0>
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	c1 f4       	brne	.+48     	; 0xb62 <checkButtons+0x20a>
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <checkButtons+0x1fa>
				{
					case 0:
						eeprom_write_block((void*)&master->val, (const void*)&userBoost, 4);
     b34:	ce 01       	movw	r24, r28
     b36:	07 96       	adiw	r24, 0x07	; 7
     b38:	64 e0       	ldi	r22, 0x04	; 4
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	0e c0       	rjmp	.+28     	; 0xb5a <checkButtons+0x202>
						break;
	
					case 1:
						eeprom_write_block((void*)&master->val, (const void*)&userBoostKi, 4);
     b3e:	ce 01       	movw	r24, r28
     b40:	07 96       	adiw	r24, 0x07	; 7
     b42:	6c e0       	ldi	r22, 0x0C	; 12
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	09 c0       	rjmp	.+18     	; 0xb5a <checkButtons+0x202>
						break;
	
					case 2:
						eeprom_write_block((void*)&master->val, (const void*)&userPressure, 4);
     b48:	ce 01       	movw	r24, r28
     b4a:	07 96       	adiw	r24, 0x07	; 7
     b4c:	64 e1       	ldi	r22, 0x14	; 20
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	04 c0       	rjmp	.+8      	; 0xb5a <checkButtons+0x202>
						break;
		
					case 3:
						eeprom_write_block((void*)&master->val, (const void*)&userOnBoost, 4);
     b52:	ce 01       	movw	r24, r28
     b54:	07 96       	adiw	r24, 0x07	; 7
     b56:	68 e1       	ldi	r22, 0x18	; 24
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	44 e0       	ldi	r20, 0x04	; 4
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	0e 94 c9 20 	call	0x4192	; 0x4192 <__eewr_block_m32>
						break;
					
					default:
						break;
				}
				initProcessor(master);
     b62:	ce 01       	movw	r24, r28
     b64:	0e 94 46 04 	call	0x88c	; 0x88c <initProcessor>
				initBoost(bstCtrl);
     b68:	c7 01       	movw	r24, r14
     b6a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <initBoost>
				initWM(wmCtrl);
     b6e:	c6 01       	movw	r24, r12
     b70:	0e 94 2c 18 	call	0x3058	; 0x3058 <initWM>
     b74:	40 c0       	rjmp	.+128    	; 0xbf6 <checkButtons+0x29e>
				return;
			}

			switch(master->menuMode)
     b76:	1b 81       	ldd	r17, Y+3	; 0x03
     b78:	11 30       	cpi	r17, 0x01	; 1
     b7a:	61 f0       	breq	.+24     	; 0xb94 <checkButtons+0x23c>
     b7c:	11 30       	cpi	r17, 0x01	; 1
     b7e:	28 f0       	brcs	.+10     	; 0xb8a <checkButtons+0x232>
     b80:	12 30       	cpi	r17, 0x02	; 2
     b82:	91 f0       	breq	.+36     	; 0xba8 <checkButtons+0x250>
     b84:	13 30       	cpi	r17, 0x03	; 3
     b86:	b9 f5       	brne	.+110    	; 0xbf6 <checkButtons+0x29e>
     b88:	19 c0       	rjmp	.+50     	; 0xbbc <checkButtons+0x264>
			{
				case 0:
					eeprom_read_block((void*)&master->val, (const void*)&userBoost, 4);
     b8a:	ce 01       	movw	r24, r28
     b8c:	07 96       	adiw	r24, 0x07	; 7
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	0e c0       	rjmp	.+28     	; 0xbb0 <checkButtons+0x258>
					master->editVal = 1;
					break;

				case 1:
					eeprom_read_block((void*)&master->val, (const void*)&userBoostKi, 4);
     b94:	ce 01       	movw	r24, r28
     b96:	07 96       	adiw	r24, 0x07	; 7
     b98:	6c e0       	ldi	r22, 0x0C	; 12
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	44 e0       	ldi	r20, 0x04	; 4
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
					master->editVal = 1;					
     ba4:	1e 83       	std	Y+6, r17	; 0x06
     ba6:	27 c0       	rjmp	.+78     	; 0xbf6 <checkButtons+0x29e>
					break;

				case 2:
					eeprom_read_block((void*)&master->val, (const void*)&userPressure, 4);
     ba8:	ce 01       	movw	r24, r28
     baa:	07 96       	adiw	r24, 0x07	; 7
     bac:	64 e1       	ldi	r22, 0x14	; 20
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	44 e0       	ldi	r20, 0x04	; 4
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
					master->editVal = 1;
     bb8:	0e 83       	std	Y+6, r16	; 0x06
     bba:	1d c0       	rjmp	.+58     	; 0xbf6 <checkButtons+0x29e>
					break;

				case 3:
					eeprom_read_block((void*)&master->val, (const void*)&userOnBoost, 4);
     bbc:	ce 01       	movw	r24, r28
     bbe:	07 96       	adiw	r24, 0x07	; 7
     bc0:	68 e1       	ldi	r22, 0x18	; 24
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	44 e0       	ldi	r20, 0x04	; 4
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
					master->editVal = 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	8e 83       	std	Y+6, r24	; 0x06
     bd0:	12 c0       	rjmp	.+36     	; 0xbf6 <checkButtons+0x29e>
}

u08 getButtonState(button *sw)
{
	u08 state1, state2;
	state1 = (PINC & sw->id);
     bd2:	83 b3       	in	r24, 0x13	; 19
	if(state1 == 0)
     bd4:	90 91 d2 03 	lds	r25, 0x03D2
     bd8:	89 23       	and	r24, r25
     bda:	09 f4       	brne	.+2      	; 0xbde <checkButtons+0x286>
     bdc:	0e cf       	rjmp	.-484    	; 0x9fa <checkButtons+0xa2>
}

u08 getButtonState(button *sw)
{
	u08 state1, state2;
	state1 = (PINC & sw->id);
     bde:	83 b3       	in	r24, 0x13	; 19
	if(state1 == 0)
     be0:	90 91 d3 03 	lds	r25, 0x03D3
     be4:	89 23       	and	r24, r25
     be6:	09 f4       	brne	.+2      	; 0xbea <checkButtons+0x292>
     be8:	52 cf       	rjmp	.-348    	; 0xa8e <checkButtons+0x136>
}

u08 getButtonState(button *sw)
{
	u08 state1, state2;
	state1 = (PINC & sw->id);
     bea:	83 b3       	in	r24, 0x13	; 19
	if(state1 == 0)
     bec:	90 91 d9 03 	lds	r25, 0x03D9
     bf0:	89 23       	and	r24, r25
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <checkButtons+0x29e>
     bf4:	8a cf       	rjmp	.-236    	; 0xb0a <checkButtons+0x1b2>
					break;
			}
		}
	}

}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	08 95       	ret

00000c08 <main>:
{
 asm("nop");   // user code here
}

int main(void)
{
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	c7 55       	subi	r28, 0x57	; 87
     c24:	d0 40       	sbci	r29, 0x00	; 0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
	boostCtrl bstCtrl;
	waterMethCtrl wmCtrl;
	mainCtrl master;
	TriAx accel;

	initProcessor(&master);									// initialize the processor
     c30:	8e 01       	movw	r16, r28
     c32:	0f 5f       	subi	r16, 0xFF	; 255
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	c8 01       	movw	r24, r16
     c38:	0e 94 46 04 	call	0x88c	; 0x88c <initProcessor>
	// initialize sensors
	initBoost(&bstCtrl);
     c3c:	98 e1       	ldi	r25, 0x18	; 24
     c3e:	e9 2e       	mov	r14, r25
     c40:	f1 2c       	mov	r15, r1
     c42:	ec 0e       	add	r14, r28
     c44:	fd 1e       	adc	r15, r29
     c46:	c7 01       	movw	r24, r14
     c48:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <initBoost>
	initWM(&wmCtrl);	
     c4c:	84 e3       	ldi	r24, 0x34	; 52
     c4e:	c8 2e       	mov	r12, r24
     c50:	d1 2c       	mov	r13, r1
     c52:	cc 0e       	add	r12, r28
     c54:	dd 1e       	adc	r13, r29
     c56:	c6 01       	movw	r24, r12
     c58:	0e 94 2c 18 	call	0x3058	; 0x3058 <initWM>
	lcdWelcomeScreen();
     c5c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <lcdWelcomeScreen>
     c60:	aa 24       	eor	r10, r10
     c62:	aa 94       	dec	r10
	mode = 255;

	while(1)
	{
		// check button state
		checkButtons(&master, &bstCtrl, &wmCtrl);
     c64:	be 2c       	mov	r11, r14
     c66:	ef 2c       	mov	r14, r15
     c68:	fc 2c       	mov	r15, r12
     c6a:	cd 2c       	mov	r12, r13
     c6c:	90 2e       	mov	r9, r16
     c6e:	d1 2e       	mov	r13, r17
		// update display
		if(!master.mainMode)
		{
			
			// update sensors
			readAccel(&accel);
     c70:	8e 01       	movw	r16, r28
     c72:	04 5f       	subi	r16, 0xF4	; 244
     c74:	1f 4f       	sbci	r17, 0xFF	; 255
	mode = 255;

	while(1)
	{
		// check button state
		checkButtons(&master, &bstCtrl, &wmCtrl);
     c76:	89 2d       	mov	r24, r9
     c78:	9d 2d       	mov	r25, r13
     c7a:	6b 2d       	mov	r22, r11
     c7c:	7e 2d       	mov	r23, r14
     c7e:	4f 2d       	mov	r20, r15
     c80:	5c 2d       	mov	r21, r12
     c82:	0e 94 ac 04 	call	0x958	; 0x958 <checkButtons>
		
		if(master.editVal)
     c86:	8f 81       	ldd	r24, Y+7	; 0x07
     c88:	88 23       	and	r24, r24
     c8a:	49 f0       	breq	.+18     	; 0xc9e <main+0x96>
		{
			lcdEditValue(master.menuMode, master.val);
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
     c8e:	48 85       	ldd	r20, Y+8	; 0x08
     c90:	59 85       	ldd	r21, Y+9	; 0x09
     c92:	6a 85       	ldd	r22, Y+10	; 0x0a
     c94:	7b 85       	ldd	r23, Y+11	; 0x0b
     c96:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <lcdEditValue>
     c9a:	aa 24       	eor	r10, r10
     c9c:	aa 94       	dec	r10
			mode = 255;
		}

		// update display
		if(!master.mainMode)
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	88 23       	and	r24, r24
     ca2:	29 f5       	brne	.+74     	; 0xcee <main+0xe6>
		{
			
			// update sensors
			readAccel(&accel);
     ca4:	c8 01       	movw	r24, r16
     ca6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <readAccel>
			readBoost(&bstCtrl);
     caa:	8b 2d       	mov	r24, r11
     cac:	9e 2d       	mov	r25, r14
     cae:	0e 94 a9 14 	call	0x2952	; 0x2952 <readBoost>
			readWM(&wmCtrl);
     cb2:	8f 2d       	mov	r24, r15
     cb4:	9c 2d       	mov	r25, r12
     cb6:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <readWM>
			wmCtrl.boost = bstCtrl.boost;
     cba:	88 8d       	ldd	r24, Y+24	; 0x18
     cbc:	99 8d       	ldd	r25, Y+25	; 0x19
     cbe:	aa 8d       	ldd	r26, Y+26	; 0x1a
     cc0:	bb 8d       	ldd	r27, Y+27	; 0x1b
     cc2:	88 af       	std	Y+56, r24	; 0x38
     cc4:	99 af       	std	Y+57, r25	; 0x39
     cc6:	aa af       	std	Y+58, r26	; 0x3a
     cc8:	bb af       	std	Y+59, r27	; 0x3b

			// update controllers
			controlBoost(&bstCtrl);
     cca:	8b 2d       	mov	r24, r11
     ccc:	9e 2d       	mov	r25, r14
     cce:	0e 94 1c 13 	call	0x2638	; 0x2638 <controlBoost>
			controlWM(&wmCtrl);
     cd2:	8f 2d       	mov	r24, r15
     cd4:	9c 2d       	mov	r25, r12
     cd6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <controlWM>

			// display data
			displayData(&master, &bstCtrl, &wmCtrl, &accel);	
     cda:	89 2d       	mov	r24, r9
     cdc:	9d 2d       	mov	r25, r13
     cde:	6b 2d       	mov	r22, r11
     ce0:	7e 2d       	mov	r23, r14
     ce2:	4f 2d       	mov	r20, r15
     ce4:	5c 2d       	mov	r21, r12
     ce6:	98 01       	movw	r18, r16
     ce8:	0e 94 af 00 	call	0x15e	; 0x15e <displayData>
     cec:	c4 cf       	rjmp	.-120    	; 0xc76 <main+0x6e>
		}


		else
		{
			if(((mode != master.menuMode) && (!master.editVal)))
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	a8 16       	cp	r10, r24
     cf2:	09 f2       	breq	.-126    	; 0xc76 <main+0x6e>
     cf4:	8f 81       	ldd	r24, Y+7	; 0x07
     cf6:	88 23       	and	r24, r24
     cf8:	09 f0       	breq	.+2      	; 0xcfc <main+0xf4>
     cfa:	bd cf       	rjmp	.-134    	; 0xc76 <main+0x6e>
			{
				lcdMenuOptions(master.menuMode);
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	0e 94 39 10 	call	0x2072	; 0x2072 <lcdMenuOptions>
				mode = master.menuMode;
     d02:	ac 80       	ldd	r10, Y+4	; 0x04
     d04:	b8 cf       	rjmp	.-144    	; 0xc76 <main+0x6e>

00000d06 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
     d06:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     d08:	8f b7       	in	r24, 0x3f	; 63
     d0a:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
     d0c:	71 83       	std	Z+1, r23	; 0x01
     d0e:	60 83       	st	Z, r22
	buffer->size = size;
     d10:	53 83       	std	Z+3, r21	; 0x03
     d12:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
     d14:	17 82       	std	Z+7, r1	; 0x07
     d16:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
     d18:	15 82       	std	Z+5, r1	; 0x05
     d1a:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     d1c:	8f bf       	out	0x3f, r24	; 63
}
     d1e:	08 95       	ret

00000d20 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
     d20:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
     d22:	4f b7       	in	r20, 0x3f	; 63
     d24:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9c 91       	ld	r25, X
     d2c:	15 97       	sbiw	r26, 0x05	; 5
     d2e:	89 2b       	or	r24, r25
     d30:	11 f4       	brne	.+4      	; 0xd36 <bufferGetFromFront+0x16>
     d32:	e0 e0       	ldi	r30, 0x00	; 0
     d34:	25 c0       	rjmp	.+74     	; 0xd80 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
     d36:	16 96       	adiw	r26, 0x06	; 6
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	ed 91       	ld	r30, X+
     d40:	fc 91       	ld	r31, X
     d42:	11 97       	sbiw	r26, 0x01	; 1
     d44:	e8 0f       	add	r30, r24
     d46:	f9 1f       	adc	r31, r25
     d48:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	17 96       	adiw	r26, 0x07	; 7
     d4e:	9c 93       	st	X, r25
     d50:	8e 93       	st	-X, r24
     d52:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
     d54:	12 96       	adiw	r26, 0x02	; 2
     d56:	2d 91       	ld	r18, X+
     d58:	3c 91       	ld	r19, X
     d5a:	13 97       	sbiw	r26, 0x03	; 3
     d5c:	82 17       	cp	r24, r18
     d5e:	93 07       	cpc	r25, r19
     d60:	30 f0       	brcs	.+12     	; 0xd6e <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
     d62:	82 1b       	sub	r24, r18
     d64:	93 0b       	sbc	r25, r19
     d66:	17 96       	adiw	r26, 0x07	; 7
     d68:	9c 93       	st	X, r25
     d6a:	8e 93       	st	-X, r24
     d6c:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	8d 91       	ld	r24, X+
     d72:	9c 91       	ld	r25, X
     d74:	15 97       	sbiw	r26, 0x05	; 5
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	15 96       	adiw	r26, 0x05	; 5
     d7a:	9c 93       	st	X, r25
     d7c:	8e 93       	st	-X, r24
     d7e:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
     d80:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
     d82:	8e 2f       	mov	r24, r30
     d84:	08 95       	ret

00000d86 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
     d86:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     d88:	4f b7       	in	r20, 0x3f	; 63
     d8a:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
     d8c:	84 81       	ldd	r24, Z+4	; 0x04
     d8e:	95 81       	ldd	r25, Z+5	; 0x05
     d90:	68 17       	cp	r22, r24
     d92:	79 07       	cpc	r23, r25
     d94:	b0 f4       	brcc	.+44     	; 0xdc2 <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
     d96:	86 81       	ldd	r24, Z+6	; 0x06
     d98:	97 81       	ldd	r25, Z+7	; 0x07
     d9a:	86 0f       	add	r24, r22
     d9c:	97 1f       	adc	r25, r23
     d9e:	97 83       	std	Z+7, r25	; 0x07
     da0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
     da2:	22 81       	ldd	r18, Z+2	; 0x02
     da4:	33 81       	ldd	r19, Z+3	; 0x03
     da6:	82 17       	cp	r24, r18
     da8:	93 07       	cpc	r25, r19
     daa:	20 f0       	brcs	.+8      	; 0xdb4 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
     dac:	82 1b       	sub	r24, r18
     dae:	93 0b       	sbc	r25, r19
     db0:	97 83       	std	Z+7, r25	; 0x07
     db2:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     db4:	84 81       	ldd	r24, Z+4	; 0x04
     db6:	95 81       	ldd	r25, Z+5	; 0x05
     db8:	86 1b       	sub	r24, r22
     dba:	97 0b       	sbc	r25, r23
     dbc:	95 83       	std	Z+5, r25	; 0x05
     dbe:	84 83       	std	Z+4, r24	; 0x04
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     dc2:	15 82       	std	Z+5, r1	; 0x05
     dc4:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     dc6:	4f bf       	out	0x3f, r20	; 63
}
     dc8:	08 95       	ret

00000dca <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     dca:	fc 01       	movw	r30, r24
     dcc:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
     dce:	2f b7       	in	r18, 0x3f	; 63
     dd0:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
     dd2:	2f bf       	out	0x3f, r18	; 63
     dd4:	26 81       	ldd	r18, Z+6	; 0x06
     dd6:	37 81       	ldd	r19, Z+7	; 0x07
     dd8:	62 81       	ldd	r22, Z+2	; 0x02
     dda:	73 81       	ldd	r23, Z+3	; 0x03
     ddc:	82 0f       	add	r24, r18
     dde:	93 1f       	adc	r25, r19
     de0:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodhi4>
     de4:	01 90       	ld	r0, Z+
     de6:	f0 81       	ld	r31, Z
     de8:	e0 2d       	mov	r30, r0
     dea:	e8 0f       	add	r30, r24
     dec:	f9 1f       	adc	r31, r25
	return data;
}
     dee:	80 81       	ld	r24, Z
     df0:	08 95       	ret

00000df2 <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
     dfa:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
     dfc:	4f b7       	in	r20, 0x3f	; 63
     dfe:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     e00:	2c 81       	ldd	r18, Y+4	; 0x04
     e02:	3d 81       	ldd	r19, Y+5	; 0x05
     e04:	6a 81       	ldd	r22, Y+2	; 0x02
     e06:	7b 81       	ldd	r23, Y+3	; 0x03
     e08:	26 17       	cp	r18, r22
     e0a:	37 07       	cpc	r19, r23
     e0c:	98 f4       	brcc	.+38     	; 0xe34 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
     e10:	9f 81       	ldd	r25, Y+7	; 0x07
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodhi4>
     e1a:	e8 81       	ld	r30, Y
     e1c:	f9 81       	ldd	r31, Y+1	; 0x01
     e1e:	e8 0f       	add	r30, r24
     e20:	f9 1f       	adc	r31, r25
     e22:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	9d 83       	std	Y+5, r25	; 0x05
     e2c:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     e2e:	4f bf       	out	0x3f, r20	; 63
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
     e34:	4f bf       	out	0x3f, r20	; 63
     e36:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	08 95       	ret

00000e40 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     e40:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     e42:	8f b7       	in	r24, 0x3f	; 63
     e44:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
     e46:	8f bf       	out	0x3f, r24	; 63
     e48:	22 81       	ldd	r18, Z+2	; 0x02
     e4a:	33 81       	ldd	r19, Z+3	; 0x03
     e4c:	84 81       	ldd	r24, Z+4	; 0x04
     e4e:	95 81       	ldd	r25, Z+5	; 0x05
     e50:	28 1b       	sub	r18, r24
     e52:	39 0b       	sbc	r19, r25
	return bytesleft;
}
     e54:	c9 01       	movw	r24, r18
     e56:	08 95       	ret

00000e58 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
     e58:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     e5a:	8f b7       	in	r24, 0x3f	; 63
     e5c:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
     e5e:	15 82       	std	Z+5, r1	; 0x05
     e60:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     e62:	8f bf       	out	0x3f, r24	; 63
}
     e64:	08 95       	ret

00000e66 <delay_us>:

	delay_loops = (time_us+3)/5*CYCLES_PER_US; // +3 for rounding up (dirty) 

	// one loop takes 5 cpu cycles 
	for (i=0; i < delay_loops; i++) {};
}
     e66:	08 95       	ret

00000e68 <timer0Init>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     e68:	83 b7       	in	r24, 0x33	; 51
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	82 60       	ori	r24, 0x02	; 2
     e6e:	83 bf       	out	0x33, r24	; 51

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
	outb(TCNT0, 0);							// reset TCNT0
     e70:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
     e72:	89 b7       	in	r24, 0x39	; 57
     e74:	81 60       	ori	r24, 0x01	; 1
     e76:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
     e78:	10 92 da 03 	sts	0x03DA, r1
     e7c:	10 92 db 03 	sts	0x03DB, r1
     e80:	10 92 dc 03 	sts	0x03DC, r1
     e84:	10 92 dd 03 	sts	0x03DD, r1
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
	outb(TCNT0, 0);							// reset TCNT0
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt

	timer0ClearOverflowCount();				// initialize time registers
}
     e88:	08 95       	ret

00000e8a <timer1Init>:
}

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     e8a:	8e b5       	in	r24, 0x2e	; 46
     e8c:	88 7f       	andi	r24, 0xF8	; 248
     e8e:	83 60       	ori	r24, 0x03	; 3
     e90:	8e bd       	out	0x2e, r24	; 46

void timer1Init(void)
{
	// initialize timer 1
	timer1SetPrescaler( TIMER1PRESCALE );	// set prescaler
	outb(TCNT1H, 0);						// reset TCNT1
     e92:	1d bc       	out	0x2d, r1	; 45
	outb(TCNT1L, 0);
     e94:	1c bc       	out	0x2c, r1	; 44
	sbi(TIMSK, TOIE1);						// enable TCNT1 overflow
     e96:	89 b7       	in	r24, 0x39	; 57
     e98:	84 60       	ori	r24, 0x04	; 4
     e9a:	89 bf       	out	0x39, r24	; 57
}
     e9c:	08 95       	ret

00000e9e <timer2Init>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     e9e:	85 b5       	in	r24, 0x25	; 37
     ea0:	88 7f       	andi	r24, 0xF8	; 248
     ea2:	84 60       	ori	r24, 0x04	; 4
     ea4:	85 bd       	out	0x25, r24	; 37
#ifdef TCNT2	// support timer2 only if it exists
void timer2Init(void)
{
	// initialize timer 2
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
	outb(TCNT2, 0);							// reset TCNT2
     ea6:	14 bc       	out	0x24, r1	; 36
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow
     ea8:	89 b7       	in	r24, 0x39	; 57
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	89 bf       	out	0x39, r24	; 57

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
     eae:	10 92 e2 03 	sts	0x03E2, r1
     eb2:	10 92 e3 03 	sts	0x03E3, r1
     eb6:	10 92 e4 03 	sts	0x03E4, r1
     eba:	10 92 e5 03 	sts	0x03E5, r1
	timer2SetPrescaler( TIMER2PRESCALE );	// set prescaler
	outb(TCNT2, 0);							// reset TCNT2
	sbi(TIMSK, TOIE2);						// enable TCNT2 overflow

	timer2ClearOverflowCount();				// initialize time registers
}
     ebe:	08 95       	ret

00000ec0 <timerInit>:
                  :"r"(time_ms), "r"((unsigned short) (delay_count))
	);
}
*/
void timerInit(void)
{
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     ec4:	fc 01       	movw	r30, r24
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	e6 50       	subi	r30, 0x06	; 6
     ecc:	fd 4f       	sbci	r31, 0xFD	; 253
     ece:	11 82       	std	Z+1, r1	; 0x01
     ed0:	10 82       	st	Z, r1
     ed2:	01 96       	adiw	r24, 0x01	; 1
*/
void timerInit(void)
{
	u08 intNum;
	// detach all user functions from interrupts
	for(intNum=0; intNum<TIMER_NUM_INTERRUPTS; intNum++)
     ed4:	88 30       	cpi	r24, 0x08	; 8
     ed6:	91 05       	cpc	r25, r1
     ed8:	a9 f7       	brne	.-22     	; 0xec4 <timerInit+0x4>
		timerDetach(intNum);

	// initialize all timers
	timer0Init();
     eda:	0e 94 34 07 	call	0xe68	; 0xe68 <timer0Init>
	timer1Init();
     ede:	0e 94 45 07 	call	0xe8a	; 0xe8a <timer1Init>
	#ifdef TCNT2	// support timer2 only if it exists
	timer2Init();
     ee2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <timer2Init>
	#endif
	// enable interrupts
	sei();
     ee6:	78 94       	sei
}
     ee8:	08 95       	ret

00000eea <timer0SetPrescaler>:
#endif

void timer0SetPrescaler(u08 prescale)
{
	// set prescaler on timer 0
	outb(TCCR0, (inb(TCCR0) & ~TIMER_PRESCALE_MASK) | prescale);
     eea:	93 b7       	in	r25, 0x33	; 51
     eec:	98 7f       	andi	r25, 0xF8	; 248
     eee:	98 2b       	or	r25, r24
     ef0:	93 bf       	out	0x33, r25	; 51
}
     ef2:	08 95       	ret

00000ef4 <timer1SetPrescaler>:

void timer1SetPrescaler(u08 prescale)
{
	// set prescaler on timer 1
	outb(TCCR1B, (inb(TCCR1B) & ~TIMER_PRESCALE_MASK) | prescale);
     ef4:	9e b5       	in	r25, 0x2e	; 46
     ef6:	98 7f       	andi	r25, 0xF8	; 248
     ef8:	98 2b       	or	r25, r24
     efa:	9e bd       	out	0x2e, r25	; 46
}
     efc:	08 95       	ret

00000efe <timer2SetPrescaler>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2SetPrescaler(u08 prescale)
{
	// set prescaler on timer 2
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
     efe:	95 b5       	in	r25, 0x25	; 37
     f00:	98 7f       	andi	r25, 0xF8	; 248
     f02:	98 2b       	or	r25, r24
     f04:	95 bd       	out	0x25, r25	; 37
}
     f06:	08 95       	ret

00000f08 <timer0GetPrescaler>:
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
     f08:	83 b7       	in	r24, 0x33	; 51
     f0a:	e8 2f       	mov	r30, r24
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	e7 70       	andi	r30, 0x07	; 7
     f10:	f0 70       	andi	r31, 0x00	; 0
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	ec 5a       	subi	r30, 0xAC	; 172
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	25 91       	lpm	r18, Z+
     f1c:	34 91       	lpm	r19, Z+
}
     f1e:	c9 01       	movw	r24, r18
     f20:	08 95       	ret

00000f22 <timer1GetPrescaler>:

u16 timer1GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR1B) & TIMER_PRESCALE_MASK)));
     f22:	8e b5       	in	r24, 0x2e	; 46
     f24:	e8 2f       	mov	r30, r24
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	e7 70       	andi	r30, 0x07	; 7
     f2a:	f0 70       	andi	r31, 0x00	; 0
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	ec 5a       	subi	r30, 0xAC	; 172
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	25 91       	lpm	r18, Z+
     f36:	34 91       	lpm	r19, Z+
}
     f38:	c9 01       	movw	r24, r18
     f3a:	08 95       	ret

00000f3c <timer2GetPrescaler>:
{
	//TODO: can we assume for all 3-timer AVR processors,
	// that timer2 is the RTC timer?

	// get the current prescaler setting
	return (pgm_read_word(TimerRTCPrescaleFactor+(inb(TCCR2) & TIMER_PRESCALE_MASK)));
     f3c:	85 b5       	in	r24, 0x25	; 37
     f3e:	e8 2f       	mov	r30, r24
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	e7 70       	andi	r30, 0x07	; 7
     f44:	f0 70       	andi	r31, 0x00	; 0
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	e0 5a       	subi	r30, 0xA0	; 160
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	25 91       	lpm	r18, Z+
     f50:	34 91       	lpm	r19, Z+
}
     f52:	c9 01       	movw	r24, r18
     f54:	08 95       	ret

00000f56 <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     f56:	88 30       	cpi	r24, 0x08	; 8
     f58:	40 f4       	brcc	.+16     	; 0xf6a <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
     f5a:	e8 2f       	mov	r30, r24
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	e6 50       	subi	r30, 0x06	; 6
     f64:	fd 4f       	sbci	r31, 0xFD	; 253
     f66:	71 83       	std	Z+1, r23	; 0x01
     f68:	60 83       	st	Z, r22
     f6a:	08 95       	ret

00000f6c <timerDetach>:
}

void timerDetach(u08 interruptNum)
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	40 f4       	brcc	.+16     	; 0xf80 <timerDetach+0x14>
	{
		// set the interrupt function to run nothing
		TimerIntFunc[interruptNum] = 0;
     f70:	e8 2f       	mov	r30, r24
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e6 50       	subi	r30, 0x06	; 6
     f7a:	fd 4f       	sbci	r31, 0xFD	; 253
     f7c:	11 82       	std	Z+1, r1	; 0x01
     f7e:	10 82       	st	Z, r1
     f80:	08 95       	ret

00000f82 <timerPause>:
	// calculate the number of milliseconds in x timer tics
	return (tics*1000*(prescaleDiv*256))/F_CPU;
}
*/
void timerPause(unsigned short pause_ms)
{
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
	u08 timerThres;
	u32 ticRateHz;
	u32 pause;

	// capture current pause timer value
	timerThres = inb(TCNT0);
     f90:	12 b7       	in	r17, 0x32	; 50
	// reset pause timer overflow count
	TimerPauseReg = 0;
     f92:	10 92 de 03 	sts	0x03DE, r1
     f96:	10 92 df 03 	sts	0x03DF, r1
     f9a:	10 92 e0 03 	sts	0x03E0, r1
     f9e:	10 92 e1 03 	sts	0x03E1, r1
#endif

u16 timer0GetPrescaler(void)
{
	// get the current prescaler setting
	return (pgm_read_word(TimerPrescaleFactor+(inb(TCCR0) & TIMER_PRESCALE_MASK)));
     fa2:	83 b7       	in	r24, 0x33	; 51
     fa4:	e8 2f       	mov	r30, r24
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	e7 70       	andi	r30, 0x07	; 7
     faa:	f0 70       	andi	r31, 0x00	; 0
     fac:	ee 0f       	add	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	ec 5a       	subi	r30, 0xAC	; 172
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	25 91       	lpm	r18, Z+
     fb6:	34 91       	lpm	r19, Z+
	timerThres = inb(TCNT0);
	// reset pause timer overflow count
	TimerPauseReg = 0;
	// calculate delay for [pause_ms] milliseconds
	// prescaler division = 1<<(pgm_read_byte(TimerPrescaleFactor+inb(TCCR0)))
	ticRateHz = F_CPU/timer0GetPrescaler();
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	72 e1       	ldi	r23, 0x12	; 18
     fc0:	8a e7       	ldi	r24, 0x7A	; 122
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
     fc8:	b9 01       	movw	r22, r18
     fca:	ca 01       	movw	r24, r20
	// precision management
	// prevent overflow and precision underflow
	//	-could add more conditions to improve accuracy
	if( ((ticRateHz < 429497) && (pause_ms <= 10000)) )
     fcc:	69 3b       	cpi	r22, 0xB9	; 185
     fce:	2d e8       	ldi	r18, 0x8D	; 141
     fd0:	72 07       	cpc	r23, r18
     fd2:	26 e0       	ldi	r18, 0x06	; 6
     fd4:	82 07       	cpc	r24, r18
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	92 07       	cpc	r25, r18
     fda:	a0 f4       	brcc	.+40     	; 0x1004 <timerPause+0x82>
     fdc:	37 e2       	ldi	r19, 0x27	; 39
     fde:	c1 31       	cpi	r28, 0x11	; 17
     fe0:	d3 07       	cpc	r29, r19
     fe2:	80 f4       	brcc	.+32     	; 0x1004 <timerPause+0x82>
		pause = (pause_ms*ticRateHz)/1000;
     fe4:	9e 01       	movw	r18, r28
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsi3>
     fee:	28 ee       	ldi	r18, 0xE8	; 232
     ff0:	33 e0       	ldi	r19, 0x03	; 3
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
     ffa:	c9 01       	movw	r24, r18
     ffc:	da 01       	movw	r26, r20
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	21 c0       	rjmp	.+66     	; 0x1046 <timerPause+0xc4>
	else
		pause = pause_ms*(ticRateHz/1000);
    1004:	28 ee       	ldi	r18, 0xE8	; 232
    1006:	33 e0       	ldi	r19, 0x03	; 3
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
    1010:	ca 01       	movw	r24, r20
    1012:	b9 01       	movw	r22, r18
    1014:	9e 01       	movw	r18, r28
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsi3>
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <timerPause+0xc4>

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
	{
		if( TimerPauseReg < (pause>>8));
    1020:	80 91 de 03 	lds	r24, 0x03DE
    1024:	90 91 df 03 	lds	r25, 0x03DF
    1028:	a0 91 e0 03 	lds	r26, 0x03E0
    102c:	b0 91 e1 03 	lds	r27, 0x03E1
		{
			// save power by idling the processor
			set_sleep_mode(SLEEP_MODE_IDLE);
    1030:	85 b7       	in	r24, 0x35	; 53
    1032:	8f 78       	andi	r24, 0x8F	; 143
    1034:	85 bf       	out	0x35, r24	; 53
			sleep_mode();
    1036:	85 b7       	in	r24, 0x35	; 53
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	85 bf       	out	0x35, r24	; 53
    103c:	88 95       	sleep
    103e:	85 b7       	in	r24, 0x35	; 53
    1040:	8f 77       	andi	r24, 0x7F	; 127
    1042:	85 bf       	out	0x35, r24	; 53
    1044:	08 c0       	rjmp	.+16     	; 0x1056 <timerPause+0xd4>
		pause = (pause_ms*ticRateHz)/1000;
	else
		pause = pause_ms*(ticRateHz/1000);

	// loop until time expires
	while( ((TimerPauseReg<<8) | inb(TCNT0)) < (pause+timerThres) )
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	21 0f       	add	r18, r17
    104c:	31 1d       	adc	r19, r1
    104e:	41 1d       	adc	r20, r1
    1050:	51 1d       	adc	r21, r1
    1052:	79 01       	movw	r14, r18
    1054:	8a 01       	movw	r16, r20
    1056:	20 91 de 03 	lds	r18, 0x03DE
    105a:	30 91 df 03 	lds	r19, 0x03DF
    105e:	40 91 e0 03 	lds	r20, 0x03E0
    1062:	50 91 e1 03 	lds	r21, 0x03E1
    1066:	82 b7       	in	r24, 0x32	; 50
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	54 2f       	mov	r21, r20
    1070:	43 2f       	mov	r20, r19
    1072:	32 2f       	mov	r19, r18
    1074:	22 27       	eor	r18, r18
    1076:	82 2b       	or	r24, r18
    1078:	93 2b       	or	r25, r19
    107a:	a4 2b       	or	r26, r20
    107c:	b5 2b       	or	r27, r21
    107e:	8e 15       	cp	r24, r14
    1080:	9f 05       	cpc	r25, r15
    1082:	a0 07       	cpc	r26, r16
    1084:	b1 07       	cpc	r27, r17
    1086:	60 f2       	brcs	.-104    	; 0x1020 <timerPause+0x9e>
	
	TimerPauseReg = 0;
	while(TimerPauseReg < pause);

	*/
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	08 95       	ret

00001096 <timer0ClearOverflowCount>:

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
    1096:	10 92 da 03 	sts	0x03DA, r1
    109a:	10 92 db 03 	sts	0x03DB, r1
    109e:	10 92 dc 03 	sts	0x03DC, r1
    10a2:	10 92 dd 03 	sts	0x03DD, r1
}
    10a6:	08 95       	ret

000010a8 <timer0GetOverflowCount>:

long timer0GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer0ClearOverflowCount() command was called)
	return Timer0Reg0;
    10a8:	20 91 da 03 	lds	r18, 0x03DA
    10ac:	30 91 db 03 	lds	r19, 0x03DB
    10b0:	40 91 dc 03 	lds	r20, 0x03DC
    10b4:	50 91 dd 03 	lds	r21, 0x03DD
}
    10b8:	b9 01       	movw	r22, r18
    10ba:	ca 01       	movw	r24, r20
    10bc:	08 95       	ret

000010be <timer2ClearOverflowCount>:

#ifdef TCNT2	// support timer2 only if it exists
void timer2ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer2Reg0 = 0;	// initialize time registers
    10be:	10 92 e2 03 	sts	0x03E2, r1
    10c2:	10 92 e3 03 	sts	0x03E3, r1
    10c6:	10 92 e4 03 	sts	0x03E4, r1
    10ca:	10 92 e5 03 	sts	0x03E5, r1
}
    10ce:	08 95       	ret

000010d0 <timer2GetOverflowCount>:

long timer2GetOverflowCount(void)
{
	// return the current timer overflow count
	// (this is since the last timer2ClearOverflowCount() command was called)
	return Timer2Reg0;
    10d0:	20 91 e2 03 	lds	r18, 0x03E2
    10d4:	30 91 e3 03 	lds	r19, 0x03E3
    10d8:	40 91 e4 03 	lds	r20, 0x03E4
    10dc:	50 91 e5 03 	lds	r21, 0x03E5
}
    10e0:	b9 01       	movw	r22, r18
    10e2:	ca 01       	movw	r24, r20
    10e4:	08 95       	ret

000010e6 <timer1PWMInit>:
{
	// configures timer1 for use with PWM output
	// on OC1A and OC1B pins

	// enable timer1 as 8,9,10bit PWM
	if(bitRes == 9)
    10e6:	89 30       	cpi	r24, 0x09	; 9
    10e8:	31 f4       	brne	.+12     	; 0x10f6 <timer1PWMInit+0x10>
	{	// 9bit mode
		sbi(TCCR1A,PWM11);
    10ea:	8f b5       	in	r24, 0x2f	; 47
    10ec:	82 60       	ori	r24, 0x02	; 2
    10ee:	8f bd       	out	0x2f, r24	; 47
		cbi(TCCR1A,PWM10);
    10f0:	8f b5       	in	r24, 0x2f	; 47
    10f2:	8e 7f       	andi	r24, 0xFE	; 254
    10f4:	0a c0       	rjmp	.+20     	; 0x110a <timer1PWMInit+0x24>
	}
	else if( bitRes == 10 )
    10f6:	8a 30       	cpi	r24, 0x0A	; 10
    10f8:	19 f4       	brne	.+6      	; 0x1100 <timer1PWMInit+0x1a>
	{	// 10bit mode
		sbi(TCCR1A,PWM11);
    10fa:	8f b5       	in	r24, 0x2f	; 47
    10fc:	82 60       	ori	r24, 0x02	; 2
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <timer1PWMInit+0x1e>
		sbi(TCCR1A,PWM10);
	}
	else
	{	// default 8bit mode
		cbi(TCCR1A,PWM11);
    1100:	8f b5       	in	r24, 0x2f	; 47
    1102:	8d 7f       	andi	r24, 0xFD	; 253
    1104:	8f bd       	out	0x2f, r24	; 47
		sbi(TCCR1A,PWM10);
    1106:	8f b5       	in	r24, 0x2f	; 47
    1108:	81 60       	ori	r24, 0x01	; 1
    110a:	8f bd       	out	0x2f, r24	; 47
	}

	// clear output compare value A
	outb(OCR1AH, 0);
    110c:	1b bc       	out	0x2b, r1	; 43
	outb(OCR1AL, 0);
    110e:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	outb(OCR1BH, 0);
    1110:	19 bc       	out	0x29, r1	; 41
	outb(OCR1BL, 0);
    1112:	18 bc       	out	0x28, r1	; 40
}
    1114:	08 95       	ret

00001116 <timer1PWMInitICR>:
// include support for arbitrary top-count PWM
// on new AVR processors that support it
void timer1PWMInitICR(u16 topcount)
{
	// set PWM mode with ICR top-count
	cbi(TCCR1A,WGM10);
    1116:	2f b5       	in	r18, 0x2f	; 47
    1118:	2e 7f       	andi	r18, 0xFE	; 254
    111a:	2f bd       	out	0x2f, r18	; 47
	sbi(TCCR1A,WGM11);
    111c:	2f b5       	in	r18, 0x2f	; 47
    111e:	22 60       	ori	r18, 0x02	; 2
    1120:	2f bd       	out	0x2f, r18	; 47
	sbi(TCCR1B,WGM12);
    1122:	2e b5       	in	r18, 0x2e	; 46
    1124:	28 60       	ori	r18, 0x08	; 8
    1126:	2e bd       	out	0x2e, r18	; 46
	sbi(TCCR1B,WGM13);
    1128:	2e b5       	in	r18, 0x2e	; 46
    112a:	20 61       	ori	r18, 0x10	; 16
    112c:	2e bd       	out	0x2e, r18	; 46
	
	// set top count value
	ICR1 = topcount;
    112e:	97 bd       	out	0x27, r25	; 39
    1130:	86 bd       	out	0x26, r24	; 38
	
	// clear output compare value A
	OCR1A = 0;
    1132:	1b bc       	out	0x2b, r1	; 43
    1134:	1a bc       	out	0x2a, r1	; 42
	// clear output compare value B
	OCR1B = 0;
    1136:	19 bc       	out	0x29, r1	; 41
    1138:	18 bc       	out	0x28, r1	; 40

}
    113a:	08 95       	ret

0000113c <timer1PWMOff>:
#endif

void timer1PWMOff(void)
{
	// turn off timer1 PWM mode
	cbi(TCCR1A,PWM11);
    113c:	8f b5       	in	r24, 0x2f	; 47
    113e:	8d 7f       	andi	r24, 0xFD	; 253
    1140:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,PWM10);
    1142:	8f b5       	in	r24, 0x2f	; 47
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	8f bd       	out	0x2f, r24	; 47

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
    1148:	8f b5       	in	r24, 0x2f	; 47
    114a:	8f 77       	andi	r24, 0x7F	; 127
    114c:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
    114e:	8f b5       	in	r24, 0x2f	; 47
    1150:	8f 7b       	andi	r24, 0xBF	; 191
    1152:	8f bd       	out	0x2f, r24	; 47

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
    1154:	8f b5       	in	r24, 0x2f	; 47
    1156:	8f 7d       	andi	r24, 0xDF	; 223
    1158:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
    115a:	8f b5       	in	r24, 0x2f	; 47
    115c:	8f 7e       	andi	r24, 0xEF	; 239
    115e:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,PWM11);
	cbi(TCCR1A,PWM10);
	// set PWM1A/B (OutputCompare action) to none
	timer1PWMAOff();
	timer1PWMBOff();
}
    1160:	08 95       	ret

00001162 <timer1PWMAOn>:

void timer1PWMAOn(void)
{
	// turn on channel A (OC1A) PWM output
	// set OC1A as non-inverted PWM
	sbi(TCCR1A,COM1A1);
    1162:	8f b5       	in	r24, 0x2f	; 47
    1164:	80 68       	ori	r24, 0x80	; 128
    1166:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
    1168:	8f b5       	in	r24, 0x2f	; 47
    116a:	8f 7b       	andi	r24, 0xBF	; 191
    116c:	8f bd       	out	0x2f, r24	; 47
}
    116e:	08 95       	ret

00001170 <timer1PWMBOn>:

void timer1PWMBOn(void)
{
	// turn on channel B (OC1B) PWM output
	// set OC1B as non-inverted PWM
	sbi(TCCR1A,COM1B1);
    1170:	8f b5       	in	r24, 0x2f	; 47
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
    1176:	8f b5       	in	r24, 0x2f	; 47
    1178:	8f 7e       	andi	r24, 0xEF	; 239
    117a:	8f bd       	out	0x2f, r24	; 47
}
    117c:	08 95       	ret

0000117e <timer1PWMAOff>:

void timer1PWMAOff(void)
{
	// turn off channel A (OC1A) PWM output
	// set OC1A (OutputCompare action) to none
	cbi(TCCR1A,COM1A1);
    117e:	8f b5       	in	r24, 0x2f	; 47
    1180:	8f 77       	andi	r24, 0x7F	; 127
    1182:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1A0);
    1184:	8f b5       	in	r24, 0x2f	; 47
    1186:	8f 7b       	andi	r24, 0xBF	; 191
    1188:	8f bd       	out	0x2f, r24	; 47
}
    118a:	08 95       	ret

0000118c <timer1PWMBOff>:

void timer1PWMBOff(void)
{
	// turn off channel B (OC1B) PWM output
	// set OC1B (OutputCompare action) to none
	cbi(TCCR1A,COM1B1);
    118c:	8f b5       	in	r24, 0x2f	; 47
    118e:	8f 7d       	andi	r24, 0xDF	; 223
    1190:	8f bd       	out	0x2f, r24	; 47
	cbi(TCCR1A,COM1B0);
    1192:	8f b5       	in	r24, 0x2f	; 47
    1194:	8f 7e       	andi	r24, 0xEF	; 239
    1196:	8f bd       	out	0x2f, r24	; 47
}
    1198:	08 95       	ret

0000119a <timer1PWMASet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1AH);		// set the high 8bits of OCR1A
	//outp( (pwmDuty&0x00FF), OCR1AL);	// set the low 8bits of OCR1A
	OCR1A = pwmDuty;
    119a:	9b bd       	out	0x2b, r25	; 43
    119c:	8a bd       	out	0x2a, r24	; 42
}
    119e:	08 95       	ret

000011a0 <timer1PWMBSet>:
	// NOTE:	pwmDuty should be in the range 0-255 for 8bit PWM
	//			pwmDuty should be in the range 0-511 for 9bit PWM
	//			pwmDuty should be in the range 0-1023 for 10bit PWM
	//outp( (pwmDuty>>8), OCR1BH);		// set the high 8bits of OCR1B
	//outp( (pwmDuty&0x00FF), OCR1BL);	// set the low 8bits of OCR1B
	OCR1B = pwmDuty;
    11a0:	99 bd       	out	0x29, r25	; 41
    11a2:	88 bd       	out	0x28, r24	; 40
}
    11a4:	08 95       	ret

000011a6 <__vector_11>:

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW0)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
    11c8:	80 91 da 03 	lds	r24, 0x03DA
    11cc:	90 91 db 03 	lds	r25, 0x03DB
    11d0:	a0 91 dc 03 	lds	r26, 0x03DC
    11d4:	b0 91 dd 03 	lds	r27, 0x03DD
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	a1 1d       	adc	r26, r1
    11dc:	b1 1d       	adc	r27, r1
    11de:	80 93 da 03 	sts	0x03DA, r24
    11e2:	90 93 db 03 	sts	0x03DB, r25
    11e6:	a0 93 dc 03 	sts	0x03DC, r26
    11ea:	b0 93 dd 03 	sts	0x03DD, r27

	// increment pause counter
	TimerPauseReg++;
    11ee:	80 91 de 03 	lds	r24, 0x03DE
    11f2:	90 91 df 03 	lds	r25, 0x03DF
    11f6:	a0 91 e0 03 	lds	r26, 0x03E0
    11fa:	b0 91 e1 03 	lds	r27, 0x03E1
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	a1 1d       	adc	r26, r1
    1202:	b1 1d       	adc	r27, r1
    1204:	80 93 de 03 	sts	0x03DE, r24
    1208:	90 93 df 03 	sts	0x03DF, r25
    120c:	a0 93 e0 03 	sts	0x03E0, r26
    1210:	b0 93 e1 03 	sts	0x03E1, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
    1214:	80 91 fa 02 	lds	r24, 0x02FA
    1218:	90 91 fb 02 	lds	r25, 0x02FB
    121c:	89 2b       	or	r24, r25
    121e:	29 f0       	breq	.+10     	; 0x122a <__vector_11+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
    1220:	e0 91 fa 02 	lds	r30, 0x02FA
    1224:	f0 91 fb 02 	lds	r31, 0x02FB
    1228:	09 95       	icall
}
    122a:	ff 91       	pop	r31
    122c:	ef 91       	pop	r30
    122e:	bf 91       	pop	r27
    1230:	af 91       	pop	r26
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	7f 91       	pop	r23
    1238:	6f 91       	pop	r22
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_9>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW1)
{
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
    126e:	80 91 fc 02 	lds	r24, 0x02FC
    1272:	90 91 fd 02 	lds	r25, 0x02FD
    1276:	89 2b       	or	r24, r25
    1278:	29 f0       	breq	.+10     	; 0x1284 <__vector_9+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
    127a:	e0 91 fc 02 	lds	r30, 0x02FC
    127e:	f0 91 fd 02 	lds	r31, 0x02FD
    1282:	09 95       	icall
}
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	bf 91       	pop	r27
    128a:	af 91       	pop	r26
    128c:	9f 91       	pop	r25
    128e:	8f 91       	pop	r24
    1290:	7f 91       	pop	r23
    1292:	6f 91       	pop	r22
    1294:	5f 91       	pop	r21
    1296:	4f 91       	pop	r20
    1298:	3f 91       	pop	r19
    129a:	2f 91       	pop	r18
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <__vector_5>:

#ifdef TCNT2	// support timer2 only if it exists
//! Interrupt handler for tcnt2 overflow interrupt
TIMER_INTERRUPT_HANDLER(SIG_OVERFLOW2)
{
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
	Timer2Reg0++;			// increment low-order counter
    12c8:	80 91 e2 03 	lds	r24, 0x03E2
    12cc:	90 91 e3 03 	lds	r25, 0x03E3
    12d0:	a0 91 e4 03 	lds	r26, 0x03E4
    12d4:	b0 91 e5 03 	lds	r27, 0x03E5
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	a1 1d       	adc	r26, r1
    12dc:	b1 1d       	adc	r27, r1
    12de:	80 93 e2 03 	sts	0x03E2, r24
    12e2:	90 93 e3 03 	sts	0x03E3, r25
    12e6:	a0 93 e4 03 	sts	0x03E4, r26
    12ea:	b0 93 e5 03 	sts	0x03E5, r27

	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OVERFLOW_INT])
    12ee:	80 91 04 03 	lds	r24, 0x0304
    12f2:	90 91 05 03 	lds	r25, 0x0305
    12f6:	89 2b       	or	r24, r25
    12f8:	29 f0       	breq	.+10     	; 0x1304 <__vector_5+0x5e>
		TimerIntFunc[TIMER2OVERFLOW_INT]();
    12fa:	e0 91 04 03 	lds	r30, 0x0304
    12fe:	f0 91 05 03 	lds	r31, 0x0305
    1302:	09 95       	icall
}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_10>:

#ifdef OCR0
// include support for Output Compare 0 for new AVR processors that support it
//! Interrupt handler for OutputCompare0 match (OC0) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE0)
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER0OUTCOMPARE_INT])
    1348:	80 91 08 03 	lds	r24, 0x0308
    134c:	90 91 09 03 	lds	r25, 0x0309
    1350:	89 2b       	or	r24, r25
    1352:	29 f0       	breq	.+10     	; 0x135e <__vector_10+0x38>
		TimerIntFunc[TIMER0OUTCOMPARE_INT]();
    1354:	e0 91 08 03 	lds	r30, 0x0308
    1358:	f0 91 09 03 	lds	r31, 0x0309
    135c:	09 95       	icall
}
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_7>:
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1A)
{
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	2f 93       	push	r18
    138c:	3f 93       	push	r19
    138e:	4f 93       	push	r20
    1390:	5f 93       	push	r21
    1392:	6f 93       	push	r22
    1394:	7f 93       	push	r23
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	af 93       	push	r26
    139c:	bf 93       	push	r27
    139e:	ef 93       	push	r30
    13a0:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
    13a2:	80 91 fe 02 	lds	r24, 0x02FE
    13a6:	90 91 ff 02 	lds	r25, 0x02FF
    13aa:	89 2b       	or	r24, r25
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_7+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
    13ae:	e0 91 fe 02 	lds	r30, 0x02FE
    13b2:	f0 91 ff 02 	lds	r31, 0x02FF
    13b6:	09 95       	icall
}
    13b8:	ff 91       	pop	r31
    13ba:	ef 91       	pop	r30
    13bc:	bf 91       	pop	r27
    13be:	af 91       	pop	r26
    13c0:	9f 91       	pop	r25
    13c2:	8f 91       	pop	r24
    13c4:	7f 91       	pop	r23
    13c6:	6f 91       	pop	r22
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <__vector_8>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE1B)
{
    13da:	1f 92       	push	r1
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	11 24       	eor	r1, r1
    13e4:	2f 93       	push	r18
    13e6:	3f 93       	push	r19
    13e8:	4f 93       	push	r20
    13ea:	5f 93       	push	r21
    13ec:	6f 93       	push	r22
    13ee:	7f 93       	push	r23
    13f0:	8f 93       	push	r24
    13f2:	9f 93       	push	r25
    13f4:	af 93       	push	r26
    13f6:	bf 93       	push	r27
    13f8:	ef 93       	push	r30
    13fa:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
    13fc:	80 91 00 03 	lds	r24, 0x0300
    1400:	90 91 01 03 	lds	r25, 0x0301
    1404:	89 2b       	or	r24, r25
    1406:	29 f0       	breq	.+10     	; 0x1412 <__vector_8+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
    1408:	e0 91 00 03 	lds	r30, 0x0300
    140c:	f0 91 01 03 	lds	r31, 0x0301
    1410:	09 95       	icall
}
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <__vector_6>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(SIG_INPUT_CAPTURE1)
{
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
    1456:	80 91 02 03 	lds	r24, 0x0302
    145a:	90 91 03 03 	lds	r25, 0x0303
    145e:	89 2b       	or	r24, r25
    1460:	29 f0       	breq	.+10     	; 0x146c <__vector_6+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
    1462:	e0 91 02 03 	lds	r30, 0x0302
    1466:	f0 91 03 03 	lds	r31, 0x0303
    146a:	09 95       	icall
}
    146c:	ff 91       	pop	r31
    146e:	ef 91       	pop	r30
    1470:	bf 91       	pop	r27
    1472:	af 91       	pop	r26
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	7f 91       	pop	r23
    147a:	6f 91       	pop	r22
    147c:	5f 91       	pop	r21
    147e:	4f 91       	pop	r20
    1480:	3f 91       	pop	r19
    1482:	2f 91       	pop	r18
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	0f 90       	pop	r0
    148a:	1f 90       	pop	r1
    148c:	18 95       	reti

0000148e <__vector_4>:

//! Interrupt handler for OutputCompare2 match (OC2) interrupt
TIMER_INTERRUPT_HANDLER(SIG_OUTPUT_COMPARE2)
{
    148e:	1f 92       	push	r1
    1490:	0f 92       	push	r0
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	0f 92       	push	r0
    1496:	11 24       	eor	r1, r1
    1498:	2f 93       	push	r18
    149a:	3f 93       	push	r19
    149c:	4f 93       	push	r20
    149e:	5f 93       	push	r21
    14a0:	6f 93       	push	r22
    14a2:	7f 93       	push	r23
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	af 93       	push	r26
    14aa:	bf 93       	push	r27
    14ac:	ef 93       	push	r30
    14ae:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER2OUTCOMPARE_INT])
    14b0:	80 91 06 03 	lds	r24, 0x0306
    14b4:	90 91 07 03 	lds	r25, 0x0307
    14b8:	89 2b       	or	r24, r25
    14ba:	29 f0       	breq	.+10     	; 0x14c6 <__vector_4+0x38>
		TimerIntFunc[TIMER2OUTCOMPARE_INT]();
    14bc:	e0 91 06 03 	lds	r30, 0x0306
    14c0:	f0 91 07 03 	lds	r31, 0x0307
    14c4:	09 95       	icall
}
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <uartswGetRxBuffer>:
//! returns the receive buffer structure 
cBuffer* uartswGetRxBuffer(void)
{
	// return rx buffer pointer
	return &uartswRxBuffer;
}
    14e8:	82 e1       	ldi	r24, 0x12	; 18
    14ea:	93 e0       	ldi	r25, 0x03	; 3
    14ec:	08 95       	ret

000014ee <uartswSendByte>:

void uartswSendByte(u08 data)
{
    14ee:	98 2f       	mov	r25, r24
	// wait until uart is ready
	while(UartswTxBusy);
    14f0:	80 91 0a 03 	lds	r24, 0x030A
    14f4:	88 23       	and	r24, r24
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <uartswSendByte+0x2>
	// set busy flag
	UartswTxBusy = TRUE;
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	80 93 0a 03 	sts	0x030A, r24
	// save data
	UartswTxData = data;
    14fe:	90 93 0b 03 	sts	0x030B, r25
	// set number of bits (+1 for stop bit)
	UartswTxBitNum = 9;
    1502:	89 e0       	ldi	r24, 0x09	; 9
    1504:	80 93 0c 03 	sts	0x030C, r24
	
	// set the start bit
	#ifdef UARTSW_INVERT
	sbi(UARTSW_TX_PORT, UARTSW_TX_PIN);
    1508:	95 9a       	sbi	0x12, 5	; 18
	#else
	cbi(UARTSW_TX_PORT, UARTSW_TX_PIN);
	#endif

	// schedule the next bit
	outw(OCR1A, inw(TCNT1) + UartswBaudRateDiv);
    150a:	2c b5       	in	r18, 0x2c	; 44
    150c:	3d b5       	in	r19, 0x2d	; 45
    150e:	80 91 0d 03 	lds	r24, 0x030D
    1512:	90 91 0e 03 	lds	r25, 0x030E
    1516:	82 0f       	add	r24, r18
    1518:	93 1f       	adc	r25, r19
    151a:	9b bd       	out	0x2b, r25	; 43
    151c:	8a bd       	out	0x2a, r24	; 42
	// enable OC1A interrupt
	sbi(TIMSK, OCIE1A);
    151e:	89 b7       	in	r24, 0x39	; 57
    1520:	80 61       	ori	r24, 0x10	; 16
    1522:	89 bf       	out	0x39, r24	; 57
}
    1524:	08 95       	ret

00001526 <uartswTxBitService>:
	}
}

void uartswTxBitService(void)
{
	if(UartswTxBitNum)
    1526:	80 91 0c 03 	lds	r24, 0x030C
    152a:	88 23       	and	r24, r24
    152c:	11 f1       	breq	.+68     	; 0x1572 <uartswTxBitService+0x4c>
	{
		// there are bits still waiting to be transmitted
		if(UartswTxBitNum > 1)
    152e:	80 91 0c 03 	lds	r24, 0x030C
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	68 f0       	brcs	.+26     	; 0x1550 <uartswTxBitService+0x2a>
		{
			// transmit data bits (inverted, LSB first)
			#ifdef UARTSW_INVERT
			if( !(UartswTxData & 0x01) )
    1536:	80 91 0b 03 	lds	r24, 0x030B
    153a:	80 fd       	sbrc	r24, 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <uartswTxBitService+0x1c>
			#else
			if( (UartswTxData & 0x01) )
			#endif
				sbi(UARTSW_TX_PORT, UARTSW_TX_PIN);
    153e:	95 9a       	sbi	0x12, 5	; 18
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <uartswTxBitService+0x1e>
			else
				cbi(UARTSW_TX_PORT, UARTSW_TX_PIN);
    1542:	95 98       	cbi	0x12, 5	; 18
			// shift bits down
			UartswTxData = UartswTxData>>1;
    1544:	80 91 0b 03 	lds	r24, 0x030B
    1548:	86 95       	lsr	r24
    154a:	80 93 0b 03 	sts	0x030B, r24
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <uartswTxBitService+0x2c>
		}
		else
		{
			// transmit stop bit
			#ifdef UARTSW_INVERT
			cbi(UARTSW_TX_PORT, UARTSW_TX_PIN);
    1550:	95 98       	cbi	0x12, 5	; 18
			#else
			sbi(UARTSW_TX_PORT, UARTSW_TX_PIN);
			#endif
		}
		// schedule the next bit
		outw(OCR1A, inw(OCR1A) + UartswBaudRateDiv);
    1552:	8a b5       	in	r24, 0x2a	; 42
    1554:	9b b5       	in	r25, 0x2b	; 43
    1556:	20 91 0d 03 	lds	r18, 0x030D
    155a:	30 91 0e 03 	lds	r19, 0x030E
    155e:	28 0f       	add	r18, r24
    1560:	39 1f       	adc	r19, r25
    1562:	3b bd       	out	0x2b, r19	; 43
    1564:	2a bd       	out	0x2a, r18	; 42
		// count down
		UartswTxBitNum--;
    1566:	80 91 0c 03 	lds	r24, 0x030C
    156a:	81 50       	subi	r24, 0x01	; 1
    156c:	80 93 0c 03 	sts	0x030C, r24
    1570:	08 95       	ret
	}
	else
	{
		// transmission is done
		// clear busy flag
		UartswTxBusy = FALSE;
    1572:	10 92 0a 03 	sts	0x030A, r1
    1576:	08 95       	ret

00001578 <uartswRxBitService>:
void uartswRxBitService(void)
{
	// this function runs on either:
	// - a rising edge interrupt
	// - OC1B
	if(!UartswRxBusy)
    1578:	80 91 0f 03 	lds	r24, 0x030F
    157c:	88 23       	and	r24, r24
    157e:	19 f5       	brne	.+70     	; 0x15c6 <uartswRxBitService+0x4e>
	{
		// this is a start bit
		// disable ICP interrupt
		cbi(TIMSK, TICIE1);
    1580:	89 b7       	in	r24, 0x39	; 57
    1582:	8f 7d       	andi	r24, 0xDF	; 223
    1584:	89 bf       	out	0x39, r24	; 57
		// schedule data bit sampling 1.5 bit periods from now
		outw(OCR1B, inw(TCNT1) + UartswBaudRateDiv + UartswBaudRateDiv/2);
    1586:	4c b5       	in	r20, 0x2c	; 44
    1588:	5d b5       	in	r21, 0x2d	; 45
    158a:	20 91 0d 03 	lds	r18, 0x030D
    158e:	30 91 0e 03 	lds	r19, 0x030E
    1592:	80 91 0d 03 	lds	r24, 0x030D
    1596:	90 91 0e 03 	lds	r25, 0x030E
    159a:	24 0f       	add	r18, r20
    159c:	35 1f       	adc	r19, r21
    159e:	96 95       	lsr	r25
    15a0:	87 95       	ror	r24
    15a2:	28 0f       	add	r18, r24
    15a4:	39 1f       	adc	r19, r25
    15a6:	39 bd       	out	0x29, r19	; 41
    15a8:	28 bd       	out	0x28, r18	; 40
		// clear OC1B interrupt flag
		sbi(TIFR, OCF1B);
    15aa:	88 b7       	in	r24, 0x38	; 56
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	88 bf       	out	0x38, r24	; 56
		// enable OC1B interrupt
		sbi(TIMSK, OCIE1B);
    15b0:	89 b7       	in	r24, 0x39	; 57
    15b2:	88 60       	ori	r24, 0x08	; 8
    15b4:	89 bf       	out	0x39, r24	; 57
		// set start bit flag
		UartswRxBusy = TRUE;
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	80 93 0f 03 	sts	0x030F, r24
		// reset bit counter
		UartswRxBitNum = 0;
    15bc:	10 92 11 03 	sts	0x0311, r1
		// reset data
		UartswRxData = 0;
    15c0:	10 92 10 03 	sts	0x0310, r1
    15c4:	08 95       	ret
	{
		// start bit has already been received
		// we're in the data bits
		
		// shift data byte to make room for new bit
		UartswRxData = UartswRxData>>1;
    15c6:	80 91 10 03 	lds	r24, 0x0310
    15ca:	86 95       	lsr	r24
    15cc:	80 93 10 03 	sts	0x0310, r24

		// sample the data line
		#ifdef UARTSW_INVERT
		if( !(inb(UARTSW_RX_PORTIN) & (1<<UARTSW_RX_PIN)) )
    15d0:	86 99       	sbic	0x10, 6	; 16
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <uartswRxBitService+0x66>
		if( (inb(UARTSW_RX_PORTIN) & (1<<UARTSW_RX_PIN)) )
		#endif
		{
			// serial line is marking
			// record '1' bit
			UartswRxData |= 0x80;
    15d4:	80 91 10 03 	lds	r24, 0x0310
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	80 93 10 03 	sts	0x0310, r24
		}

		// increment bit counter
		UartswRxBitNum++;
    15de:	80 91 11 03 	lds	r24, 0x0311
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 11 03 	sts	0x0311, r24
		// schedule next bit sample
		outw(OCR1B, inw(OCR1B) + UartswBaudRateDiv);
    15e8:	28 b5       	in	r18, 0x28	; 40
    15ea:	39 b5       	in	r19, 0x29	; 41
    15ec:	80 91 0d 03 	lds	r24, 0x030D
    15f0:	90 91 0e 03 	lds	r25, 0x030E
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	99 bd       	out	0x29, r25	; 41
    15fa:	88 bd       	out	0x28, r24	; 40

		// check if we have a full byte
		if(UartswRxBitNum >= 8)
    15fc:	80 91 11 03 	lds	r24, 0x0311
    1600:	88 30       	cpi	r24, 0x08	; 8
    1602:	88 f0       	brcs	.+34     	; 0x1626 <uartswRxBitService+0xae>
		{
			// save data in receive buffer
			bufferAddToEnd(&uartswRxBuffer, UartswRxData);
    1604:	60 91 10 03 	lds	r22, 0x0310
    1608:	82 e1       	ldi	r24, 0x12	; 18
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <bufferAddToEnd>
			// disable OC1B interrupt
			cbi(TIMSK, OCIE1B);
    1610:	89 b7       	in	r24, 0x39	; 57
    1612:	87 7f       	andi	r24, 0xF7	; 247
    1614:	89 bf       	out	0x39, r24	; 57
			// clear ICP interrupt flag
			sbi(TIFR, ICF1);
    1616:	88 b7       	in	r24, 0x38	; 56
    1618:	80 62       	ori	r24, 0x20	; 32
    161a:	88 bf       	out	0x38, r24	; 56
			// enable ICP interrupt
			sbi(TIMSK, TICIE1);
    161c:	89 b7       	in	r24, 0x39	; 57
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	89 bf       	out	0x39, r24	; 57
			// clear start bit flag
			UartswRxBusy = FALSE;
    1622:	10 92 0f 03 	sts	0x030F, r1
    1626:	08 95       	ret

00001628 <uartswReceiveByte>:
	sbi(TIMSK, OCIE1A);
}

//! gets a byte (if available) from the uart receive buffer
u08 uartswReceiveByte(u08* rxData)
{
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	ec 01       	movw	r28, r24
	// make sure we have a receive buffer
	if(uartswRxBuffer.size)
    162e:	80 91 14 03 	lds	r24, 0x0314
    1632:	90 91 15 03 	lds	r25, 0x0315
    1636:	89 2b       	or	r24, r25
    1638:	69 f0       	breq	.+26     	; 0x1654 <uartswReceiveByte+0x2c>
	{
		// make sure we have data
		if(uartswRxBuffer.datalength)
    163a:	80 91 16 03 	lds	r24, 0x0316
    163e:	90 91 17 03 	lds	r25, 0x0317
    1642:	89 2b       	or	r24, r25
    1644:	39 f0       	breq	.+14     	; 0x1654 <uartswReceiveByte+0x2c>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartswRxBuffer);
    1646:	82 e1       	ldi	r24, 0x12	; 18
    1648:	93 e0       	ldi	r25, 0x03	; 3
    164a:	0e 94 90 06 	call	0xd20	; 0xd20 <bufferGetFromFront>
    164e:	88 83       	st	Y, r24
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <uartswReceiveByte+0x2e>
			return TRUE;
    1654:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// no buffer
		return FALSE;
	}
}
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	08 95       	ret

0000165c <uartswSetBaudRate>:
	timerDetach(TIMER1OUTCOMPAREB_INT);
	timerDetach(TIMER1INPUTCAPTURE_INT);
}

void uartswSetBaudRate(u32 baudrate)
{
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	7b 01       	movw	r14, r22
    1666:	8c 01       	movw	r16, r24
	// set timer prescaler
	timer1SetPrescaler(TIMER_CLK_DIV1);
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	0e 94 7a 07 	call	0xef4	; 0xef4 <timer1SetPrescaler>
	// calculate division factor for requested baud rate, and set it
	UartswBaudRateDiv = (u16)((F_CPU+(baudrate/2L))/(baudrate*1L));
    166e:	c8 01       	movw	r24, r16
    1670:	b7 01       	movw	r22, r14
    1672:	96 95       	lsr	r25
    1674:	87 95       	ror	r24
    1676:	77 95       	ror	r23
    1678:	67 95       	ror	r22
    167a:	60 50       	subi	r22, 0x00	; 0
    167c:	7e 4e       	sbci	r23, 0xEE	; 238
    167e:	85 48       	sbci	r24, 0x85	; 133
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	a8 01       	movw	r20, r16
    1684:	97 01       	movw	r18, r14
    1686:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
    168a:	30 93 0e 03 	sts	0x030E, r19
    168e:	20 93 0d 03 	sts	0x030D, r18
}
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	08 95       	ret

0000169c <uartswOff>:

//! turns off software UART
void uartswOff(void)
{
	// disable interrupts
	cbi(TIMSK, OCIE1A);
    169c:	89 b7       	in	r24, 0x39	; 57
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	89 bf       	out	0x39, r24	; 57
	cbi(TIMSK, OCIE1B);
    16a2:	89 b7       	in	r24, 0x39	; 57
    16a4:	87 7f       	andi	r24, 0xF7	; 247
    16a6:	89 bf       	out	0x39, r24	; 57
	cbi(TIMSK, TICIE1);
    16a8:	89 b7       	in	r24, 0x39	; 57
    16aa:	8f 7d       	andi	r24, 0xDF	; 223
    16ac:	89 bf       	out	0x39, r24	; 57
	// detach the service routines
	timerDetach(TIMER1OUTCOMPAREA_INT);
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <timerDetach>
	timerDetach(TIMER1OUTCOMPAREB_INT);
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <timerDetach>
	timerDetach(TIMER1INPUTCAPTURE_INT);
    16ba:	84 e0       	ldi	r24, 0x04	; 4
    16bc:	0e 94 b6 07 	call	0xf6c	; 0xf6c <timerDetach>
}
    16c0:	08 95       	ret

000016c2 <uartswInitBuffers>:

//! create and initialize the uart buffers
void uartswInitBuffers(void)
{
	// initialize the UART receive buffer
	bufferInit(&uartswRxBuffer, uartswRxData, UARTSW_RX_BUFFER_SIZE);
    16c2:	82 e1       	ldi	r24, 0x12	; 18
    16c4:	93 e0       	ldi	r25, 0x03	; 3
    16c6:	6a e1       	ldi	r22, 0x1A	; 26
    16c8:	73 e0       	ldi	r23, 0x03	; 3
    16ca:	40 e2       	ldi	r20, 0x20	; 32
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	0e 94 83 06 	call	0xd06	; 0xd06 <bufferInit>
}
    16d2:	08 95       	ret

000016d4 <uartswInit>:

// functions

//! enable and initialize the software uart
void uartswInit(void)
{
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17

//! create and initialize the uart buffers
void uartswInitBuffers(void)
{
	// initialize the UART receive buffer
	bufferInit(&uartswRxBuffer, uartswRxData, UARTSW_RX_BUFFER_SIZE);
    16d8:	82 e1       	ldi	r24, 0x12	; 18
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	6a e1       	ldi	r22, 0x1A	; 26
    16de:	73 e0       	ldi	r23, 0x03	; 3
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	0e 94 83 06 	call	0xd06	; 0xd06 <bufferInit>
void uartswInit(void)
{
    // initialize the buffers
	uartswInitBuffers();
	// initialize the ports
	sbi(UARTSW_TX_DDR, UARTSW_TX_PIN);
    16e8:	8d 9a       	sbi	0x11, 5	; 17
	cbi(UARTSW_RX_DDR, UARTSW_RX_PIN);
    16ea:	8e 98       	cbi	0x11, 6	; 17
	cbi(UARTSW_RX_PORT, UARTSW_RX_PIN);
    16ec:	96 98       	cbi	0x12, 6	; 18
	// initialize baud rate
	uartswSetBaudRate(9600);
    16ee:	60 e8       	ldi	r22, 0x80	; 128
    16f0:	75 e2       	ldi	r23, 0x25	; 37
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 2e 0b 	call	0x165c	; 0x165c <uartswSetBaudRate>

	// setup the transmitter
	UartswTxBusy = FALSE;
    16fa:	10 92 0a 03 	sts	0x030A, r1
	// disable OC1A interrupt
	cbi(TIMSK, OCIE1A);
    16fe:	89 b7       	in	r24, 0x39	; 57
    1700:	8f 7e       	andi	r24, 0xEF	; 239
    1702:	89 bf       	out	0x39, r24	; 57
	// attach TxBit service routine to OC1A
	timerAttach(TIMER1OUTCOMPAREA_INT, uartswTxBitService);
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	63 e9       	ldi	r22, 0x93	; 147
    1708:	7a e0       	ldi	r23, 0x0A	; 10
    170a:	0e 94 ab 07 	call	0xf56	; 0xf56 <timerAttach>

	// setup the receiver
	UartswRxBusy = FALSE;
    170e:	10 92 0f 03 	sts	0x030F, r1
	// disable OC1B interrupt
	cbi(TIMSK, OCIE1B);
    1712:	89 b7       	in	r24, 0x39	; 57
    1714:	87 7f       	andi	r24, 0xF7	; 247
    1716:	89 bf       	out	0x39, r24	; 57
	// attach RxBit service routine to OC1B
	timerAttach(TIMER1OUTCOMPAREB_INT, uartswRxBitService);
    1718:	0c eb       	ldi	r16, 0xBC	; 188
    171a:	1a e0       	ldi	r17, 0x0A	; 10
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	b8 01       	movw	r22, r16
    1720:	0e 94 ab 07 	call	0xf56	; 0xf56 <timerAttach>
	// attach RxBit service routine to ICP
	timerAttach(TIMER1INPUTCAPTURE_INT, uartswRxBitService);
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	b8 01       	movw	r22, r16
    1728:	0e 94 ab 07 	call	0xf56	; 0xf56 <timerAttach>
	#ifdef UARTSW_INVERT 
	// trigger on rising edge 
	sbi(TCCR1B, ICES1); 
    172c:	8e b5       	in	r24, 0x2e	; 46
    172e:	80 64       	ori	r24, 0x40	; 64
    1730:	8e bd       	out	0x2e, r24	; 46
	#else 
	// trigger on falling edge 
	cbi(TCCR1B, ICES1); 
	#endif	
	// enable ICP interrupt
	sbi(TIMSK, TICIE1);
    1732:	89 b7       	in	r24, 0x39	; 57
    1734:	80 62       	ori	r24, 0x20	; 32
    1736:	89 bf       	out	0x39, r24	; 57

	// turn on interrupts
	sei();
    1738:	78 94       	sei
}
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    1740:	90 93 3b 03 	sts	0x033B, r25
    1744:	80 93 3a 03 	sts	0x033A, r24
}
    1748:	08 95       	ret

0000174a <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    174a:	1f 93       	push	r17
    174c:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    174e:	8a 30       	cpi	r24, 0x0A	; 10
    1750:	31 f4       	brne	.+12     	; 0x175e <rprintfChar+0x14>
		rputchar('\r');
    1752:	e0 91 3a 03 	lds	r30, 0x033A
    1756:	f0 91 3b 03 	lds	r31, 0x033B
    175a:	8d e0       	ldi	r24, 0x0D	; 13
    175c:	09 95       	icall
	// send character
	rputchar(c);
    175e:	e0 91 3a 03 	lds	r30, 0x033A
    1762:	f0 91 3b 03 	lds	r31, 0x033B
    1766:	81 2f       	mov	r24, r17
    1768:	09 95       	icall
}
    176a:	1f 91       	pop	r17
    176c:	08 95       	ret

0000176e <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	21 f4       	brne	.+8      	; 0x1780 <rprintfStr+0x12>
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    177a:	21 96       	adiw	r28, 0x01	; 1
    177c:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    1780:	88 81       	ld	r24, Y
    1782:	88 23       	and	r24, r24
    1784:	d1 f7       	brne	.-12     	; 0x177a <rprintfStr+0xc>
		rprintfChar(*str++);
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	8c 01       	movw	r16, r24
    179a:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	e9 f0       	breq	.+58     	; 0x17da <rprintfStrLen+0x4e>
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    17a4:	26 17       	cp	r18, r22
    17a6:	37 07       	cpc	r19, r23
    17a8:	38 f4       	brcc	.+14     	; 0x17b8 <rprintfStrLen+0x2c>
    17aa:	f8 01       	movw	r30, r16
    17ac:	81 91       	ld	r24, Z+
    17ae:	8f 01       	movw	r16, r30
    17b0:	2f 5f       	subi	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	88 23       	and	r24, r24
    17b6:	b1 f7       	brne	.-20     	; 0x17a4 <rprintfStrLen+0x18>
    17b8:	c0 e0       	ldi	r28, 0x00	; 0
    17ba:	d0 e0       	ldi	r29, 0x00	; 0
    17bc:	0b c0       	rjmp	.+22     	; 0x17d4 <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    17be:	f8 01       	movw	r30, r16
    17c0:	80 81       	ld	r24, Z
    17c2:	88 23       	and	r24, r24
    17c4:	19 f0       	breq	.+6      	; 0x17cc <rprintfStrLen+0x40>
			rprintfChar(*str++);
    17c6:	0f 5f       	subi	r16, 0xFF	; 255
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    17cc:	80 e2       	ldi	r24, 0x20	; 32
    17ce:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    17d2:	21 96       	adiw	r28, 0x01	; 1
    17d4:	ce 15       	cp	r28, r14
    17d6:	df 05       	cpc	r29, r15
    17d8:	90 f3       	brcs	.-28     	; 0x17be <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	08 95       	ret

000017e8 <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	19 f4       	brne	.+6      	; 0x17f8 <rprintfProgStr+0x10>
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    17f4:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
    17f8:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    17fa:	21 96       	adiw	r28, 0x01	; 1
    17fc:	84 91       	lpm	r24, Z+
    17fe:	88 23       	and	r24, r24
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <rprintfProgStr+0xc>
		rprintfChar(c);
}
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    1808:	8a e0       	ldi	r24, 0x0A	; 10
    180a:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
}
    180e:	08 95       	ret

00001810 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    1810:	e8 2f       	mov	r30, r24
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	ef 70       	andi	r30, 0x0F	; 15
    1816:	f0 70       	andi	r31, 0x00	; 0
    1818:	e0 59       	subi	r30, 0x90	; 144
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	e4 91       	lpm	r30, Z+
    181e:	8e 2f       	mov	r24, r30
    1820:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
}
    1824:	08 95       	ret

00001826 <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    1826:	1f 93       	push	r17
    1828:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    182a:	82 95       	swap	r24
    182c:	8f 70       	andi	r24, 0x0F	; 15
    182e:	0e 94 08 0c 	call	0x1810	; 0x1810 <rprintfu04>
	rprintfu04(data);
    1832:	81 2f       	mov	r24, r17
    1834:	0e 94 08 0c 	call	0x1810	; 0x1810 <rprintfu04>
}
    1838:	1f 91       	pop	r17
    183a:	08 95       	ret

0000183c <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    183c:	1f 93       	push	r17
    183e:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    1840:	89 2f       	mov	r24, r25
    1842:	0e 94 13 0c 	call	0x1826	; 0x1826 <rprintfu08>
	rprintfu08(data);
    1846:	81 2f       	mov	r24, r17
    1848:	0e 94 13 0c 	call	0x1826	; 0x1826 <rprintfu08>
}
    184c:	1f 91       	pop	r17
    184e:	08 95       	ret

00001850 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	7b 01       	movw	r14, r22
    185a:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    185c:	c8 01       	movw	r24, r16
    185e:	aa 27       	eor	r26, r26
    1860:	bb 27       	eor	r27, r27
    1862:	0e 94 1e 0c 	call	0x183c	; 0x183c <rprintfu16>
	rprintfu16(data);
    1866:	c7 01       	movw	r24, r14
    1868:	0e 94 1e 0c 	call	0x183c	; 0x183c <rprintfu16>
}
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	08 95       	ret

00001876 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    1876:	2f 92       	push	r2
    1878:	3f 92       	push	r3
    187a:	4f 92       	push	r4
    187c:	5f 92       	push	r5
    187e:	6f 92       	push	r6
    1880:	7f 92       	push	r7
    1882:	8f 92       	push	r8
    1884:	9f 92       	push	r9
    1886:	af 92       	push	r10
    1888:	bf 92       	push	r11
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	a3 97       	sbiw	r28, 0x23	; 35
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	6a a3       	std	Y+34, r22	; 0x22
    18ac:	24 2e       	mov	r2, r20
    18ae:	2b a3       	std	Y+35, r18	; 0x23
    18b0:	37 01       	movw	r6, r14
    18b2:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    18b4:	44 23       	and	r20, r20
    18b6:	51 f0       	breq	.+20     	; 0x18cc <rprintfNum+0x56>
    18b8:	17 ff       	sbrs	r17, 7
    18ba:	08 c0       	rjmp	.+16     	; 0x18cc <rprintfNum+0x56>
	{
		x = -n;
    18bc:	ee 24       	eor	r14, r14
    18be:	ff 24       	eor	r15, r15
    18c0:	87 01       	movw	r16, r14
    18c2:	e6 18       	sub	r14, r6
    18c4:	f7 08       	sbc	r15, r7
    18c6:	08 09       	sbc	r16, r8
    18c8:	19 09       	sbc	r17, r9
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    18cc:	84 01       	movw	r16, r8
    18ce:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    18d0:	2a a1       	ldd	r18, Y+34	; 0x22
    18d2:	21 50       	subi	r18, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	21 10       	cpse	r2, r1
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	29 1b       	sub	r18, r25
    18dc:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    18de:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    18e0:	a8 2e       	mov	r10, r24
    18e2:	bb 24       	eor	r11, r11
    18e4:	cc 24       	eor	r12, r12
    18e6:	dd 24       	eor	r13, r13
    18e8:	c8 01       	movw	r24, r16
    18ea:	b7 01       	movw	r22, r14
    18ec:	a6 01       	movw	r20, r12
    18ee:	95 01       	movw	r18, r10
    18f0:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
    18f4:	fb 01       	movw	r30, r22
    18f6:	ef 70       	andi	r30, 0x0F	; 15
    18f8:	f0 70       	andi	r31, 0x00	; 0
    18fa:	e0 59       	subi	r30, 0x90	; 144
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	64 91       	lpm	r22, Z+
    1900:	6f 8f       	std	Y+31, r22	; 0x1f
    1902:	c8 01       	movw	r24, r16
    1904:	b7 01       	movw	r22, r14
    1906:	a6 01       	movw	r20, r12
    1908:	95 01       	movw	r18, r10
    190a:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
    190e:	c9 01       	movw	r24, r18
    1910:	da 01       	movw	r26, r20
    1912:	7c 01       	movw	r14, r24
    1914:	8d 01       	movw	r16, r26
    1916:	9e e1       	ldi	r25, 0x1E	; 30
    1918:	49 2e       	mov	r4, r25
    191a:	51 2c       	mov	r5, r1
    191c:	4c 0e       	add	r4, r28
    191e:	5d 1e       	adc	r5, r29
    1920:	39 a0       	ldd	r3, Y+33	; 0x21
    1922:	25 c0       	rjmp	.+74     	; 0x196e <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    1924:	e1 14       	cp	r14, r1
    1926:	f1 04       	cpc	r15, r1
    1928:	01 05       	cpc	r16, r1
    192a:	11 05       	cpc	r17, r1
    192c:	c9 f0       	breq	.+50     	; 0x1960 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    192e:	c8 01       	movw	r24, r16
    1930:	b7 01       	movw	r22, r14
    1932:	a6 01       	movw	r20, r12
    1934:	95 01       	movw	r18, r10
    1936:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
    193a:	fb 01       	movw	r30, r22
    193c:	ef 70       	andi	r30, 0x0F	; 15
    193e:	f0 70       	andi	r31, 0x00	; 0
    1940:	e0 59       	subi	r30, 0x90	; 144
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	64 91       	lpm	r22, Z+
    1946:	f2 01       	movw	r30, r4
    1948:	60 83       	st	Z, r22
    194a:	c8 01       	movw	r24, r16
    194c:	b7 01       	movw	r22, r14
    194e:	a6 01       	movw	r20, r12
    1950:	95 01       	movw	r18, r10
    1952:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
    1956:	c9 01       	movw	r24, r18
    1958:	da 01       	movw	r26, r20
    195a:	7c 01       	movw	r14, r24
    195c:	8d 01       	movw	r16, r26
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    1960:	2b a1       	ldd	r18, Y+35	; 0x23
    1962:	f2 01       	movw	r30, r4
    1964:	20 83       	st	Z, r18
    1966:	3a 94       	dec	r3
    1968:	08 94       	sec
    196a:	41 08       	sbc	r4, r1
    196c:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    196e:	33 20       	and	r3, r3
    1970:	c9 f6       	brne	.-78     	; 0x1924 <rprintfNum+0xae>
    1972:	ce 01       	movw	r24, r28
    1974:	4f 96       	adiw	r24, 0x1f	; 31
    1976:	8c 01       	movw	r16, r24
    1978:	e9 a1       	ldd	r30, Y+33	; 0x21
    197a:	0e 1b       	sub	r16, r30
    197c:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    197e:	22 20       	and	r2, r2
    1980:	f1 f0       	breq	.+60     	; 0x19be <rprintfNum+0x148>
	{
		if(n < 0)
    1982:	97 fe       	sbrs	r9, 7
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <rprintfNum+0x11a>
		{
   			*--p = '-';
    1986:	8d e2       	ldi	r24, 0x2D	; 45
    1988:	f8 01       	movw	r30, r16
    198a:	82 93       	st	-Z, r24
    198c:	8f 01       	movw	r16, r30
    198e:	17 c0       	rjmp	.+46     	; 0x19be <rprintfNum+0x148>
    1990:	c8 01       	movw	r24, r16
    1992:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    1994:	61 14       	cp	r6, r1
    1996:	71 04       	cpc	r7, r1
    1998:	81 04       	cpc	r8, r1
    199a:	91 04       	cpc	r9, r1
    199c:	19 f0       	breq	.+6      	; 0x19a4 <rprintfNum+0x12e>
		{
	   		*--p = '+';
    199e:	8c 01       	movw	r16, r24
    19a0:	8b e2       	ldi	r24, 0x2B	; 43
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    19a4:	8c 01       	movw	r16, r24
    19a6:	80 e2       	ldi	r24, 0x20	; 32
    19a8:	f8 01       	movw	r30, r16
    19aa:	80 83       	st	Z, r24
    19ac:	08 c0       	rjmp	.+16     	; 0x19be <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    19ae:	f8 01       	movw	r30, r16
    19b0:	81 91       	ld	r24, Z+
    19b2:	8f 01       	movw	r16, r30
    19b4:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
    19b8:	fa a1       	ldd	r31, Y+34	; 0x22
    19ba:	f1 50       	subi	r31, 0x01	; 1
    19bc:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    19be:	2a a1       	ldd	r18, Y+34	; 0x22
    19c0:	22 23       	and	r18, r18
    19c2:	a9 f7       	brne	.-22     	; 0x19ae <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    19c4:	a3 96       	adiw	r28, 0x23	; 35
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	bf 90       	pop	r11
    19e2:	af 90       	pop	r10
    19e4:	9f 90       	pop	r9
    19e6:	8f 90       	pop	r8
    19e8:	7f 90       	pop	r7
    19ea:	6f 90       	pop	r6
    19ec:	5f 90       	pop	r5
    19ee:	4f 90       	pop	r4
    19f0:	3f 90       	pop	r3
    19f2:	2f 90       	pop	r2
    19f4:	08 95       	ret

000019f6 <rprintfFloat>:

#ifdef RPRINTF_FLOAT
// *** rprintfFloat ***
// floating-point print
void rprintfFloat(char numDigits, double x)
{
    19f6:	4f 92       	push	r4
    19f8:	5f 92       	push	r5
    19fa:	6f 92       	push	r6
    19fc:	7f 92       	push	r7
    19fe:	8f 92       	push	r8
    1a00:	9f 92       	push	r9
    1a02:	af 92       	push	r10
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	48 2e       	mov	r4, r24
    1a18:	5a 01       	movw	r10, r20
    1a1a:	6b 01       	movw	r12, r22
	double place = 1.0;
	
	// save sign
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	ba 01       	movw	r22, r20
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	1c f4       	brge	.+6      	; 0x1a36 <rprintfFloat+0x40>
    1a30:	35 01       	movw	r6, r10
    1a32:	46 01       	movw	r8, r12
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <rprintfFloat+0x4c>
    1a36:	35 01       	movw	r6, r10
    1a38:	46 01       	movw	r8, r12
    1a3a:	97 fa       	bst	r9, 7
    1a3c:	90 94       	com	r9
    1a3e:	97 f8       	bld	r9, 7
    1a40:	90 94       	com	r9
    1a42:	55 24       	eor	r5, r5
    1a44:	0f 2e       	mov	r0, r31
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	ef 2e       	mov	r14, r31
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	ff 2e       	mov	r15, r31
    1a4e:	f0 e8       	ldi	r31, 0x80	; 128
    1a50:	0f 2f       	mov	r16, r31
    1a52:	ff e3       	ldi	r31, 0x3F	; 63
    1a54:	1f 2f       	mov	r17, r31
    1a56:	f0 2d       	mov	r31, r0
	
	// find starting digit place
	for(i=0; i<15; i++)
	{
		if((x/place) < 10.0)
    1a58:	c4 01       	movw	r24, r8
    1a5a:	b3 01       	movw	r22, r6
    1a5c:	a8 01       	movw	r20, r16
    1a5e:	97 01       	movw	r18, r14
    1a60:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    1a70:	87 fd       	sbrc	r24, 7
    1a72:	0e c0       	rjmp	.+28     	; 0x1a90 <rprintfFloat+0x9a>
			break;
		else
			place *= 10.0;
    1a74:	c8 01       	movw	r24, r16
    1a76:	b7 01       	movw	r22, r14
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e2       	ldi	r20, 0x20	; 32
    1a7e:	51 e4       	ldi	r21, 0x41	; 65
    1a80:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    1a84:	7b 01       	movw	r14, r22
    1a86:	8c 01       	movw	r16, r24
	negative = (x<0);
	// convert to absolute value
	x = (x>0)?(x):(-x);
	
	// find starting digit place
	for(i=0; i<15; i++)
    1a88:	53 94       	inc	r5
    1a8a:	8f e0       	ldi	r24, 0x0F	; 15
    1a8c:	58 16       	cp	r5, r24
    1a8e:	21 f7       	brne	.-56     	; 0x1a58 <rprintfFloat+0x62>
			break;
		else
			place *= 10.0;
	}
	// print polarity character
	if(negative)
    1a90:	c6 01       	movw	r24, r12
    1a92:	b5 01       	movw	r22, r10
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    1aa0:	87 ff       	sbrs	r24, 7
    1aa2:	03 c0       	rjmp	.+6      	; 0x1aaa <rprintfFloat+0xb4>
		rprintfChar('-');
    1aa4:	8d e2       	ldi	r24, 0x2D	; 45
    1aa6:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
    1aaa:	dd 24       	eor	r13, r13
    1aac:	aa 24       	eor	r10, r10
    1aae:	56 c0       	rjmp	.+172    	; 0x1b5c <rprintfFloat+0x166>

	// print digits
	for(i=0; i<numDigits; i++)
	{
		digit = (x/place);
    1ab0:	c4 01       	movw	r24, r8
    1ab2:	b3 01       	movw	r22, r6
    1ab4:	a8 01       	movw	r20, r16
    1ab6:	97 01       	movw	r18, r14
    1ab8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    1abc:	0e 94 a1 18 	call	0x3142	; 0x3142 <__fixunssfsi>
    1ac0:	b6 2e       	mov	r11, r22

		if(digit | firstplace | (place == 1.0))
    1ac2:	d6 2a       	or	r13, r22
    1ac4:	cd 2d       	mov	r28, r13
    1ac6:	d0 e0       	ldi	r29, 0x00	; 0
    1ac8:	cc 24       	eor	r12, r12
    1aca:	dd 24       	eor	r13, r13
    1acc:	c8 01       	movw	r24, r16
    1ace:	b7 01       	movw	r22, r14
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 1d 1c 	call	0x383a	; 0x383a <__eqsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	19 f4       	brne	.+6      	; 0x1ae6 <rprintfFloat+0xf0>
    1ae0:	21 e0       	ldi	r18, 0x01	; 1
    1ae2:	c2 2e       	mov	r12, r18
    1ae4:	d1 2c       	mov	r13, r1
    1ae6:	cc 29       	or	r28, r12
    1ae8:	dd 29       	or	r29, r13
    1aea:	cd 2b       	or	r28, r29
    1aec:	39 f0       	breq	.+14     	; 0x1afc <rprintfFloat+0x106>
		{
			firstplace = TRUE;
			rprintfChar(digit+0x30);
    1aee:	8b 2d       	mov	r24, r11
    1af0:	80 5d       	subi	r24, 0xD0	; 208
    1af2:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
    1af6:	dd 24       	eor	r13, r13
    1af8:	da 94       	dec	r13
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <rprintfFloat+0x10e>
		}
		else
			rprintfChar(' ');
    1afc:	80 e2       	ldi	r24, 0x20	; 32
    1afe:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
    1b02:	dd 24       	eor	r13, r13
		
		if(place == 1.0)
    1b04:	c8 01       	movw	r24, r16
    1b06:	b7 01       	movw	r22, r14
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 1d 1c 	call	0x383a	; 0x383a <__eqsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	19 f4       	brne	.+6      	; 0x1b1e <rprintfFloat+0x128>
		{
			rprintfChar('.');
    1b18:	8e e2       	ldi	r24, 0x2E	; 46
    1b1a:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
		}
		
		x -= (digit*place);
    1b1e:	6b 2d       	mov	r22, r11
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	88 27       	eor	r24, r24
    1b24:	77 fd       	sbrc	r23, 7
    1b26:	80 95       	com	r24
    1b28:	98 2f       	mov	r25, r24
    1b2a:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__floatsisf>
    1b2e:	a8 01       	movw	r20, r16
    1b30:	97 01       	movw	r18, r14
    1b32:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	c4 01       	movw	r24, r8
    1b3c:	b3 01       	movw	r22, r6
    1b3e:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    1b42:	3b 01       	movw	r6, r22
    1b44:	4c 01       	movw	r8, r24
		place /= 10.0;
    1b46:	c8 01       	movw	r24, r16
    1b48:	b7 01       	movw	r22, r14
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    1b56:	7b 01       	movw	r14, r22
    1b58:	8c 01       	movw	r16, r24
	// print polarity character
	if(negative)
		rprintfChar('-');

	// print digits
	for(i=0; i<numDigits; i++)
    1b5a:	a3 94       	inc	r10
    1b5c:	a4 14       	cp	r10, r4
    1b5e:	08 f4       	brcc	.+2      	; 0x1b62 <rprintfFloat+0x16c>
    1b60:	a7 cf       	rjmp	.-178    	; 0x1ab0 <rprintfFloat+0xba>
		}
		
		x -= (digit*place);
		place /= 10.0;
	}
}
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	bf 90       	pop	r11
    1b74:	af 90       	pop	r10
    1b76:	9f 90       	pop	r9
    1b78:	8f 90       	pop	r8
    1b7a:	7f 90       	pop	r7
    1b7c:	6f 90       	pop	r6
    1b7e:	5f 90       	pop	r5
    1b80:	4f 90       	pop	r4
    1b82:	08 95       	ret

00001b84 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    1b84:	7f 92       	push	r7
    1b86:	8f 92       	push	r8
    1b88:	9f 92       	push	r9
    1b8a:	af 92       	push	r10
    1b8c:	bf 92       	push	r11
    1b8e:	cf 92       	push	r12
    1b90:	df 92       	push	r13
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	78 88       	ldd	r7, Y+16	; 0x10
    1ba4:	c9 88       	ldd	r12, Y+17	; 0x11
    1ba6:	da 88       	ldd	r13, Y+18	; 0x12
    1ba8:	63 e1       	ldi	r22, 0x13	; 19
    1baa:	e6 2e       	mov	r14, r22
    1bac:	f1 2c       	mov	r15, r1
    1bae:	ec 0e       	add	r14, r28
    1bb0:	fd 1e       	adc	r15, r29
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    1bb4:	88 23       	and	r24, r24
    1bb6:	81 f4       	brne	.+32     	; 0x1bd8 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
    1bcc:	bf 90       	pop	r11
    1bce:	af 90       	pop	r10
    1bd0:	9f 90       	pop	r9
    1bd2:	8f 90       	pop	r8
    1bd4:	7f 90       	pop	r7
    1bd6:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    1bd8:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
    1bdc:	96 01       	movw	r18, r12
    1bde:	2f 5f       	subi	r18, 0xFF	; 255
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    1be2:	77 20       	and	r7, r7
    1be4:	21 f0       	breq	.+8      	; 0x1bee <rprintf1RamRom+0x6a>
    1be6:	f6 01       	movw	r30, r12
    1be8:	69 01       	movw	r12, r18
    1bea:	84 91       	lpm	r24, Z+
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <rprintf1RamRom+0x70>
    1bee:	f6 01       	movw	r30, r12
    1bf0:	80 81       	ld	r24, Z
    1bf2:	69 01       	movw	r12, r18
    1bf4:	85 32       	cpi	r24, 0x25	; 37
    1bf6:	f1 f6       	brne	.-68     	; 0x1bb4 <rprintf1RamRom+0x30>
    1bf8:	2f 5f       	subi	r18, 0xFF	; 255
    1bfa:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1bfc:	77 20       	and	r7, r7
    1bfe:	21 f0       	breq	.+8      	; 0x1c08 <rprintf1RamRom+0x84>
    1c00:	f6 01       	movw	r30, r12
    1c02:	69 01       	movw	r12, r18
    1c04:	84 91       	lpm	r24, Z+
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <rprintf1RamRom+0x8a>
    1c08:	f6 01       	movw	r30, r12
    1c0a:	80 81       	ld	r24, Z
    1c0c:	69 01       	movw	r12, r18
    1c0e:	84 36       	cpi	r24, 0x64	; 100
    1c10:	29 f0       	breq	.+10     	; 0x1c1c <rprintf1RamRom+0x98>
    1c12:	88 37       	cpi	r24, 0x78	; 120
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <rprintf1RamRom+0xb2>
    1c16:	83 36       	cpi	r24, 0x63	; 99
    1c18:	f9 f6       	brne	.-66     	; 0x1bd8 <rprintf1RamRom+0x54>
    1c1a:	06 c0       	rjmp	.+12     	; 0x1c28 <rprintf1RamRom+0xa4>
    1c1c:	00 e1       	ldi	r16, 0x10	; 16
    1c1e:	17 e2       	ldi	r17, 0x27	; 39
    1c20:	5a e0       	ldi	r21, 0x0A	; 10
    1c22:	a5 2e       	mov	r10, r21
    1c24:	b1 2c       	mov	r11, r1
    1c26:	0c c0       	rjmp	.+24     	; 0x1c40 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    1c28:	f7 01       	movw	r30, r14
    1c2a:	80 81       	ld	r24, Z
    1c2c:	22 e0       	ldi	r18, 0x02	; 2
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	e2 0e       	add	r14, r18
    1c32:	f3 1e       	adc	r15, r19
    1c34:	d1 cf       	rjmp	.-94     	; 0x1bd8 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    1c36:	00 e0       	ldi	r16, 0x00	; 0
    1c38:	10 e1       	ldi	r17, 0x10	; 16
    1c3a:	40 e1       	ldi	r20, 0x10	; 16
    1c3c:	a4 2e       	mov	r10, r20
    1c3e:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1c40:	32 e0       	ldi	r19, 0x02	; 2
    1c42:	83 2e       	mov	r8, r19
    1c44:	91 2c       	mov	r9, r1
    1c46:	8e 0c       	add	r8, r14
    1c48:	9f 1c       	adc	r9, r15
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	e0 80       	ld	r14, Z
    1c4e:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    1c50:	84 36       	cpi	r24, 0x64	; 100
    1c52:	b1 f4       	brne	.+44     	; 0x1c80 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    1c54:	f7 fe       	sbrs	r15, 7
    1c56:	11 c0       	rjmp	.+34     	; 0x1c7a <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    1c58:	f0 94       	com	r15
    1c5a:	e1 94       	neg	r14
    1c5c:	f1 08       	sbc	r15, r1
    1c5e:	f3 94       	inc	r15
					rprintfChar('-');
    1c60:	8d e2       	ldi	r24, 0x2D	; 45
    1c62:	0e 94 a5 0b 	call	0x174a	; 0x174a <rprintfChar>
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    1c68:	c8 01       	movw	r24, r16
    1c6a:	6a e0       	ldi	r22, 0x0A	; 10
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodhi4>
    1c72:	8b 01       	movw	r16, r22
    1c74:	62 30       	cpi	r22, 0x02	; 2
    1c76:	71 05       	cpc	r23, r1
    1c78:	18 f0       	brcs	.+6      	; 0x1c80 <rprintf1RamRom+0xfc>
    1c7a:	e0 16       	cp	r14, r16
    1c7c:	f1 06       	cpc	r15, r17
    1c7e:	a0 f3       	brcs	.-24     	; 0x1c68 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1c80:	c7 01       	movw	r24, r14
    1c82:	b8 01       	movw	r22, r16
    1c84:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodhi4>
    1c88:	86 2f       	mov	r24, r22
    1c8a:	0e 94 08 0c 	call	0x1810	; 0x1810 <rprintfu04>
				u_val %= div_val;
    1c8e:	c7 01       	movw	r24, r14
    1c90:	b8 01       	movw	r22, r16
    1c92:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodhi4>
    1c96:	7c 01       	movw	r14, r24
				div_val /= base;
    1c98:	c8 01       	movw	r24, r16
    1c9a:	b5 01       	movw	r22, r10
    1c9c:	0e 94 4c 20 	call	0x4098	; 0x4098 <__udivmodhi4>
    1ca0:	8b 01       	movw	r16, r22
			} while (div_val);
    1ca2:	61 15       	cp	r22, r1
    1ca4:	71 05       	cpc	r23, r1
    1ca6:	61 f7       	brne	.-40     	; 0x1c80 <rprintf1RamRom+0xfc>
    1ca8:	74 01       	movw	r14, r8
    1caa:	98 cf       	rjmp	.-208    	; 0x1bdc <rprintf1RamRom+0x58>

00001cac <uartSetRxHandler>:

// redirects received data to a user function
void uartSetRxHandler(void (*rx_func)(unsigned char c))
{
	// set the receive interrupt to run the supplied user function
	UartRxFunc = rx_func;
    1cac:	90 93 bd 03 	sts	0x03BD, r25
    1cb0:	80 93 bc 03 	sts	0x03BC, r24
}
    1cb4:	08 95       	ret

00001cb6 <uartSetBaudRate>:

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    1cba:	60 5c       	subi	r22, 0xC0	; 192
    1cbc:	7d 4b       	sbci	r23, 0xBD	; 189
    1cbe:	80 4f       	sbci	r24, 0xF0	; 240
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	f3 e0       	ldi	r31, 0x03	; 3
    1cc4:	66 0f       	add	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	fa 95       	dec	r31
    1cce:	d1 f7       	brne	.-12     	; 0x1cc4 <uartSetBaudRate+0xe>
    1cd0:	e4 e0       	ldi	r30, 0x04	; 4
    1cd2:	22 0f       	add	r18, r18
    1cd4:	33 1f       	adc	r19, r19
    1cd6:	44 1f       	adc	r20, r20
    1cd8:	55 1f       	adc	r21, r21
    1cda:	ea 95       	dec	r30
    1cdc:	d1 f7       	brne	.-12     	; 0x1cd2 <uartSetBaudRate+0x1c>
    1cde:	0e 94 60 20 	call	0x40c0	; 0x40c0 <__udivmodsi4>
    1ce2:	21 50       	subi	r18, 0x01	; 1
    1ce4:	30 40       	sbci	r19, 0x00	; 0
	outb(UBRRL, bauddiv);
    1ce6:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    1ce8:	30 bd       	out	0x20, r19	; 32
	#endif
}
    1cea:	08 95       	ret

00001cec <uartGetRxBuffer>:
// returns the receive buffer structure 
cBuffer* uartGetRxBuffer(void)
{
	// return rx buffer pointer
	return &uartRxBuffer;
}
    1cec:	87 ee       	ldi	r24, 0xE7	; 231
    1cee:	93 e0       	ldi	r25, 0x03	; 3
    1cf0:	08 95       	ret

00001cf2 <uartGetTxBuffer>:
// returns the transmit buffer structure 
cBuffer* uartGetTxBuffer(void)
{
	// return tx buffer pointer
	return &uartTxBuffer;
}
    1cf2:	80 ef       	ldi	r24, 0xF0	; 240
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	08 95       	ret

00001cf8 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
    1cf8:	98 2f       	mov	r25, r24
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    1cfa:	80 91 e6 03 	lds	r24, 0x03E6
    1cfe:	88 23       	and	r24, r24
    1d00:	e1 f3       	breq	.-8      	; 0x1cfa <uartSendByte+0x2>
	// send byte
	outb(UDR, txData);
    1d02:	9c b9       	out	0x0c, r25	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    1d04:	10 92 e6 03 	sts	0x03E6, r1
}
    1d08:	08 95       	ret

00001d0a <uartFlushReceiveBuffer>:
void uartFlushReceiveBuffer(void)
{
	// flush all data from receive buffer
	//bufferFlush(&uartRxBuffer);
	// same effect as above
	uartRxBuffer.datalength = 0;
    1d0a:	10 92 ec 03 	sts	0x03EC, r1
    1d0e:	10 92 eb 03 	sts	0x03EB, r1
}
    1d12:	08 95       	ret

00001d14 <uartReceiveBufferIsEmpty>:

// return true if uart receive buffer is empty
u08 uartReceiveBufferIsEmpty(void)
{
	if(uartRxBuffer.datalength == 0)
    1d14:	80 91 eb 03 	lds	r24, 0x03EB
    1d18:	90 91 ec 03 	lds	r25, 0x03EC
    1d1c:	89 2b       	or	r24, r25
    1d1e:	11 f0       	breq	.+4      	; 0x1d24 <uartReceiveBufferIsEmpty+0x10>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	08 95       	ret
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		return FALSE;
	}
}
    1d26:	08 95       	ret

00001d28 <__vector_13>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	11 24       	eor	r1, r1
    1d32:	2f 93       	push	r18
    1d34:	3f 93       	push	r19
    1d36:	4f 93       	push	r20
    1d38:	5f 93       	push	r21
    1d3a:	6f 93       	push	r22
    1d3c:	7f 93       	push	r23
    1d3e:	8f 93       	push	r24
    1d40:	9f 93       	push	r25
    1d42:	af 93       	push	r26
    1d44:	bf 93       	push	r27
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    1d4a:	6c b1       	in	r22, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
    1d4c:	80 91 bc 03 	lds	r24, 0x03BC
    1d50:	90 91 bd 03 	lds	r25, 0x03BD
    1d54:	89 2b       	or	r24, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <__vector_13+0x3e>
	{
		// call it and pass the received data
		UartRxFunc(c);
    1d58:	e0 91 bc 03 	lds	r30, 0x03BC
    1d5c:	f0 91 bd 03 	lds	r31, 0x03BD
    1d60:	86 2f       	mov	r24, r22
    1d62:	09 95       	icall
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <__vector_13+0x5c>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    1d66:	87 ee       	ldi	r24, 0xE7	; 231
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <bufferAddToEnd>
    1d6e:	88 23       	and	r24, r24
    1d70:	49 f4       	brne	.+18     	; 0x1d84 <__vector_13+0x5c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    1d72:	80 91 f8 03 	lds	r24, 0x03F8
    1d76:	90 91 f9 03 	lds	r25, 0x03F9
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	90 93 f9 03 	sts	0x03F9, r25
    1d80:	80 93 f8 03 	sts	0x03F8, r24
		}
	}
}
    1d84:	ff 91       	pop	r31
    1d86:	ef 91       	pop	r30
    1d88:	bf 91       	pop	r27
    1d8a:	af 91       	pop	r26
    1d8c:	9f 91       	pop	r25
    1d8e:	8f 91       	pop	r24
    1d90:	7f 91       	pop	r23
    1d92:	6f 91       	pop	r22
    1d94:	5f 91       	pop	r21
    1d96:	4f 91       	pop	r20
    1d98:	3f 91       	pop	r19
    1d9a:	2f 91       	pop	r18
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	0f 90       	pop	r0
    1da2:	1f 90       	pop	r1
    1da4:	18 95       	reti

00001da6 <uartAddToTxBuffer>:
	}
}

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
    1da6:	68 2f       	mov	r22, r24
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
    1da8:	80 ef       	ldi	r24, 0xF0	; 240
    1daa:	93 e0       	ldi	r25, 0x03	; 3
    1dac:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <bufferAddToEnd>
}
    1db0:	08 95       	ret

00001db2 <__vector_15>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	ef 93       	push	r30
    1dd2:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    1dd4:	80 91 ef 03 	lds	r24, 0x03EF
    1dd8:	88 23       	and	r24, r24
    1dda:	71 f0       	breq	.+28     	; 0x1df8 <__vector_15+0x46>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    1ddc:	80 91 f4 03 	lds	r24, 0x03F4
    1de0:	90 91 f5 03 	lds	r25, 0x03F5
    1de4:	89 2b       	or	r24, r25
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <__vector_15+0x42>
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    1de8:	80 ef       	ldi	r24, 0xF0	; 240
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	0e 94 90 06 	call	0xd20	; 0xd20 <bufferGetFromFront>
    1df0:	8c b9       	out	0x0c, r24	; 12
    1df2:	05 c0       	rjmp	.+10     	; 0x1dfe <__vector_15+0x4c>
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    1df4:	10 92 ef 03 	sts	0x03EF, r1
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	80 93 e6 03 	sts	0x03E6, r24
	}
}
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	bf 91       	pop	r27
    1e04:	af 91       	pop	r26
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	7f 91       	pop	r23
    1e0c:	6f 91       	pop	r22
    1e0e:	5f 91       	pop	r21
    1e10:	4f 91       	pop	r20
    1e12:	3f 91       	pop	r19
    1e14:	2f 91       	pop	r18
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
    1e20:	8f ef       	ldi	r24, 0xFF	; 255
    1e22:	80 93 ef 03 	sts	0x03EF, r24
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
    1e26:	80 ef       	ldi	r24, 0xF0	; 240
    1e28:	93 e0       	ldi	r25, 0x03	; 3
    1e2a:	0e 94 90 06 	call	0xd20	; 0xd20 <bufferGetFromFront>
    1e2e:	98 2f       	mov	r25, r24

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    1e30:	80 91 e6 03 	lds	r24, 0x03E6
    1e34:	88 23       	and	r24, r24
    1e36:	e1 f3       	breq	.-8      	; 0x1e30 <uartSendTxBuffer+0x10>
	// send byte
	outb(UDR, txData);
    1e38:	9c b9       	out	0x0c, r25	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    1e3a:	10 92 e6 03 	sts	0x03E6, r1
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
}
    1e3e:	08 95       	ret

00001e40 <uartReceiveByte>:
		return -1;
}

// gets a byte (if available) from the uart receive buffer
u08 uartReceiveByte(u08* rxData)
{
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	ec 01       	movw	r28, r24
	// make sure we have a receive buffer
	if(uartRxBuffer.size)
    1e46:	80 91 e9 03 	lds	r24, 0x03E9
    1e4a:	90 91 ea 03 	lds	r25, 0x03EA
    1e4e:	89 2b       	or	r24, r25
    1e50:	69 f0       	breq	.+26     	; 0x1e6c <uartReceiveByte+0x2c>
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
    1e52:	80 91 eb 03 	lds	r24, 0x03EB
    1e56:	90 91 ec 03 	lds	r25, 0x03EC
    1e5a:	89 2b       	or	r24, r25
    1e5c:	39 f0       	breq	.+14     	; 0x1e6c <uartReceiveByte+0x2c>
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer);
    1e5e:	87 ee       	ldi	r24, 0xE7	; 231
    1e60:	93 e0       	ldi	r25, 0x03	; 3
    1e62:	0e 94 90 06 	call	0xd20	; 0xd20 <bufferGetFromFront>
    1e66:	88 83       	st	Y, r24
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <uartReceiveByte+0x2e>
			return TRUE;
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		// no buffer
		return FALSE;
	}
}
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	08 95       	ret

00001e74 <uartGetByte>:
	uartReadyTx = FALSE;
}

// gets a single byte from the uart receive buffer (getchar-style)
int uartGetByte(void)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	if(uartReceiveByte(&c))
    1e7e:	ce 01       	movw	r24, r28
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <uartReceiveByte>
    1e86:	88 23       	and	r24, r24
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <uartGetByte+0x1c>
    1e8a:	2f ef       	ldi	r18, 0xFF	; 255
    1e8c:	3f ef       	ldi	r19, 0xFF	; 255
    1e8e:	03 c0       	rjmp	.+6      	; 0x1e96 <uartGetByte+0x22>
		return c;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
	else
		return -1;
}
    1e96:	c9 01       	movw	r24, r18
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, uartRxData, UART_RX_BUFFER_SIZE);
    1ea0:	87 ee       	ldi	r24, 0xE7	; 231
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	6c e3       	ldi	r22, 0x3C	; 60
    1ea6:	73 e0       	ldi	r23, 0x03	; 3
    1ea8:	40 e4       	ldi	r20, 0x40	; 64
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	0e 94 83 06 	call	0xd06	; 0xd06 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, uartTxData, UART_TX_BUFFER_SIZE);
    1eb0:	80 ef       	ldi	r24, 0xF0	; 240
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	6c e7       	ldi	r22, 0x7C	; 124
    1eb6:	73 e0       	ldi	r23, 0x03	; 3
    1eb8:	40 e4       	ldi	r20, 0x40	; 64
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	0e 94 83 06 	call	0xd06	; 0xd06 <bufferInit>
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, (u08*) UART_RX_BUFFER_ADDR, UART_RX_BUFFER_SIZE);
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, (u08*) UART_TX_BUFFER_ADDR, UART_TX_BUFFER_SIZE);
	#endif
}
    1ec0:	08 95       	ret

00001ec2 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
    1ec2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
    1ec6:	10 92 bd 03 	sts	0x03BD, r1
    1eca:	10 92 bc 03 	sts	0x03BC, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1ece:	88 ed       	ldi	r24, 0xD8	; 216
    1ed0:	8a b9       	out	0x0a, r24	; 10

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
    1ed2:	60 e8       	ldi	r22, 0x80	; 128
    1ed4:	75 e2       	ldi	r23, 0x25	; 37
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <uartSetBaudRate>
	// initialize states
	uartReadyTx = TRUE;
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	80 93 e6 03 	sts	0x03E6, r24
	uartBufferedTx = FALSE;
    1ee4:	10 92 ef 03 	sts	0x03EF, r1
	// clear overflow count
	uartRxOverflow = 0;
    1ee8:	10 92 f9 03 	sts	0x03F9, r1
    1eec:	10 92 f8 03 	sts	0x03F8, r1
	// enable interrupts
	sei();
    1ef0:	78 94       	sei
}
    1ef2:	08 95       	ret

00001ef4 <lcdPrintFloat>:
	_delay_ms(1500);
}

// displays floats
void lcdPrintFloat(float x)
{
    1ef4:	ab 01       	movw	r20, r22
    1ef6:	bc 01       	movw	r22, r24
	rprintfFloat(4, x);
    1ef8:	84 e0       	ldi	r24, 0x04	; 4
    1efa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
}
    1efe:	08 95       	ret

00001f00 <lcdSendString>:
	uartSendByte(BASE_CURSOR_POSITION+(position * 4));
}

// displays a string of characters
void lcdSendString(const u08 *string)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
    1f06:	03 c0       	rjmp	.+6      	; 0x1f0e <lcdSendString+0xe>
	u08 ch;
	
	while((ch = *string))
	{
		uartSendByte(ch);
    1f08:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
		string++;
    1f0c:	21 96       	adiw	r28, 0x01	; 1
// displays a string of characters
void lcdSendString(const u08 *string)
{
	u08 ch;
	
	while((ch = *string))
    1f0e:	88 81       	ld	r24, Y
    1f10:	88 23       	and	r24, r24
    1f12:	d1 f7       	brne	.-12     	; 0x1f08 <lcdSendString+0x8>
	{
		uartSendByte(ch);
		string++;
	}	
}
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <lcdSetCursorPosition>:
	uartSendByte(LCD_BOX_CURSOR_OFF);
}

// sets the cursor position
void lcdSetCursorPosition(u08 position)
{
    1f1a:	1f 93       	push	r17
    1f1c:	18 2f       	mov	r17, r24
	uartSendByte(LCD_COMMAND_INIT);
    1f1e:	8e ef       	ldi	r24, 0xFE	; 254
    1f20:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(BASE_CURSOR_POSITION+(position * 4));
    1f24:	11 0f       	add	r17, r17
    1f26:	11 0f       	add	r17, r17
    1f28:	81 2f       	mov	r24, r17
    1f2a:	80 58       	subi	r24, 0x80	; 128
    1f2c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f30:	1f 91       	pop	r17
    1f32:	08 95       	ret

00001f34 <lcdNewLine>:
	rprintfFloat(4, x);
}

void lcdNewLine(void)
{
	lcdSetCursorPosition(16);			/* The 16th character is the first character on the second row if the first character on row 1 is character 0 */
    1f34:	80 e1       	ldi	r24, 0x10	; 16
    1f36:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <lcdSetCursorPosition>
}
    1f3a:	08 95       	ret

00001f3c <lcdBlinkingCursorOff>:
}

// turns off the bliking cursor
void lcdBlinkingCursorOff(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f3c:	8e ef       	ldi	r24, 0xFE	; 254
    1f3e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_BOX_CURSOR_OFF);
    1f42:	8c e0       	ldi	r24, 0x0C	; 12
    1f44:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f48:	08 95       	ret

00001f4a <lcdBlinkingCursorOn>:
}

// turns on the blinking cursor
void lcdBlinkingCursorOn(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f4a:	8e ef       	ldi	r24, 0xFE	; 254
    1f4c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_BOX_CURSOR_ON);
    1f50:	8d e0       	ldi	r24, 0x0D	; 13
    1f52:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f56:	08 95       	ret

00001f58 <lcdUnderlineCursorOff>:
}

// turns off the underline cursor
void lcdUnderlineCursorOff(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f58:	8e ef       	ldi	r24, 0xFE	; 254
    1f5a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_UNDERLINE_CURSOR_OFF);
    1f5e:	8c e0       	ldi	r24, 0x0C	; 12
    1f60:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f64:	08 95       	ret

00001f66 <lcdUnderlineCursorOn>:
}

// turns on the underline cursor
void lcdUnderlineCursorOn(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f66:	8e ef       	ldi	r24, 0xFE	; 254
    1f68:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_UNDERLINE_CURSOR_ON);
    1f6c:	8e e0       	ldi	r24, 0x0E	; 14
    1f6e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f72:	08 95       	ret

00001f74 <lcdTurnOff>:
}

// turns lcd display off
void lcdTurnOff(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f74:	8e ef       	ldi	r24, 0xFE	; 254
    1f76:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_TURN_DISPLAY_OFF);
    1f7a:	88 e0       	ldi	r24, 0x08	; 8
    1f7c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f80:	08 95       	ret

00001f82 <lcdTurnOn>:
}

// turns lcd display on
void lcdTurnOn(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f82:	8e ef       	ldi	r24, 0xFE	; 254
    1f84:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_TURN_DISPLAY_ON);
    1f88:	8c e0       	ldi	r24, 0x0C	; 12
    1f8a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f8e:	08 95       	ret

00001f90 <lcdScrollLeft>:
}

// scrolls entire meassge one psace to the left
void lcdScrollLeft(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f90:	8e ef       	ldi	r24, 0xFE	; 254
    1f92:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_SCROLL_LEFT);
    1f96:	88 e1       	ldi	r24, 0x18	; 24
    1f98:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1f9c:	08 95       	ret

00001f9e <lcdScrollRight>:
}

// scrolls entire message one space to the right
void lcdScrollRight(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1f9e:	8e ef       	ldi	r24, 0xFE	; 254
    1fa0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_SCROLL_RIGHT);
    1fa4:	8c e1       	ldi	r24, 0x1C	; 28
    1fa6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1faa:	08 95       	ret

00001fac <lcdMoveLeftOne>:
}

// moves the lcd cursor one space to the left
void lcdMoveLeftOne(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1fac:	8e ef       	ldi	r24, 0xFE	; 254
    1fae:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_MOVE_CURSOR_LEFT_ONE);
    1fb2:	80 e1       	ldi	r24, 0x10	; 16
    1fb4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1fb8:	08 95       	ret

00001fba <lcdMoveRightOne>:
}

// moves the lcd cursor one space to the right
void lcdMoveRightOne(void)
{
	uartSendByte(LCD_COMMAND_INIT);
    1fba:	8e ef       	ldi	r24, 0xFE	; 254
    1fbc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_MOVE_CURSOR_RIGHT_ONE);
    1fc0:	84 e1       	ldi	r24, 0x14	; 20
    1fc2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1fc6:	08 95       	ret

00001fc8 <lcdClearDisplay>:
#include "rprintf.h"

// clears the lcd display of all characters
void lcdClearDisplay(void)            
{
	uartSendByte(LCD_COMMAND_INIT);
    1fc8:	8e ef       	ldi	r24, 0xFE	; 254
    1fca:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
	uartSendByte(LCD_CLEAR_DISPLAY);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <uartSendByte>
}
    1fd4:	08 95       	ret

00001fd6 <lcdEditValue>:
			break;
	}
}

void lcdEditValue(u08 mode, float val)
{
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	d8 2e       	mov	r13, r24
    1fe2:	7a 01       	movw	r14, r20
    1fe4:	8b 01       	movw	r16, r22
	static float oldVal;

	if(val == oldVal)
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	ba 01       	movw	r22, r20
    1fea:	20 91 be 03 	lds	r18, 0x03BE
    1fee:	30 91 bf 03 	lds	r19, 0x03BF
    1ff2:	40 91 c0 03 	lds	r20, 0x03C0
    1ff6:	50 91 c1 03 	lds	r21, 0x03C1
    1ffa:	0e 94 1d 1c 	call	0x383a	; 0x383a <__eqsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	91 f1       	breq	.+100    	; 0x2066 <lcdEditValue+0x90>
	{
		return;
	}

	lcdClearDisplay();
    2002:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	switch(mode)
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	d8 16       	cp	r13, r24
    200a:	61 f0       	breq	.+24     	; 0x2024 <lcdEditValue+0x4e>
    200c:	d8 16       	cp	r13, r24
    200e:	38 f0       	brcs	.+14     	; 0x201e <lcdEditValue+0x48>
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	d8 16       	cp	r13, r24
    2014:	51 f0       	breq	.+20     	; 0x202a <lcdEditValue+0x54>
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	d8 16       	cp	r13, r24
    201a:	e9 f4       	brne	.+58     	; 0x2056 <lcdEditValue+0x80>
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <lcdEditValue+0x5a>
	{
		case 0:
			lcdSendString("Desired Boost:");
    201e:	82 e8       	ldi	r24, 0x82	; 130
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	08 c0       	rjmp	.+16     	; 0x2034 <lcdEditValue+0x5e>
			lcdPrintFloat(val);
			lcdSendString("  PSi"); 
			break;
		
		case 1:
			lcdSendString("Desired Ki:");
    2024:	8b e9       	ldi	r24, 0x9B	; 155
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <lcdEditValue+0x5e>
			lcdPrintFloat(val);
			lcdSendString("  PSi"); 
			break;

		case 2:
			lcdSendString("Desired Pressure:");
    202a:	87 ea       	ldi	r24, 0xA7	; 167
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <lcdEditValue+0x5e>
			lcdPrintFloat(val);
			lcdSendString("  PSi"); 
			break;
		
		case 3:
			lcdSendString("Desired on Boost:");
    2030:	89 eb       	ldi	r24, 0xB9	; 185
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
			lcdNewLine();
    2038:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
			lcdSendString("   ");
    203c:	81 e9       	ldi	r24, 0x91	; 145
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	b8 01       	movw	r22, r16
    2048:	a7 01       	movw	r20, r14
    204a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
		case 3:
			lcdSendString("Desired on Boost:");
			lcdNewLine();
			lcdSendString("   ");
			lcdPrintFloat(val);
			lcdSendString("  PSi"); 
    204e:	85 e9       	ldi	r24, 0x95	; 149
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
		case 4:
			
			break;
	}
	
	oldVal = val;
    2056:	e0 92 be 03 	sts	0x03BE, r14
    205a:	f0 92 bf 03 	sts	0x03BF, r15
    205e:	00 93 c0 03 	sts	0x03C0, r16
    2062:	10 93 c1 03 	sts	0x03C1, r17
}
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	df 90       	pop	r13
    2070:	08 95       	ret

00002072 <lcdMenuOptions>:
{
	lcdSetCursorPosition(16);			/* The 16th character is the first character on the second row if the first character on row 1 is character 0 */
}

void lcdMenuOptions(u08 mode)
{
    2072:	1f 93       	push	r17
    2074:	18 2f       	mov	r17, r24
	lcdClearDisplay();
    2076:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	switch(mode)
    207a:	12 30       	cpi	r17, 0x02	; 2
    207c:	a9 f0       	breq	.+42     	; 0x20a8 <lcdMenuOptions+0x36>
    207e:	13 30       	cpi	r17, 0x03	; 3
    2080:	28 f4       	brcc	.+10     	; 0x208c <lcdMenuOptions+0x1a>
    2082:	11 23       	and	r17, r17
    2084:	41 f0       	breq	.+16     	; 0x2096 <lcdMenuOptions+0x24>
    2086:	11 30       	cpi	r17, 0x01	; 1
    2088:	29 f5       	brne	.+74     	; 0x20d4 <lcdMenuOptions+0x62>
    208a:	20 c0       	rjmp	.+64     	; 0x20cc <lcdMenuOptions+0x5a>
    208c:	13 30       	cpi	r17, 0x03	; 3
    208e:	a9 f0       	breq	.+42     	; 0x20ba <lcdMenuOptions+0x48>
    2090:	14 30       	cpi	r17, 0x04	; 4
    2092:	01 f5       	brne	.+64     	; 0x20d4 <lcdMenuOptions+0x62>
    2094:	1b c0       	rjmp	.+54     	; 0x20cc <lcdMenuOptions+0x5a>
	{
		case 0:
			lcdSendString("  Set Desired");
    2096:	8b ec       	ldi	r24, 0xCB	; 203
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
			lcdNewLine();
    209e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
			lcdSendString("     Boost");
    20a2:	89 ed       	ldi	r24, 0xD9	; 217
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <lcdMenuOptions+0x5e>
		case 1:
			lcdSendString(" Set Boost Gains");
			break;

		case 2:
			lcdSendString("Set Desired W/M");
    20a8:	85 ef       	ldi	r24, 0xF5	; 245
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
			lcdNewLine();
    20b0:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
			lcdSendString("  Pressure");
    20b4:	85 e0       	ldi	r24, 0x05	; 5
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	0b c0       	rjmp	.+22     	; 0x20d0 <lcdMenuOptions+0x5e>
			break;
		
		case 3:
			lcdSendString(" Set W/M on ");
    20ba:	80 e1       	ldi	r24, 0x10	; 16
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
			lcdNewLine();
    20c2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
			lcdSendString("    Boost");
    20c6:	8d e1       	ldi	r24, 0x1D	; 29
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <lcdMenuOptions+0x5e>
			break;

		case 4:
			lcdSendString(" Set Boost Gains");
    20cc:	84 ee       	ldi	r24, 0xE4	; 228
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
			break;
	}
}
    20d4:	1f 91       	pop	r17
    20d6:	08 95       	ret

000020d8 <lcdWelcomeScreen>:
}

// prints intro welcome screen
void lcdWelcomeScreen(void)
{
	lcdClearDisplay();
    20d8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdBlinkingCursorOn();
    20dc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <lcdBlinkingCursorOn>
    20e0:	80 e1       	ldi	r24, 0x10	; 16
    20e2:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20e4:	28 ec       	ldi	r18, 0xC8	; 200
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	f9 01       	movw	r30, r18
    20ea:	31 97       	sbiw	r30, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <lcdWelcomeScreen+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	d9 f7       	brne	.-10     	; 0x20e8 <lcdWelcomeScreen+0x10>
    _delay_ms(1000);
    lcdSendString(" ");
    20f2:	87 e2       	ldi	r24, 0x27	; 39
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    20fa:	88 ee       	ldi	r24, 0xE8	; 232
    20fc:	93 e0       	ldi	r25, 0x03	; 3
    20fe:	28 ec       	ldi	r18, 0xC8	; 200
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	f9 01       	movw	r30, r18
    2104:	31 97       	sbiw	r30, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <lcdWelcomeScreen+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	d9 f7       	brne	.-10     	; 0x2102 <lcdWelcomeScreen+0x2a>
	_delay_ms(100);
	lcdSendString(" ");
    210c:	87 e2       	ldi	r24, 0x27	; 39
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2114:	88 ee       	ldi	r24, 0xE8	; 232
    2116:	93 e0       	ldi	r25, 0x03	; 3
    2118:	28 ec       	ldi	r18, 0xC8	; 200
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	f9 01       	movw	r30, r18
    211e:	31 97       	sbiw	r30, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <lcdWelcomeScreen+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	d9 f7       	brne	.-10     	; 0x211c <lcdWelcomeScreen+0x44>
	_delay_ms(100);
	lcdSendString(" ");
    2126:	87 e2       	ldi	r24, 0x27	; 39
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    212e:	88 ee       	ldi	r24, 0xE8	; 232
    2130:	93 e0       	ldi	r25, 0x03	; 3
    2132:	28 ec       	ldi	r18, 0xC8	; 200
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	f9 01       	movw	r30, r18
    2138:	31 97       	sbiw	r30, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <lcdWelcomeScreen+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	d9 f7       	brne	.-10     	; 0x2136 <lcdWelcomeScreen+0x5e>
	_delay_ms(100);
	lcdSendString(" ");
    2140:	87 e2       	ldi	r24, 0x27	; 39
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2148:	88 ee       	ldi	r24, 0xE8	; 232
    214a:	93 e0       	ldi	r25, 0x03	; 3
    214c:	28 ec       	ldi	r18, 0xC8	; 200
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	f9 01       	movw	r30, r18
    2152:	31 97       	sbiw	r30, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <lcdWelcomeScreen+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	d9 f7       	brne	.-10     	; 0x2150 <lcdWelcomeScreen+0x78>
	_delay_ms(100);
	lcdSendString("H");
    215a:	89 e2       	ldi	r24, 0x29	; 41
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2162:	88 ee       	ldi	r24, 0xE8	; 232
    2164:	93 e0       	ldi	r25, 0x03	; 3
    2166:	28 ec       	ldi	r18, 0xC8	; 200
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	f9 01       	movw	r30, r18
    216c:	31 97       	sbiw	r30, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <lcdWelcomeScreen+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2170:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	d9 f7       	brne	.-10     	; 0x216a <lcdWelcomeScreen+0x92>
	_delay_ms(100);
	lcdSendString("e");
    2174:	8b e2       	ldi	r24, 0x2B	; 43
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    217c:	88 ee       	ldi	r24, 0xE8	; 232
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	28 ec       	ldi	r18, 0xC8	; 200
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	f9 01       	movw	r30, r18
    2186:	31 97       	sbiw	r30, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <lcdWelcomeScreen+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	d9 f7       	brne	.-10     	; 0x2184 <lcdWelcomeScreen+0xac>
	_delay_ms(100);
	lcdSendString("l");
    218e:	8d e2       	ldi	r24, 0x2D	; 45
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2196:	88 ee       	ldi	r24, 0xE8	; 232
    2198:	93 e0       	ldi	r25, 0x03	; 3
    219a:	28 ec       	ldi	r18, 0xC8	; 200
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	f9 01       	movw	r30, r18
    21a0:	31 97       	sbiw	r30, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <lcdWelcomeScreen+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	d9 f7       	brne	.-10     	; 0x219e <lcdWelcomeScreen+0xc6>
	_delay_ms(100);
	lcdSendString("l");
    21a8:	8d e2       	ldi	r24, 0x2D	; 45
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    21b0:	88 ee       	ldi	r24, 0xE8	; 232
    21b2:	93 e0       	ldi	r25, 0x03	; 3
    21b4:	28 ec       	ldi	r18, 0xC8	; 200
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	f9 01       	movw	r30, r18
    21ba:	31 97       	sbiw	r30, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <lcdWelcomeScreen+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	d9 f7       	brne	.-10     	; 0x21b8 <lcdWelcomeScreen+0xe0>
	_delay_ms(100);
	lcdSendString("o");
    21c2:	8f e2       	ldi	r24, 0x2F	; 47
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    21ca:	88 ee       	ldi	r24, 0xE8	; 232
    21cc:	93 e0       	ldi	r25, 0x03	; 3
    21ce:	28 ec       	ldi	r18, 0xC8	; 200
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	f9 01       	movw	r30, r18
    21d4:	31 97       	sbiw	r30, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <lcdWelcomeScreen+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	d9 f7       	brne	.-10     	; 0x21d2 <lcdWelcomeScreen+0xfa>
	_delay_ms(100);
	lcdSendString("!");
    21dc:	81 e3       	ldi	r24, 0x31	; 49
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    21e4:	80 e1       	ldi	r24, 0x10	; 16
    21e6:	97 e2       	ldi	r25, 0x27	; 39
    21e8:	28 ec       	ldi	r18, 0xC8	; 200
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	f9 01       	movw	r30, r18
    21ee:	31 97       	sbiw	r30, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <lcdWelcomeScreen+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f4:	d9 f7       	brne	.-10     	; 0x21ec <lcdWelcomeScreen+0x114>
	_delay_ms(1000);
	lcdNewLine();
    21f6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
    21fa:	80 e1       	ldi	r24, 0x10	; 16
    21fc:	97 e2       	ldi	r25, 0x27	; 39
    21fe:	28 ec       	ldi	r18, 0xC8	; 200
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	f9 01       	movw	r30, r18
    2204:	31 97       	sbiw	r30, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <lcdWelcomeScreen+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	d9 f7       	brne	.-10     	; 0x2202 <lcdWelcomeScreen+0x12a>
	_delay_ms(1000);
	lcdSendString(" ");
    220c:	87 e2       	ldi	r24, 0x27	; 39
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2214:	88 ee       	ldi	r24, 0xE8	; 232
    2216:	93 e0       	ldi	r25, 0x03	; 3
    2218:	28 ec       	ldi	r18, 0xC8	; 200
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	f9 01       	movw	r30, r18
    221e:	31 97       	sbiw	r30, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <lcdWelcomeScreen+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	d9 f7       	brne	.-10     	; 0x221c <lcdWelcomeScreen+0x144>
	_delay_ms(100);
	lcdSendString(" ");
    2226:	87 e2       	ldi	r24, 0x27	; 39
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    222e:	88 ee       	ldi	r24, 0xE8	; 232
    2230:	93 e0       	ldi	r25, 0x03	; 3
    2232:	28 ec       	ldi	r18, 0xC8	; 200
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	f9 01       	movw	r30, r18
    2238:	31 97       	sbiw	r30, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <lcdWelcomeScreen+0x160>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	d9 f7       	brne	.-10     	; 0x2236 <lcdWelcomeScreen+0x15e>
	_delay_ms(100);
	lcdSendString("D");
    2240:	83 e3       	ldi	r24, 0x33	; 51
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2248:	88 ee       	ldi	r24, 0xE8	; 232
    224a:	93 e0       	ldi	r25, 0x03	; 3
    224c:	28 ec       	ldi	r18, 0xC8	; 200
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	f9 01       	movw	r30, r18
    2252:	31 97       	sbiw	r30, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <lcdWelcomeScreen+0x17a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2256:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	d9 f7       	brne	.-10     	; 0x2250 <lcdWelcomeScreen+0x178>
	_delay_ms(100);
	lcdSendString("B");
    225a:	85 e3       	ldi	r24, 0x35	; 53
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2262:	88 ee       	ldi	r24, 0xE8	; 232
    2264:	93 e0       	ldi	r25, 0x03	; 3
    2266:	28 ec       	ldi	r18, 0xC8	; 200
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	f9 01       	movw	r30, r18
    226c:	31 97       	sbiw	r30, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <lcdWelcomeScreen+0x194>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	d9 f7       	brne	.-10     	; 0x226a <lcdWelcomeScreen+0x192>
	_delay_ms(100);
	lcdSendString("W");
    2274:	87 e3       	ldi	r24, 0x37	; 55
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    227c:	88 ee       	ldi	r24, 0xE8	; 232
    227e:	93 e0       	ldi	r25, 0x03	; 3
    2280:	28 ec       	ldi	r18, 0xC8	; 200
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	f9 01       	movw	r30, r18
    2286:	31 97       	sbiw	r30, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <lcdWelcomeScreen+0x1ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	d9 f7       	brne	.-10     	; 0x2284 <lcdWelcomeScreen+0x1ac>
	_delay_ms(100);
	lcdSendString("M");
    228e:	89 e3       	ldi	r24, 0x39	; 57
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2296:	88 ee       	ldi	r24, 0xE8	; 232
    2298:	93 e0       	ldi	r25, 0x03	; 3
    229a:	28 ec       	ldi	r18, 0xC8	; 200
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	f9 01       	movw	r30, r18
    22a0:	31 97       	sbiw	r30, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <lcdWelcomeScreen+0x1c8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	d9 f7       	brne	.-10     	; 0x229e <lcdWelcomeScreen+0x1c6>
	_delay_ms(100);
	lcdSendString("C");
    22a8:	8b e3       	ldi	r24, 0x3B	; 59
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    22b0:	88 ee       	ldi	r24, 0xE8	; 232
    22b2:	93 e0       	ldi	r25, 0x03	; 3
    22b4:	28 ec       	ldi	r18, 0xC8	; 200
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	f9 01       	movw	r30, r18
    22ba:	31 97       	sbiw	r30, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <lcdWelcomeScreen+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	d9 f7       	brne	.-10     	; 0x22b8 <lcdWelcomeScreen+0x1e0>
	_delay_ms(100);
	lcdSendString(" ");
    22c2:	87 e2       	ldi	r24, 0x27	; 39
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    22ca:	88 ee       	ldi	r24, 0xE8	; 232
    22cc:	93 e0       	ldi	r25, 0x03	; 3
    22ce:	28 ec       	ldi	r18, 0xC8	; 200
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	f9 01       	movw	r30, r18
    22d4:	31 97       	sbiw	r30, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <lcdWelcomeScreen+0x1fc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	d9 f7       	brne	.-10     	; 0x22d2 <lcdWelcomeScreen+0x1fa>
	_delay_ms(100);
	lcdSendString("v");
    22dc:	8d e3       	ldi	r24, 0x3D	; 61
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    22e4:	88 ee       	ldi	r24, 0xE8	; 232
    22e6:	93 e0       	ldi	r25, 0x03	; 3
    22e8:	28 ec       	ldi	r18, 0xC8	; 200
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	f9 01       	movw	r30, r18
    22ee:	31 97       	sbiw	r30, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <lcdWelcomeScreen+0x216>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f4:	d9 f7       	brne	.-10     	; 0x22ec <lcdWelcomeScreen+0x214>
	_delay_ms(100);
	lcdSendString("1");
    22f6:	8f e3       	ldi	r24, 0x3F	; 63
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    22fe:	88 ee       	ldi	r24, 0xE8	; 232
    2300:	93 e0       	ldi	r25, 0x03	; 3
    2302:	28 ec       	ldi	r18, 0xC8	; 200
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	f9 01       	movw	r30, r18
    2308:	31 97       	sbiw	r30, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <lcdWelcomeScreen+0x230>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	d9 f7       	brne	.-10     	; 0x2306 <lcdWelcomeScreen+0x22e>
	_delay_ms(100);
	lcdSendString(".");
    2310:	81 e4       	ldi	r24, 0x41	; 65
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2318:	88 ee       	ldi	r24, 0xE8	; 232
    231a:	93 e0       	ldi	r25, 0x03	; 3
    231c:	28 ec       	ldi	r18, 0xC8	; 200
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	f9 01       	movw	r30, r18
    2322:	31 97       	sbiw	r30, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <lcdWelcomeScreen+0x24a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	d9 f7       	brne	.-10     	; 0x2320 <lcdWelcomeScreen+0x248>
	_delay_ms(100);
	lcdSendString("0");
    232a:	83 e4       	ldi	r24, 0x43	; 67
    232c:	91 e0       	ldi	r25, 0x01	; 1
    232e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2332:	80 e2       	ldi	r24, 0x20	; 32
    2334:	9e e4       	ldi	r25, 0x4E	; 78
    2336:	28 ec       	ldi	r18, 0xC8	; 200
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	f9 01       	movw	r30, r18
    233c:	31 97       	sbiw	r30, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <lcdWelcomeScreen+0x264>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	d9 f7       	brne	.-10     	; 0x233a <lcdWelcomeScreen+0x262>
	_delay_ms(2000);
	lcdBlinkingCursorOff(); 
    2344:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <lcdBlinkingCursorOff>
	
	lcdClearDisplay();
    2348:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString("  Boost Guage");
    234c:	85 e4       	ldi	r24, 0x45	; 69
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2354:	88 e9       	ldi	r24, 0x98	; 152
    2356:	9a e3       	ldi	r25, 0x3A	; 58
    2358:	28 ec       	ldi	r18, 0xC8	; 200
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	f9 01       	movw	r30, r18
    235e:	31 97       	sbiw	r30, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <lcdWelcomeScreen+0x286>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2364:	d9 f7       	brne	.-10     	; 0x235c <lcdWelcomeScreen+0x284>
	_delay_ms(1500);
	lcdClearDisplay();
    2366:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString(" W/M Controller");
    236a:	83 e5       	ldi	r24, 0x53	; 83
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2372:	88 e9       	ldi	r24, 0x98	; 152
    2374:	9a e3       	ldi	r25, 0x3A	; 58
    2376:	28 ec       	ldi	r18, 0xC8	; 200
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	f9 01       	movw	r30, r18
    237c:	31 97       	sbiw	r30, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <lcdWelcomeScreen+0x2a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2382:	d9 f7       	brne	.-10     	; 0x237a <lcdWelcomeScreen+0x2a2>
	_delay_ms(1500);
	lcdClearDisplay();
    2384:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString(" Accelerometer");
    2388:	83 e6       	ldi	r24, 0x63	; 99
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
    2390:	88 e9       	ldi	r24, 0x98	; 152
    2392:	9a e3       	ldi	r25, 0x3A	; 58
    2394:	28 ec       	ldi	r18, 0xC8	; 200
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	f9 01       	movw	r30, r18
    239a:	31 97       	sbiw	r30, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <lcdWelcomeScreen+0x2c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a0:	d9 f7       	brne	.-10     	; 0x2398 <lcdWelcomeScreen+0x2c0>
	_delay_ms(1500);
}
    23a2:	08 95       	ret

000023a4 <lcdPrintAccelAxis>:
	lcdSendString(" ccPM"); 
}

// displays boost pressure in metric units
void lcdPrintAccelAxis(u08 axis, float gravities)
{
    23a4:	cf 92       	push	r12
    23a6:	df 92       	push	r13
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	1f 93       	push	r17
    23ae:	18 2f       	mov	r17, r24
    23b0:	6a 01       	movw	r12, r20
    23b2:	7b 01       	movw	r14, r22

	lcdClearDisplay();
    23b4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	switch(axis)
    23b8:	11 30       	cpi	r17, 0x01	; 1
    23ba:	41 f0       	breq	.+16     	; 0x23cc <lcdPrintAccelAxis+0x28>
    23bc:	11 30       	cpi	r17, 0x01	; 1
    23be:	18 f0       	brcs	.+6      	; 0x23c6 <lcdPrintAccelAxis+0x22>
    23c0:	12 30       	cpi	r17, 0x02	; 2
    23c2:	59 f4       	brne	.+22     	; 0x23da <lcdPrintAccelAxis+0x36>
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <lcdPrintAccelAxis+0x2e>
	{
		// x axis
		case 0:
			lcdSendString(" Forward Accel:");
    23c6:	82 e7       	ldi	r24, 0x72	; 114
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	05 c0       	rjmp	.+10     	; 0x23d6 <lcdPrintAccelAxis+0x32>
			break;

		case 1: 
			lcdSendString(" Lateral Accel:");
    23cc:	82 e8       	ldi	r24, 0x82	; 130
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <lcdPrintAccelAxis+0x32>
			break;
		case 2: 
		lcdSendString("   Incline:");
    23d2:	82 e9       	ldi	r24, 0x92	; 146
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
		break;
	
			
	}
	lcdNewLine();
    23da:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
	lcdSendString("   ");
    23de:	81 e9       	ldi	r24, 0x91	; 145
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	b7 01       	movw	r22, r14
    23ea:	a6 01       	movw	r20, r12
    23ec:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
			
	}
	lcdNewLine();
	lcdSendString("   ");
	lcdPrintFloat(gravities);
	lcdSendString(" G's");
    23f0:	8e e9       	ldi	r24, 0x9E	; 158
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
 
}
    23f8:	1f 91       	pop	r17
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	cf 90       	pop	r12
    2402:	08 95       	ret

00002404 <lcdPrintMetricWaterVolume>:
	lcdSendString(" BAR"); 
}

// displays boost pressure in metric units
void lcdPrintMetricWaterVolume(float metricVolume)
{
    2404:	ef 92       	push	r14
    2406:	ff 92       	push	r15
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	7b 01       	movw	r14, r22
    240e:	8c 01       	movw	r16, r24
	lcdClearDisplay();
    2410:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString(" Water Volume:");
    2414:	83 ea       	ldi	r24, 0xA3	; 163
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
	lcdNewLine();
    241c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
	lcdSendString("   ");
    2420:	81 e9       	ldi	r24, 0x91	; 145
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    2428:	84 e0       	ldi	r24, 0x04	; 4
    242a:	b8 01       	movw	r22, r16
    242c:	a7 01       	movw	r20, r14
    242e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
	lcdClearDisplay();
	lcdSendString(" Water Volume:");
	lcdNewLine();
	lcdSendString("   ");
	lcdPrintFloat(metricVolume);
	lcdSendString(" ccPM"); 
    2432:	82 eb       	ldi	r24, 0xB2	; 178
    2434:	91 e0       	ldi	r25, 0x01	; 1
    2436:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	08 95       	ret

00002444 <lcdPrintMetricWaterPressure>:
	lcdSendString(" BAR"); 
}

// displays boost pressure in metric units
void lcdPrintMetricWaterPressure(float metricWaterPressure)
{
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	7b 01       	movw	r14, r22
    244e:	8c 01       	movw	r16, r24
	lcdClearDisplay();
    2450:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString("Water Pressure:");
    2454:	88 eb       	ldi	r24, 0xB8	; 184
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
	lcdNewLine();
    245c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
	lcdSendString("   ");
    2460:	81 e9       	ldi	r24, 0x91	; 145
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    2468:	84 e0       	ldi	r24, 0x04	; 4
    246a:	b8 01       	movw	r22, r16
    246c:	a7 01       	movw	r20, r14
    246e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
	lcdClearDisplay();
	lcdSendString("Water Pressure:");
	lcdNewLine();
	lcdSendString("   ");
	lcdPrintFloat(metricWaterPressure);
	lcdSendString(" BAR"); 
    2472:	88 ec       	ldi	r24, 0xC8	; 200
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	ff 90       	pop	r15
    2480:	ef 90       	pop	r14
    2482:	08 95       	ret

00002484 <lcdPrintMetricBoostPressure>:
}


// displays boost pressure in metric units
void lcdPrintMetricBoostPressure(float metricBoostPressure)
{
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	7b 01       	movw	r14, r22
    248e:	8c 01       	movw	r16, r24
	lcdClearDisplay();
    2490:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString("Boost Pressure:");
    2494:	8d ec       	ldi	r24, 0xCD	; 205
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
	lcdNewLine();
    249c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
	lcdSendString("   ");
    24a0:	81 e9       	ldi	r24, 0x91	; 145
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    24a8:	84 e0       	ldi	r24, 0x04	; 4
    24aa:	b8 01       	movw	r22, r16
    24ac:	a7 01       	movw	r20, r14
    24ae:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
	lcdClearDisplay();
	lcdSendString("Boost Pressure:");
	lcdNewLine();
	lcdSendString("   ");
	lcdPrintFloat(metricBoostPressure);
	lcdSendString(" BAR"); 
    24b2:	88 ec       	ldi	r24, 0xC8	; 200
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	08 95       	ret

000024c4 <lcdPrintStandWaterVolume>:
	lcdSendString("  PSi"); 
}

// displays water volume in standard units
void lcdPrintStandWaterVolume(float standVolume)
{
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	7b 01       	movw	r14, r22
    24ce:	8c 01       	movw	r16, r24
	lcdClearDisplay();
    24d0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString(" Water Volume:");
    24d4:	83 ea       	ldi	r24, 0xA3	; 163
    24d6:	91 e0       	ldi	r25, 0x01	; 1
    24d8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
	lcdNewLine();
    24dc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
	lcdSendString("   ");
    24e0:	81 e9       	ldi	r24, 0x91	; 145
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    24e8:	84 e0       	ldi	r24, 0x04	; 4
    24ea:	b8 01       	movw	r22, r16
    24ec:	a7 01       	movw	r20, r14
    24ee:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
	lcdClearDisplay();
	lcdSendString(" Water Volume:");
	lcdNewLine();
	lcdSendString("   ");
	lcdPrintFloat(standVolume);
	lcdSendString("  Gph"); 
    24f2:	8d ed       	ldi	r24, 0xDD	; 221
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	08 95       	ret

00002504 <lcdPrintStandWaterPressure>:
	lcdSendString("  PSi"); 
}

// displays water pressure in standard units
void lcdPrintStandWaterPressure(float standWaterPressure)
{
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	7b 01       	movw	r14, r22
    250e:	8c 01       	movw	r16, r24
	lcdClearDisplay();
    2510:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString("Water Pressure:");
    2514:	88 eb       	ldi	r24, 0xB8	; 184
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
	lcdNewLine();
    251c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
	lcdSendString("   ");
    2520:	81 e9       	ldi	r24, 0x91	; 145
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    2528:	84 e0       	ldi	r24, 0x04	; 4
    252a:	b8 01       	movw	r22, r16
    252c:	a7 01       	movw	r20, r14
    252e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
	lcdClearDisplay();
	lcdSendString("Water Pressure:");
	lcdNewLine();
	lcdSendString("   ");
	lcdPrintFloat(standWaterPressure);
	lcdSendString("  PSi"); 
    2532:	85 e9       	ldi	r24, 0x95	; 149
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	08 95       	ret

00002544 <lcdPrintStandBoostPressure>:
	}	
}

// displays boost pressure in standard units
void lcdPrintStandBoostPressure(float standBoostPressure)
{
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	7b 01       	movw	r14, r22
    254e:	8c 01       	movw	r16, r24
	lcdClearDisplay();
    2550:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <lcdClearDisplay>
	lcdSendString("Boost Pressure:");
    2554:	8d ec       	ldi	r24, 0xCD	; 205
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
	lcdNewLine();
    255c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <lcdNewLine>
	lcdSendString("   ");
    2560:	81 e9       	ldi	r24, 0x91	; 145
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}

// displays floats
void lcdPrintFloat(float x)
{
	rprintfFloat(4, x);
    2568:	84 e0       	ldi	r24, 0x04	; 4
    256a:	b8 01       	movw	r22, r16
    256c:	a7 01       	movw	r20, r14
    256e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rprintfFloat>
	lcdClearDisplay();
	lcdSendString("Boost Pressure:");
	lcdNewLine();
	lcdSendString("   ");
	lcdPrintFloat(standBoostPressure);
	lcdSendString("  PSi"); 
    2572:	85 e9       	ldi	r24, 0x95	; 149
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <lcdSendString>
}
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	08 95       	ret

00002584 <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
    2584:	37 9a       	sbi	0x06, 7	; 6
	cbi(ADCSR, ADFR);				// default to single sample convert mode
    2586:	35 98       	cbi	0x06, 5	; 6
}

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    2588:	86 b1       	in	r24, 0x06	; 6
    258a:	88 7f       	andi	r24, 0xF8	; 248
    258c:	86 60       	ori	r24, 0x06	; 6
    258e:	86 b9       	out	0x06, r24	; 6
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    2590:	87 b1       	in	r24, 0x07	; 7
    2592:	8f 73       	andi	r24, 0x3F	; 63
    2594:	80 64       	ori	r24, 0x40	; 64
    2596:	87 b9       	out	0x07, r24	; 7
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
    2598:	3d 98       	cbi	0x07, 5	; 7

	sbi(ADCSR, ADIE);				// enable ADC interrupts
    259a:	33 9a       	sbi	0x06, 3	; 6

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
    259c:	10 92 fa 03 	sts	0x03FA, r1
	sei();							// turn on interrupts (if not already on)
    25a0:	78 94       	sei
								
	// configure a2d port (PORTA) as input
	// so we can receive analog signals
	DDRA = 0x00;
    25a2:	1a ba       	out	0x1a, r1	; 26
	// make sure pull-up resistors are turned off
	PORTA = 0x00;
    25a4:	1b ba       	out	0x1b, r1	; 27
}
    25a6:	08 95       	ret

000025a8 <a2dOff>:

// turn off a2d converter
void a2dOff(void)
{
	cbi(ADCSR, ADIE);				// disable ADC interrupts
    25a8:	33 98       	cbi	0x06, 3	; 6
	cbi(ADCSR, ADEN);				// disable ADC (turn off ADC power)
    25aa:	37 98       	cbi	0x06, 7	; 6
}
    25ac:	08 95       	ret

000025ae <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
    25ae:	96 b1       	in	r25, 0x06	; 6
    25b0:	98 7f       	andi	r25, 0xF8	; 248
    25b2:	98 2b       	or	r25, r24
    25b4:	96 b9       	out	0x06, r25	; 6
}
    25b6:	08 95       	ret

000025b8 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
    25b8:	97 b1       	in	r25, 0x07	; 7
    25ba:	82 95       	swap	r24
    25bc:	88 0f       	add	r24, r24
    25be:	88 0f       	add	r24, r24
    25c0:	80 7c       	andi	r24, 0xC0	; 192
    25c2:	9f 73       	andi	r25, 0x3F	; 63
    25c4:	98 2b       	or	r25, r24
    25c6:	97 b9       	out	0x07, r25	; 7
}
    25c8:	08 95       	ret

000025ca <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    25ca:	97 b1       	in	r25, 0x07	; 7
    25cc:	8f 71       	andi	r24, 0x1F	; 31
    25ce:	90 7e       	andi	r25, 0xE0	; 224
    25d0:	89 2b       	or	r24, r25
    25d2:	87 b9       	out	0x07, r24	; 7
}
    25d4:	08 95       	ret

000025d6 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
    25d6:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);	// start conversion
    25d8:	36 9a       	sbi	0x06, 6	; 6
}
    25da:	08 95       	ret

000025dc <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
    25dc:	86 b1       	in	r24, 0x06	; 6
}
    25de:	80 74       	andi	r24, 0x40	; 64
    25e0:	08 95       	ret

000025e2 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
    25e2:	10 92 fa 03 	sts	0x03FA, r1
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
    25e6:	97 b1       	in	r25, 0x07	; 7
    25e8:	8f 71       	andi	r24, 0x1F	; 31
    25ea:	90 7e       	andi	r25, 0xE0	; 224
    25ec:	89 2b       	or	r24, r25
    25ee:	87 b9       	out	0x07, r24	; 7
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
    25f0:	34 9a       	sbi	0x06, 4	; 6
	sbi(ADCSR, ADSC);						// start conversion
    25f2:	36 9a       	sbi	0x06, 6	; 6
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
    25f4:	36 99       	sbic	0x06, 6	; 6
    25f6:	fe cf       	rjmp	.-4      	; 0x25f4 <a2dConvert10bit+0x12>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
    25f8:	24 b1       	in	r18, 0x04	; 4
    25fa:	45 b1       	in	r20, 0x05	; 5
    25fc:	94 2f       	mov	r25, r20
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	28 2b       	or	r18, r24
    2604:	39 2b       	or	r19, r25
}
    2606:	c9 01       	movw	r24, r18
    2608:	08 95       	ret

0000260a <a2dConvert8bit>:
// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
    260a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <a2dConvert10bit>
    260e:	96 95       	lsr	r25
    2610:	87 95       	ror	r24
    2612:	96 95       	lsr	r25
    2614:	87 95       	ror	r24
}
    2616:	08 95       	ret

00002618 <__vector_16>:

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
    2618:	1f 92       	push	r1
    261a:	0f 92       	push	r0
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	0f 92       	push	r0
    2620:	11 24       	eor	r1, r1
    2622:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	80 93 fa 03 	sts	0x03FA, r24
}
    262a:	8f 91       	pop	r24
    262c:	0f 90       	pop	r0
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	0f 90       	pop	r0
    2632:	1f 90       	pop	r1
    2634:	18 95       	reti

00002636 <setBoost>:
}

void setBoost(boostCtrl *bstCtrl)
{
	
}
    2636:	08 95       	ret

00002638 <controlBoost>:
	}

}

void controlBoost(boostCtrl *bstCtrl)
{
    2638:	6f 92       	push	r6
    263a:	7f 92       	push	r7
    263c:	8f 92       	push	r8
    263e:	9f 92       	push	r9
    2640:	af 92       	push	r10
    2642:	bf 92       	push	r11
    2644:	cf 92       	push	r12
    2646:	df 92       	push	r13
    2648:	ef 92       	push	r14
    264a:	ff 92       	push	r15
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	ec 01       	movw	r28, r24
	float deltaT;
	float control;
	u16 duty;

	// check if boosting
	if(bstCtrl->boost < 0.5)
    2656:	e8 80       	ld	r14, Y
    2658:	f9 80       	ldd	r15, Y+1	; 0x01
    265a:	0a 81       	ldd	r16, Y+2	; 0x02
    265c:	1b 81       	ldd	r17, Y+3	; 0x03
    265e:	c8 01       	movw	r24, r16
    2660:	b7 01       	movw	r22, r14
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	4c f5       	brge	.+82     	; 0x26c4 <controlBoost+0x8c>
	{
		bstCtrl->integral = 0.0;
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	2c 8b       	std	Y+20, r18	; 0x14
    267c:	3d 8b       	std	Y+21, r19	; 0x15
    267e:	4e 8b       	std	Y+22, r20	; 0x16
    2680:	5f 8b       	std	Y+23, r21	; 0x17
		oldError = 0;
    2682:	20 93 c2 03 	sts	0x03C2, r18
    2686:	30 93 c3 03 	sts	0x03C3, r19
    268a:	40 93 c4 03 	sts	0x03C4, r20
    268e:	50 93 c5 03 	sts	0x03C5, r21
		oldCount = systemCount;
    2692:	80 91 d5 03 	lds	r24, 0x03D5
    2696:	90 91 d6 03 	lds	r25, 0x03D6
    269a:	a0 91 d7 03 	lds	r26, 0x03D7
    269e:	b0 91 d8 03 	lds	r27, 0x03D8
    26a2:	80 93 c6 03 	sts	0x03C6, r24
    26a6:	90 93 c7 03 	sts	0x03C7, r25
    26aa:	a0 93 c8 03 	sts	0x03C8, r26
    26ae:	b0 93 c9 03 	sts	0x03C9, r27
		bstCtrl->dutyCycle = 0.0;
    26b2:	28 87       	std	Y+8, r18	; 0x08
    26b4:	39 87       	std	Y+9, r19	; 0x09
    26b6:	4a 87       	std	Y+10, r20	; 0x0a
    26b8:	5b 87       	std	Y+11, r21	; 0x0b
		timer1PWMASet(0);	
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 cd 08 	call	0x119a	; 0x119a <timer1PWMASet>
    26c2:	38 c1       	rjmp	.+624    	; 0x2934 <controlBoost+0x2fc>
		return;	
	}
	
	if(systemCount == oldCount)
    26c4:	80 91 d5 03 	lds	r24, 0x03D5
    26c8:	90 91 d6 03 	lds	r25, 0x03D6
    26cc:	a0 91 d7 03 	lds	r26, 0x03D7
    26d0:	b0 91 d8 03 	lds	r27, 0x03D8
    26d4:	20 91 c6 03 	lds	r18, 0x03C6
    26d8:	30 91 c7 03 	lds	r19, 0x03C7
    26dc:	40 91 c8 03 	lds	r20, 0x03C8
    26e0:	50 91 c9 03 	lds	r21, 0x03C9
    26e4:	82 17       	cp	r24, r18
    26e6:	93 07       	cpc	r25, r19
    26e8:	a4 07       	cpc	r26, r20
    26ea:	b5 07       	cpc	r27, r21
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <controlBoost+0xb8>
    26ee:	22 c1       	rjmp	.+580    	; 0x2934 <controlBoost+0x2fc>
	{
		return;
	}

	// figure out elpased time
	if(oldCount > systemCount)
    26f0:	80 91 d5 03 	lds	r24, 0x03D5
    26f4:	90 91 d6 03 	lds	r25, 0x03D6
    26f8:	a0 91 d7 03 	lds	r26, 0x03D7
    26fc:	b0 91 d8 03 	lds	r27, 0x03D8
    2700:	82 17       	cp	r24, r18
    2702:	93 07       	cpc	r25, r19
    2704:	a4 07       	cpc	r26, r20
    2706:	b5 07       	cpc	r27, r21
    2708:	80 f4       	brcc	.+32     	; 0x272a <controlBoost+0xf2>
	{
		oldCount = systemCount;
    270a:	80 91 d5 03 	lds	r24, 0x03D5
    270e:	90 91 d6 03 	lds	r25, 0x03D6
    2712:	a0 91 d7 03 	lds	r26, 0x03D7
    2716:	b0 91 d8 03 	lds	r27, 0x03D8
    271a:	80 93 c6 03 	sts	0x03C6, r24
    271e:	90 93 c7 03 	sts	0x03C7, r25
    2722:	a0 93 c8 03 	sts	0x03C8, r26
    2726:	b0 93 c9 03 	sts	0x03C9, r27
	}

	deltaT = ((float)(systemCount - oldCount));
    272a:	60 91 d5 03 	lds	r22, 0x03D5
    272e:	70 91 d6 03 	lds	r23, 0x03D6
    2732:	80 91 d7 03 	lds	r24, 0x03D7
    2736:	90 91 d8 03 	lds	r25, 0x03D8
    273a:	20 91 c6 03 	lds	r18, 0x03C6
    273e:	30 91 c7 03 	lds	r19, 0x03C7
    2742:	40 91 c8 03 	lds	r20, 0x03C8
    2746:	50 91 c9 03 	lds	r21, 0x03C9
    274a:	62 1b       	sub	r22, r18
    274c:	73 0b       	sbc	r23, r19
    274e:	84 0b       	sbc	r24, r20
    2750:	95 0b       	sbc	r25, r21
    2752:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    2756:	3b 01       	movw	r6, r22
    2758:	4c 01       	movw	r8, r24
	
	// figure out error
	error = (bstCtrl->desiredBoost - bstCtrl->boost);
    275a:	6c 81       	ldd	r22, Y+4	; 0x04
    275c:	7d 81       	ldd	r23, Y+5	; 0x05
    275e:	8e 81       	ldd	r24, Y+6	; 0x06
    2760:	9f 81       	ldd	r25, Y+7	; 0x07
    2762:	a8 01       	movw	r20, r16
    2764:	97 01       	movw	r18, r14
    2766:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    276a:	5b 01       	movw	r10, r22
    276c:	6c 01       	movw	r12, r24

	// figure out integral
	bstCtrl->integral += error*deltaT;
    276e:	a4 01       	movw	r20, r8
    2770:	93 01       	movw	r18, r6
    2772:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2776:	2c 89       	ldd	r18, Y+20	; 0x14
    2778:	3d 89       	ldd	r19, Y+21	; 0x15
    277a:	4e 89       	ldd	r20, Y+22	; 0x16
    277c:	5f 89       	ldd	r21, Y+23	; 0x17
    277e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>
    2782:	9b 01       	movw	r18, r22
    2784:	ac 01       	movw	r20, r24
    2786:	6c 8b       	std	Y+20, r22	; 0x14
    2788:	7d 8b       	std	Y+21, r23	; 0x15
    278a:	8e 8b       	std	Y+22, r24	; 0x16
    278c:	9f 8b       	std	Y+23, r25	; 0x17
	//bstCtrl->integral = 0;
	if(bstCtrl->Ki*bstCtrl->integral > 50.0)
    278e:	e8 88       	ldd	r14, Y+16	; 0x10
    2790:	f9 88       	ldd	r15, Y+17	; 0x11
    2792:	0a 89       	ldd	r16, Y+18	; 0x12
    2794:	1b 89       	ldd	r17, Y+19	; 0x13
    2796:	c8 01       	movw	r24, r16
    2798:	b7 01       	movw	r22, r14
    279a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	48 e4       	ldi	r20, 0x48	; 72
    27a4:	52 e4       	ldi	r21, 0x42	; 66
    27a6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	64 f4       	brge	.+24     	; 0x27c6 <controlBoost+0x18e>
	{
		bstCtrl->integral = 50.0/bstCtrl->Ki;
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	88 e4       	ldi	r24, 0x48	; 72
    27b4:	92 e4       	ldi	r25, 0x42	; 66
    27b6:	a8 01       	movw	r20, r16
    27b8:	97 01       	movw	r18, r14
    27ba:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    27be:	6c 8b       	std	Y+20, r22	; 0x14
    27c0:	7d 8b       	std	Y+21, r23	; 0x15
    27c2:	8e 8b       	std	Y+22, r24	; 0x16
    27c4:	9f 8b       	std	Y+23, r25	; 0x17
	}
	if(bstCtrl->Ki*bstCtrl->integral < -50.0)
    27c6:	e8 88       	ldd	r14, Y+16	; 0x10
    27c8:	f9 88       	ldd	r15, Y+17	; 0x11
    27ca:	0a 89       	ldd	r16, Y+18	; 0x12
    27cc:	1b 89       	ldd	r17, Y+19	; 0x13
    27ce:	c8 01       	movw	r24, r16
    27d0:	b7 01       	movw	r22, r14
    27d2:	2c 89       	ldd	r18, Y+20	; 0x14
    27d4:	3d 89       	ldd	r19, Y+21	; 0x15
    27d6:	4e 89       	ldd	r20, Y+22	; 0x16
    27d8:	5f 89       	ldd	r21, Y+23	; 0x17
    27da:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	48 e4       	ldi	r20, 0x48	; 72
    27e4:	52 ec       	ldi	r21, 0xC2	; 194
    27e6:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	64 f4       	brge	.+24     	; 0x2806 <controlBoost+0x1ce>
	{
		bstCtrl->integral = -50.0/bstCtrl->Ki;
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	88 e4       	ldi	r24, 0x48	; 72
    27f4:	92 ec       	ldi	r25, 0xC2	; 194
    27f6:	a8 01       	movw	r20, r16
    27f8:	97 01       	movw	r18, r14
    27fa:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    27fe:	6c 8b       	std	Y+20, r22	; 0x14
    2800:	7d 8b       	std	Y+21, r23	; 0x15
    2802:	8e 8b       	std	Y+22, r24	; 0x16
    2804:	9f 8b       	std	Y+23, r25	; 0x17

	// figure out derivative
	derivative = (error-oldError)/deltaT;

	// figure out control signal
	control = bstCtrl->Kp*error + bstCtrl->Ki*bstCtrl->integral + bstCtrl->Kd*derivative;
    2806:	c6 01       	movw	r24, r12
    2808:	b5 01       	movw	r22, r10
    280a:	2c 85       	ldd	r18, Y+12	; 0x0c
    280c:	3d 85       	ldd	r19, Y+13	; 0x0d
    280e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2810:	5f 85       	ldd	r21, Y+15	; 0x0f
    2812:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2816:	7b 01       	movw	r14, r22
    2818:	8c 01       	movw	r16, r24
    281a:	68 89       	ldd	r22, Y+16	; 0x10
    281c:	79 89       	ldd	r23, Y+17	; 0x11
    281e:	8a 89       	ldd	r24, Y+18	; 0x12
    2820:	9b 89       	ldd	r25, Y+19	; 0x13
    2822:	2c 89       	ldd	r18, Y+20	; 0x14
    2824:	3d 89       	ldd	r19, Y+21	; 0x15
    2826:	4e 89       	ldd	r20, Y+22	; 0x16
    2828:	5f 89       	ldd	r21, Y+23	; 0x17
    282a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    282e:	9b 01       	movw	r18, r22
    2830:	ac 01       	movw	r20, r24
    2832:	c8 01       	movw	r24, r16
    2834:	b7 01       	movw	r22, r14
    2836:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>
    283a:	7b 01       	movw	r14, r22
    283c:	8c 01       	movw	r16, r24
    283e:	c6 01       	movw	r24, r12
    2840:	b5 01       	movw	r22, r10
    2842:	20 91 c2 03 	lds	r18, 0x03C2
    2846:	30 91 c3 03 	lds	r19, 0x03C3
    284a:	40 91 c4 03 	lds	r20, 0x03C4
    284e:	50 91 c5 03 	lds	r21, 0x03C5
    2852:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2856:	a4 01       	movw	r20, r8
    2858:	93 01       	movw	r18, r6
    285a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    285e:	28 8d       	ldd	r18, Y+24	; 0x18
    2860:	39 8d       	ldd	r19, Y+25	; 0x19
    2862:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2864:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2866:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    286a:	9b 01       	movw	r18, r22
    286c:	ac 01       	movw	r20, r24
    286e:	c8 01       	movw	r24, r16
    2870:	b7 01       	movw	r22, r14
    2872:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>

	// add open loop offset
	control += 50;
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	48 e4       	ldi	r20, 0x48	; 72
    287c:	52 e4       	ldi	r21, 0x42	; 66
    287e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>
    2882:	7b 01       	movw	r14, r22
    2884:	8c 01       	movw	r16, r24

	if(control < 0)
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	5c f4       	brge	.+22     	; 0x28ac <controlBoost+0x274>
    2896:	0f 2e       	mov	r0, r31
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	ef 2e       	mov	r14, r31
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	ff 2e       	mov	r15, r31
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	0f 2f       	mov	r16, r31
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	1f 2f       	mov	r17, r31
    28a8:	f0 2d       	mov	r31, r0
    28aa:	14 c0       	rjmp	.+40     	; 0x28d4 <controlBoost+0x29c>
		control = 0;
	if(control > 100)
    28ac:	c8 01       	movw	r24, r16
    28ae:	b7 01       	movw	r22, r14
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	48 ec       	ldi	r20, 0xC8	; 200
    28b6:	52 e4       	ldi	r21, 0x42	; 66
    28b8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	54 f4       	brge	.+20     	; 0x28d4 <controlBoost+0x29c>
    28c0:	0f 2e       	mov	r0, r31
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	ef 2e       	mov	r14, r31
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	ff 2e       	mov	r15, r31
    28ca:	f8 ec       	ldi	r31, 0xC8	; 200
    28cc:	0f 2f       	mov	r16, r31
    28ce:	f2 e4       	ldi	r31, 0x42	; 66
    28d0:	1f 2f       	mov	r17, r31
    28d2:	f0 2d       	mov	r31, r0
		control = 100;
	
	bstCtrl->dutyCycle = control;
    28d4:	e8 86       	std	Y+8, r14	; 0x08
    28d6:	f9 86       	std	Y+9, r15	; 0x09
    28d8:	0a 87       	std	Y+10, r16	; 0x0a
    28da:	1b 87       	std	Y+11, r17	; 0x0b

	control = control/100*((float)PWM_SCALER);
    28dc:	c8 01       	movw	r24, r16
    28de:	b7 01       	movw	r22, r14
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	48 ec       	ldi	r20, 0xC8	; 200
    28e6:	52 e4       	ldi	r21, 0x42	; 66
    28e8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
	duty = (u16)control;
	
	timer1PWMASet(control);										// set duty cycle
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	38 ed       	ldi	r19, 0xD8	; 216
    28f0:	46 e5       	ldi	r20, 0x56	; 86
    28f2:	56 e4       	ldi	r21, 0x46	; 70
    28f4:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    28f8:	0e 94 a1 18 	call	0x3142	; 0x3142 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	0e 94 cd 08 	call	0x119a	; 0x119a <timer1PWMASet>
	
	oldCount = systemCount;
    2904:	80 91 d5 03 	lds	r24, 0x03D5
    2908:	90 91 d6 03 	lds	r25, 0x03D6
    290c:	a0 91 d7 03 	lds	r26, 0x03D7
    2910:	b0 91 d8 03 	lds	r27, 0x03D8
    2914:	80 93 c6 03 	sts	0x03C6, r24
    2918:	90 93 c7 03 	sts	0x03C7, r25
    291c:	a0 93 c8 03 	sts	0x03C8, r26
    2920:	b0 93 c9 03 	sts	0x03C9, r27
	oldError = error;
    2924:	a0 92 c2 03 	sts	0x03C2, r10
    2928:	b0 92 c3 03 	sts	0x03C3, r11
    292c:	c0 92 c4 03 	sts	0x03C4, r12
    2930:	d0 92 c5 03 	sts	0x03C5, r13
}
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	df 90       	pop	r13
    2942:	cf 90       	pop	r12
    2944:	bf 90       	pop	r11
    2946:	af 90       	pop	r10
    2948:	9f 90       	pop	r9
    294a:	8f 90       	pop	r8
    294c:	7f 90       	pop	r7
    294e:	6f 90       	pop	r6
    2950:	08 95       	ret

00002952 <readBoost>:
{
	
}

void readBoost(boostCtrl *bstCtrl)
{
    2952:	ef 92       	push	r14
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	8c 01       	movw	r16, r24
	u16 temp;
	a2dSetChannel(BOOST_CH);							// set a2d to boost sensor 
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <a2dSetChannel>
	temp = a2dConvert10bit(BOOST_CH);					// read current boost
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <a2dConvert10bit>
	
	// conversion for boost pressure
	bstCtrl->boost = (((float)temp)/1024*5*0.6479 - 0.8563)*14.22;
    2968:	a0 e0       	ldi	r26, 0x00	; 0
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5a e3       	ldi	r21, 0x3A	; 58
    297c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 ea       	ldi	r20, 0xA0	; 160
    2986:	50 e4       	ldi	r21, 0x40	; 64
    2988:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    298c:	26 ec       	ldi	r18, 0xC6	; 198
    298e:	3c ed       	ldi	r19, 0xDC	; 220
    2990:	45 e2       	ldi	r20, 0x25	; 37
    2992:	5f e3       	ldi	r21, 0x3F	; 63
    2994:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2998:	2a e7       	ldi	r18, 0x7A	; 122
    299a:	36 e3       	ldi	r19, 0x36	; 54
    299c:	4b e5       	ldi	r20, 0x5B	; 91
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    29a4:	2f e1       	ldi	r18, 0x1F	; 31
    29a6:	35 e8       	ldi	r19, 0x85	; 133
    29a8:	43 e6       	ldi	r20, 0x63	; 99
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    29b0:	f8 01       	movw	r30, r16
    29b2:	60 83       	st	Z, r22
    29b4:	71 83       	std	Z+1, r23	; 0x01
    29b6:	82 83       	std	Z+2, r24	; 0x02
    29b8:	93 83       	std	Z+3, r25	; 0x03


	// boost is too high
	if(((bstCtrl->boost - bstCtrl->desiredBoost) > 1.00) )
    29ba:	24 81       	ldd	r18, Z+4	; 0x04
    29bc:	35 81       	ldd	r19, Z+5	; 0x05
    29be:	46 81       	ldd	r20, Z+6	; 0x06
    29c0:	57 81       	ldd	r21, Z+7	; 0x07
    29c2:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    29c6:	7b 01       	movw	r14, r22
    29c8:	8c 01       	movw	r16, r24
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e8       	ldi	r20, 0x80	; 128
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	9c f4       	brge	.+38     	; 0x2a00 <readBoost+0xae>
	{
		// turn on yellow 
		if(((bstCtrl->boost - bstCtrl->desiredBoost) < 2.00))
    29da:	c8 01       	movw	r24, r16
    29dc:	b7 01       	movw	r22, r14
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	50 e4       	ldi	r21, 0x40	; 64
    29e6:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <readBoost+0xa6>
		{
			PORTB |= B_G + B_B;
    29ee:	88 b3       	in	r24, 0x18	; 24
    29f0:	86 60       	ori	r24, 0x06	; 6
    29f2:	88 bb       	out	0x18, r24	; 24
			PORTB &= ~B_R;
    29f4:	c0 98       	cbi	0x18, 0	; 24
    29f6:	16 c0       	rjmp	.+44     	; 0x2a24 <readBoost+0xd2>
		}

		// turn on red
		else
		{
			PORTB |= B_R;
    29f8:	c0 9a       	sbi	0x18, 0	; 24
			PORTB &= ~(B_G + B_B);		
    29fa:	88 b3       	in	r24, 0x18	; 24
    29fc:	89 7f       	andi	r24, 0xF9	; 249
    29fe:	11 c0       	rjmp	.+34     	; 0x2a22 <readBoost+0xd0>
		}
	}
	
	// boost is too low
	else if(((bstCtrl->boost - bstCtrl->desiredBoost) < -1.00) )
    2a00:	c8 01       	movw	r24, r16
    2a02:	b7 01       	movw	r22, r14
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f eb       	ldi	r21, 0xBF	; 191
    2a0c:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	24 f4       	brge	.+8      	; 0x2a1c <readBoost+0xca>
	{
		// turn on blue
		PORTB |= B_B;
    2a14:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(B_R + B_G);
    2a16:	88 b3       	in	r24, 0x18	; 24
    2a18:	8c 7f       	andi	r24, 0xFC	; 252
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <readBoost+0xd0>

	// boost at desired level
	else
	{
		// turn on green
		PORTB |= B_G;
    2a1c:	c1 9a       	sbi	0x18, 1	; 24
		PORTB &= ~(B_R + B_B);
    2a1e:	88 b3       	in	r24, 0x18	; 24
    2a20:	8a 7f       	andi	r24, 0xFA	; 250
    2a22:	88 bb       	out	0x18, r24	; 24
	}

}
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	08 95       	ret

00002a2e <initBoost>:
extern float EEMEM userBoostKi;
extern float EEMEM userBoostKd;


void initBoost(boostCtrl *bstCtrl)
{
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <initBoost+0xe>
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <initBoost+0x10>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	8c 01       	movw	r16, r24
	float val;
	eeprom_read_block((void*)&val, (const void*)&userBoost, 4);
    2a44:	7e 01       	movw	r14, r28
    2a46:	08 94       	sec
    2a48:	e1 1c       	adc	r14, r1
    2a4a:	f1 1c       	adc	r15, r1
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	64 e0       	ldi	r22, 0x04	; 4
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	44 e0       	ldi	r20, 0x04	; 4
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	bstCtrl->desiredBoost = val;						// set desired boost level;
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a60:	bc 81       	ldd	r27, Y+4	; 0x04
    2a62:	f8 01       	movw	r30, r16
    2a64:	84 83       	std	Z+4, r24	; 0x04
    2a66:	95 83       	std	Z+5, r25	; 0x05
    2a68:	a6 83       	std	Z+6, r26	; 0x06
    2a6a:	b7 83       	std	Z+7, r27	; 0x07
	
	eeprom_read_block((void*)&val, (const void*)&userBoostKp, 4);	
    2a6c:	c7 01       	movw	r24, r14
    2a6e:	68 e0       	ldi	r22, 0x08	; 8
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	44 e0       	ldi	r20, 0x04	; 4
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	bstCtrl->Kp = val;									// set proportional multiplier
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a80:	bc 81       	ldd	r27, Y+4	; 0x04
    2a82:	f8 01       	movw	r30, r16
    2a84:	84 87       	std	Z+12, r24	; 0x0c
    2a86:	95 87       	std	Z+13, r25	; 0x0d
    2a88:	a6 87       	std	Z+14, r26	; 0x0e
    2a8a:	b7 87       	std	Z+15, r27	; 0x0f

	eeprom_read_block((void*)&val, (const void*)&userBoostKi, 4);		
    2a8c:	c7 01       	movw	r24, r14
    2a8e:	6c e0       	ldi	r22, 0x0C	; 12
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	44 e0       	ldi	r20, 0x04	; 4
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	bstCtrl->Ki = val;									// set integral multiplier
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2aa0:	bc 81       	ldd	r27, Y+4	; 0x04
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	80 8b       	std	Z+16, r24	; 0x10
    2aa6:	91 8b       	std	Z+17, r25	; 0x11
    2aa8:	a2 8b       	std	Z+18, r26	; 0x12
    2aaa:	b3 8b       	std	Z+19, r27	; 0x13
	bstCtrl->integral = 0;								// reset integral
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 e0       	ldi	r26, 0x00	; 0
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	84 8b       	std	Z+20, r24	; 0x14
    2ab6:	95 8b       	std	Z+21, r25	; 0x15
    2ab8:	a6 8b       	std	Z+22, r26	; 0x16
    2aba:	b7 8b       	std	Z+23, r27	; 0x17

	eeprom_read_block((void*)&val, (const void*)&userBoostKd, 4);	
    2abc:	c7 01       	movw	r24, r14
    2abe:	60 e1       	ldi	r22, 0x10	; 16
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	44 e0       	ldi	r20, 0x04	; 4
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	bstCtrl->Kd = val;									// set derivative multiplier
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	ab 81       	ldd	r26, Y+3	; 0x03
    2ad0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	80 8f       	std	Z+24, r24	; 0x18
    2ad6:	91 8f       	std	Z+25, r25	; 0x19
    2ad8:	a2 8f       	std	Z+26, r26	; 0x1a
    2ada:	b3 8f       	std	Z+27, r27	; 0x1b
	readBoost(bstCtrl);									// read the boost sensor
    2adc:	c8 01       	movw	r24, r16
    2ade:	0e 94 a9 14 	call	0x2952	; 0x2952 <readBoost>
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	08 95       	ret

00002af8 <readAccel>:
#include "a2d.h"
#include "accel.h"


void readAccel(TriAx *accel)
{
    2af8:	4f 92       	push	r4
    2afa:	5f 92       	push	r5
    2afc:	6f 92       	push	r6
    2afe:	7f 92       	push	r7
    2b00:	8f 92       	push	r8
    2b02:	9f 92       	push	r9
    2b04:	af 92       	push	r10
    2b06:	bf 92       	push	r11
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	2c 01       	movw	r4, r24
	u16 voltageAx, voltageAy, voltageAz;

	// read the accelerometer channels 
	a2dSetChannel(AX_CH);
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	0e 94 e5 12 	call	0x25ca	; 0x25ca <a2dSetChannel>
	voltageAx = a2dConvert10bit(AX_CH);
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <a2dConvert10bit>
    2b22:	7c 01       	movw	r14, r24
	a2dSetChannel(AY_CH);
    2b24:	83 e0       	ldi	r24, 0x03	; 3
    2b26:	0e 94 e5 12 	call	0x25ca	; 0x25ca <a2dSetChannel>
	voltageAy = a2dConvert10bit(AY_CH);
    2b2a:	83 e0       	ldi	r24, 0x03	; 3
    2b2c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <a2dConvert10bit>
    2b30:	5c 01       	movw	r10, r24
	a2dSetChannel(AZ_CH);
    2b32:	84 e0       	ldi	r24, 0x04	; 4
    2b34:	0e 94 e5 12 	call	0x25ca	; 0x25ca <a2dSetChannel>
	voltageAz = a2dConvert10bit(AZ_CH);
    2b38:	84 e0       	ldi	r24, 0x04	; 4
    2b3a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <a2dConvert10bit>
    2b3e:	3c 01       	movw	r6, r24

	// update accelerometer struct
	accel->x = ((float)voltageAx)/1024*5/0.6 - 2.75;		
    2b40:	00 e0       	ldi	r16, 0x00	; 0
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	c8 01       	movw	r24, r16
    2b46:	b7 01       	movw	r22, r14
    2b48:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e8       	ldi	r20, 0x80	; 128
    2b52:	5a e3       	ldi	r21, 0x3A	; 58
    2b54:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 ea       	ldi	r20, 0xA0	; 160
    2b5e:	50 e4       	ldi	r21, 0x40	; 64
    2b60:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2b64:	2a e9       	ldi	r18, 0x9A	; 154
    2b66:	39 e9       	ldi	r19, 0x99	; 153
    2b68:	49 e1       	ldi	r20, 0x19	; 25
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e3       	ldi	r20, 0x30	; 48
    2b76:	50 e4       	ldi	r21, 0x40	; 64
    2b78:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2b7c:	f2 01       	movw	r30, r4
    2b7e:	60 83       	st	Z, r22
    2b80:	71 83       	std	Z+1, r23	; 0x01
    2b82:	82 83       	std	Z+2, r24	; 0x02
    2b84:	93 83       	std	Z+3, r25	; 0x03
	accel->y = ((float)voltageAy)/1024*5/0.6 - 2.75;					
    2b86:	cc 24       	eor	r12, r12
    2b88:	dd 24       	eor	r13, r13
    2b8a:	c6 01       	movw	r24, r12
    2b8c:	b5 01       	movw	r22, r10
    2b8e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5a e3       	ldi	r21, 0x3A	; 58
    2b9a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 ea       	ldi	r20, 0xA0	; 160
    2ba4:	50 e4       	ldi	r21, 0x40	; 64
    2ba6:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2baa:	2a e9       	ldi	r18, 0x9A	; 154
    2bac:	39 e9       	ldi	r19, 0x99	; 153
    2bae:	49 e1       	ldi	r20, 0x19	; 25
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e3       	ldi	r20, 0x30	; 48
    2bbc:	50 e4       	ldi	r21, 0x40	; 64
    2bbe:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2bc2:	f2 01       	movw	r30, r4
    2bc4:	64 83       	std	Z+4, r22	; 0x04
    2bc6:	75 83       	std	Z+5, r23	; 0x05
    2bc8:	86 83       	std	Z+6, r24	; 0x06
    2bca:	97 83       	std	Z+7, r25	; 0x07
	accel->z = ((float)voltageAz)/1024*5/0.6 - 2.75;		
    2bcc:	88 24       	eor	r8, r8
    2bce:	99 24       	eor	r9, r9
    2bd0:	c4 01       	movw	r24, r8
    2bd2:	b3 01       	movw	r22, r6
    2bd4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e8       	ldi	r20, 0x80	; 128
    2bde:	5a e3       	ldi	r21, 0x3A	; 58
    2be0:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 ea       	ldi	r20, 0xA0	; 160
    2bea:	50 e4       	ldi	r21, 0x40	; 64
    2bec:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2bf0:	2a e9       	ldi	r18, 0x9A	; 154
    2bf2:	39 e9       	ldi	r19, 0x99	; 153
    2bf4:	49 e1       	ldi	r20, 0x19	; 25
    2bf6:	5f e3       	ldi	r21, 0x3F	; 63
    2bf8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e3       	ldi	r20, 0x30	; 48
    2c02:	50 e4       	ldi	r21, 0x40	; 64
    2c04:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2c08:	f2 01       	movw	r30, r4
    2c0a:	60 87       	std	Z+8, r22	; 0x08
    2c0c:	71 87       	std	Z+9, r23	; 0x09
    2c0e:	82 87       	std	Z+10, r24	; 0x0a
    2c10:	93 87       	std	Z+11, r25	; 0x0b
}
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	df 90       	pop	r13
    2c1c:	cf 90       	pop	r12
    2c1e:	bf 90       	pop	r11
    2c20:	af 90       	pop	r10
    2c22:	9f 90       	pop	r9
    2c24:	8f 90       	pop	r8
    2c26:	7f 90       	pop	r7
    2c28:	6f 90       	pop	r6
    2c2a:	5f 90       	pop	r5
    2c2c:	4f 90       	pop	r4
    2c2e:	08 95       	ret

00002c30 <setWM>:
}

void setWM(waterMethCtrl *wmCtrl)
{
	
}
    2c30:	08 95       	ret

00002c32 <controlWM>:
	}

}

void controlWM(waterMethCtrl *wmCtrl)
{
    2c32:	6f 92       	push	r6
    2c34:	7f 92       	push	r7
    2c36:	8f 92       	push	r8
    2c38:	9f 92       	push	r9
    2c3a:	af 92       	push	r10
    2c3c:	bf 92       	push	r11
    2c3e:	cf 92       	push	r12
    2c40:	df 92       	push	r13
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	ec 01       	movw	r28, r24
	float deltaT;
	float control;
	u16 duty;

	// check if boosting
	if(wmCtrl->boost < wmCtrl->onBoost)
    2c50:	6c 81       	ldd	r22, Y+4	; 0x04
    2c52:	7d 81       	ldd	r23, Y+5	; 0x05
    2c54:	8e 81       	ldd	r24, Y+6	; 0x06
    2c56:	9f 81       	ldd	r25, Y+7	; 0x07
    2c58:	28 85       	ldd	r18, Y+8	; 0x08
    2c5a:	39 85       	ldd	r19, Y+9	; 0x09
    2c5c:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c5e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2c60:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	4c f5       	brge	.+82     	; 0x2cba <controlWM+0x88>
	{
		wmCtrl->integral = 0.0;
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	2c 8f       	std	Y+28, r18	; 0x1c
    2c72:	3d 8f       	std	Y+29, r19	; 0x1d
    2c74:	4e 8f       	std	Y+30, r20	; 0x1e
    2c76:	5f 8f       	std	Y+31, r21	; 0x1f
		oldError = 0;
    2c78:	20 93 ca 03 	sts	0x03CA, r18
    2c7c:	30 93 cb 03 	sts	0x03CB, r19
    2c80:	40 93 cc 03 	sts	0x03CC, r20
    2c84:	50 93 cd 03 	sts	0x03CD, r21
		oldCount = systemCount;
    2c88:	80 91 d5 03 	lds	r24, 0x03D5
    2c8c:	90 91 d6 03 	lds	r25, 0x03D6
    2c90:	a0 91 d7 03 	lds	r26, 0x03D7
    2c94:	b0 91 d8 03 	lds	r27, 0x03D8
    2c98:	80 93 ce 03 	sts	0x03CE, r24
    2c9c:	90 93 cf 03 	sts	0x03CF, r25
    2ca0:	a0 93 d0 03 	sts	0x03D0, r26
    2ca4:	b0 93 d1 03 	sts	0x03D1, r27
		wmCtrl->dutyCycle = 0.0;
    2ca8:	28 8b       	std	Y+16, r18	; 0x10
    2caa:	39 8b       	std	Y+17, r19	; 0x11
    2cac:	4a 8b       	std	Y+18, r20	; 0x12
    2cae:	5b 8b       	std	Y+19, r21	; 0x13
		timer1PWMBSet(0);	
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <timer1PWMBSet>
    2cb8:	3a c1       	rjmp	.+628    	; 0x2f2e <controlWM+0x2fc>
		return;	
	}
	
	if(systemCount == oldCount)
    2cba:	80 91 d5 03 	lds	r24, 0x03D5
    2cbe:	90 91 d6 03 	lds	r25, 0x03D6
    2cc2:	a0 91 d7 03 	lds	r26, 0x03D7
    2cc6:	b0 91 d8 03 	lds	r27, 0x03D8
    2cca:	20 91 ce 03 	lds	r18, 0x03CE
    2cce:	30 91 cf 03 	lds	r19, 0x03CF
    2cd2:	40 91 d0 03 	lds	r20, 0x03D0
    2cd6:	50 91 d1 03 	lds	r21, 0x03D1
    2cda:	82 17       	cp	r24, r18
    2cdc:	93 07       	cpc	r25, r19
    2cde:	a4 07       	cpc	r26, r20
    2ce0:	b5 07       	cpc	r27, r21
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <controlWM+0xb4>
    2ce4:	24 c1       	rjmp	.+584    	; 0x2f2e <controlWM+0x2fc>
	{
		return;
	}

	// figure out elpased time
	if(oldCount > systemCount)
    2ce6:	80 91 d5 03 	lds	r24, 0x03D5
    2cea:	90 91 d6 03 	lds	r25, 0x03D6
    2cee:	a0 91 d7 03 	lds	r26, 0x03D7
    2cf2:	b0 91 d8 03 	lds	r27, 0x03D8
    2cf6:	82 17       	cp	r24, r18
    2cf8:	93 07       	cpc	r25, r19
    2cfa:	a4 07       	cpc	r26, r20
    2cfc:	b5 07       	cpc	r27, r21
    2cfe:	80 f4       	brcc	.+32     	; 0x2d20 <controlWM+0xee>
	{
		oldCount = systemCount;
    2d00:	80 91 d5 03 	lds	r24, 0x03D5
    2d04:	90 91 d6 03 	lds	r25, 0x03D6
    2d08:	a0 91 d7 03 	lds	r26, 0x03D7
    2d0c:	b0 91 d8 03 	lds	r27, 0x03D8
    2d10:	80 93 ce 03 	sts	0x03CE, r24
    2d14:	90 93 cf 03 	sts	0x03CF, r25
    2d18:	a0 93 d0 03 	sts	0x03D0, r26
    2d1c:	b0 93 d1 03 	sts	0x03D1, r27
	}

	deltaT = ((float)(systemCount - oldCount));
    2d20:	60 91 d5 03 	lds	r22, 0x03D5
    2d24:	70 91 d6 03 	lds	r23, 0x03D6
    2d28:	80 91 d7 03 	lds	r24, 0x03D7
    2d2c:	90 91 d8 03 	lds	r25, 0x03D8
    2d30:	20 91 ce 03 	lds	r18, 0x03CE
    2d34:	30 91 cf 03 	lds	r19, 0x03CF
    2d38:	40 91 d0 03 	lds	r20, 0x03D0
    2d3c:	50 91 d1 03 	lds	r21, 0x03D1
    2d40:	62 1b       	sub	r22, r18
    2d42:	73 0b       	sbc	r23, r19
    2d44:	84 0b       	sbc	r24, r20
    2d46:	95 0b       	sbc	r25, r21
    2d48:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    2d4c:	3b 01       	movw	r6, r22
    2d4e:	4c 01       	movw	r8, r24
	
	// figure out error
	error = (wmCtrl->desiredPressure - wmCtrl->pressure);
    2d50:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d52:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d58:	28 81       	ld	r18, Y
    2d5a:	39 81       	ldd	r19, Y+1	; 0x01
    2d5c:	4a 81       	ldd	r20, Y+2	; 0x02
    2d5e:	5b 81       	ldd	r21, Y+3	; 0x03
    2d60:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2d64:	5b 01       	movw	r10, r22
    2d66:	6c 01       	movw	r12, r24

	// figure out integral
	wmCtrl->integral += error*deltaT;
    2d68:	a4 01       	movw	r20, r8
    2d6a:	93 01       	movw	r18, r6
    2d6c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2d70:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2d72:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2d74:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2d76:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2d78:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>
    2d7c:	9b 01       	movw	r18, r22
    2d7e:	ac 01       	movw	r20, r24
    2d80:	6c 8f       	std	Y+28, r22	; 0x1c
    2d82:	7d 8f       	std	Y+29, r23	; 0x1d
    2d84:	8e 8f       	std	Y+30, r24	; 0x1e
    2d86:	9f 8f       	std	Y+31, r25	; 0x1f
	//wmCtrl->integral = 0;
	if(wmCtrl->Ki*wmCtrl->integral > 50.0)
    2d88:	e8 8c       	ldd	r14, Y+24	; 0x18
    2d8a:	f9 8c       	ldd	r15, Y+25	; 0x19
    2d8c:	0a 8d       	ldd	r16, Y+26	; 0x1a
    2d8e:	1b 8d       	ldd	r17, Y+27	; 0x1b
    2d90:	c8 01       	movw	r24, r16
    2d92:	b7 01       	movw	r22, r14
    2d94:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	48 e4       	ldi	r20, 0x48	; 72
    2d9e:	52 e4       	ldi	r21, 0x42	; 66
    2da0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
    2da4:	18 16       	cp	r1, r24
    2da6:	64 f4       	brge	.+24     	; 0x2dc0 <controlWM+0x18e>
	{
		wmCtrl->integral = 50.0/wmCtrl->Ki;
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	88 e4       	ldi	r24, 0x48	; 72
    2dae:	92 e4       	ldi	r25, 0x42	; 66
    2db0:	a8 01       	movw	r20, r16
    2db2:	97 01       	movw	r18, r14
    2db4:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    2db8:	6c 8f       	std	Y+28, r22	; 0x1c
    2dba:	7d 8f       	std	Y+29, r23	; 0x1d
    2dbc:	8e 8f       	std	Y+30, r24	; 0x1e
    2dbe:	9f 8f       	std	Y+31, r25	; 0x1f
	}
	if(wmCtrl->Ki*wmCtrl->integral < -50.0)
    2dc0:	e8 8c       	ldd	r14, Y+24	; 0x18
    2dc2:	f9 8c       	ldd	r15, Y+25	; 0x19
    2dc4:	0a 8d       	ldd	r16, Y+26	; 0x1a
    2dc6:	1b 8d       	ldd	r17, Y+27	; 0x1b
    2dc8:	c8 01       	movw	r24, r16
    2dca:	b7 01       	movw	r22, r14
    2dcc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2dce:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2dd0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2dd2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2dd4:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	48 e4       	ldi	r20, 0x48	; 72
    2dde:	52 ec       	ldi	r21, 0xC2	; 194
    2de0:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    2de4:	88 23       	and	r24, r24
    2de6:	64 f4       	brge	.+24     	; 0x2e00 <controlWM+0x1ce>
	{
		wmCtrl->integral = -50.0/wmCtrl->Ki;
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	88 e4       	ldi	r24, 0x48	; 72
    2dee:	92 ec       	ldi	r25, 0xC2	; 194
    2df0:	a8 01       	movw	r20, r16
    2df2:	97 01       	movw	r18, r14
    2df4:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    2df8:	6c 8f       	std	Y+28, r22	; 0x1c
    2dfa:	7d 8f       	std	Y+29, r23	; 0x1d
    2dfc:	8e 8f       	std	Y+30, r24	; 0x1e
    2dfe:	9f 8f       	std	Y+31, r25	; 0x1f

	// figure out derivative
	derivative = (error-oldError)/deltaT;

	// figure out control signal
	control = wmCtrl->Kp*error + wmCtrl->Ki*wmCtrl->integral + wmCtrl->Kd*derivative;
    2e00:	c6 01       	movw	r24, r12
    2e02:	b5 01       	movw	r22, r10
    2e04:	2c 89       	ldd	r18, Y+20	; 0x14
    2e06:	3d 89       	ldd	r19, Y+21	; 0x15
    2e08:	4e 89       	ldd	r20, Y+22	; 0x16
    2e0a:	5f 89       	ldd	r21, Y+23	; 0x17
    2e0c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2e10:	7b 01       	movw	r14, r22
    2e12:	8c 01       	movw	r16, r24
    2e14:	68 8d       	ldd	r22, Y+24	; 0x18
    2e16:	79 8d       	ldd	r23, Y+25	; 0x19
    2e18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e1c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2e1e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e20:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e22:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e24:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2e28:	9b 01       	movw	r18, r22
    2e2a:	ac 01       	movw	r20, r24
    2e2c:	c8 01       	movw	r24, r16
    2e2e:	b7 01       	movw	r22, r14
    2e30:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>
    2e34:	7b 01       	movw	r14, r22
    2e36:	8c 01       	movw	r16, r24
    2e38:	c6 01       	movw	r24, r12
    2e3a:	b5 01       	movw	r22, r10
    2e3c:	20 91 ca 03 	lds	r18, 0x03CA
    2e40:	30 91 cb 03 	lds	r19, 0x03CB
    2e44:	40 91 cc 03 	lds	r20, 0x03CC
    2e48:	50 91 cd 03 	lds	r21, 0x03CD
    2e4c:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2e50:	a4 01       	movw	r20, r8
    2e52:	93 01       	movw	r18, r6
    2e54:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    2e58:	28 a1       	ldd	r18, Y+32	; 0x20
    2e5a:	39 a1       	ldd	r19, Y+33	; 0x21
    2e5c:	4a a1       	ldd	r20, Y+34	; 0x22
    2e5e:	5b a1       	ldd	r21, Y+35	; 0x23
    2e60:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	c8 01       	movw	r24, r16
    2e6a:	b7 01       	movw	r22, r14
    2e6c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>

	// add open loop offset
	control += 50;
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	48 e4       	ldi	r20, 0x48	; 72
    2e76:	52 e4       	ldi	r21, 0x42	; 66
    2e78:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__addsf3>
    2e7c:	7b 01       	movw	r14, r22
    2e7e:	8c 01       	movw	r16, r24

	if(control < 0)
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	5c f4       	brge	.+22     	; 0x2ea6 <controlWM+0x274>
    2e90:	0f 2e       	mov	r0, r31
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	ef 2e       	mov	r14, r31
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	ff 2e       	mov	r15, r31
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	0f 2f       	mov	r16, r31
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	1f 2f       	mov	r17, r31
    2ea2:	f0 2d       	mov	r31, r0
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <controlWM+0x29c>
		control = 0;
	if(control > 100)
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	b7 01       	movw	r22, r14
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	48 ec       	ldi	r20, 0xC8	; 200
    2eb0:	52 e4       	ldi	r21, 0x42	; 66
    2eb2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	54 f4       	brge	.+20     	; 0x2ece <controlWM+0x29c>
    2eba:	0f 2e       	mov	r0, r31
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	ef 2e       	mov	r14, r31
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	ff 2e       	mov	r15, r31
    2ec4:	f8 ec       	ldi	r31, 0xC8	; 200
    2ec6:	0f 2f       	mov	r16, r31
    2ec8:	f2 e4       	ldi	r31, 0x42	; 66
    2eca:	1f 2f       	mov	r17, r31
    2ecc:	f0 2d       	mov	r31, r0
		control = 100;
	
	wmCtrl->dutyCycle = control;
    2ece:	e8 8a       	std	Y+16, r14	; 0x10
    2ed0:	f9 8a       	std	Y+17, r15	; 0x11
    2ed2:	0a 8b       	std	Y+18, r16	; 0x12
    2ed4:	1b 8b       	std	Y+19, r17	; 0x13

	control = control/100*((float)PWM_SCALER);
    2ed6:	c8 01       	movw	r24, r16
    2ed8:	b7 01       	movw	r22, r14
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	48 ec       	ldi	r20, 0xC8	; 200
    2ee0:	52 e4       	ldi	r21, 0x42	; 66
    2ee2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
	duty = (u16)control;
	
	timer1PWMBSet(control);										// set duty cycle
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	38 ed       	ldi	r19, 0xD8	; 216
    2eea:	46 e5       	ldi	r20, 0x56	; 86
    2eec:	56 e4       	ldi	r21, 0x46	; 70
    2eee:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2ef2:	0e 94 a1 18 	call	0x3142	; 0x3142 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <timer1PWMBSet>
	
	oldCount = systemCount;
    2efe:	80 91 d5 03 	lds	r24, 0x03D5
    2f02:	90 91 d6 03 	lds	r25, 0x03D6
    2f06:	a0 91 d7 03 	lds	r26, 0x03D7
    2f0a:	b0 91 d8 03 	lds	r27, 0x03D8
    2f0e:	80 93 ce 03 	sts	0x03CE, r24
    2f12:	90 93 cf 03 	sts	0x03CF, r25
    2f16:	a0 93 d0 03 	sts	0x03D0, r26
    2f1a:	b0 93 d1 03 	sts	0x03D1, r27
	oldError = error;
    2f1e:	a0 92 ca 03 	sts	0x03CA, r10
    2f22:	b0 92 cb 03 	sts	0x03CB, r11
    2f26:	c0 92 cc 03 	sts	0x03CC, r12
    2f2a:	d0 92 cd 03 	sts	0x03CD, r13
}
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	df 90       	pop	r13
    2f3c:	cf 90       	pop	r12
    2f3e:	bf 90       	pop	r11
    2f40:	af 90       	pop	r10
    2f42:	9f 90       	pop	r9
    2f44:	8f 90       	pop	r8
    2f46:	7f 90       	pop	r7
    2f48:	6f 90       	pop	r6
    2f4a:	08 95       	ret

00002f4c <readWM>:
{
	
}

void readWM(waterMethCtrl *wmCtrl)
{
    2f4c:	8f 92       	push	r8
    2f4e:	9f 92       	push	r9
    2f50:	af 92       	push	r10
    2f52:	bf 92       	push	r11
    2f54:	cf 92       	push	r12
    2f56:	df 92       	push	r13
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	4c 01       	movw	r8, r24
	u16 temp;
	a2dSetChannel(WATER_CH);							// set a2d to WM sensor 
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	0e 94 e5 12 	call	0x25ca	; 0x25ca <a2dSetChannel>
	temp = a2dConvert10bit(WATER_CH);					// read current pressure
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <a2dConvert10bit>
	
	// conversion for water pressure
	wmCtrl->pressure = (-800*(((float)temp)/1024*5-0.125)/(((float)temp)/1024*5-5));
    2f6e:	a0 e0       	ldi	r26, 0x00	; 0
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__floatunsisf>
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e8       	ldi	r20, 0x80	; 128
    2f80:	5a e3       	ldi	r21, 0x3A	; 58
    2f82:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 ea       	ldi	r20, 0xA0	; 160
    2f8c:	50 e4       	ldi	r21, 0x40	; 64
    2f8e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2f92:	5b 01       	movw	r10, r22
    2f94:	6c 01       	movw	r12, r24
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	5e e3       	ldi	r21, 0x3E	; 62
    2f9e:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	48 e4       	ldi	r20, 0x48	; 72
    2fa8:	54 ec       	ldi	r21, 0xC4	; 196
    2faa:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__mulsf3>
    2fae:	7b 01       	movw	r14, r22
    2fb0:	8c 01       	movw	r16, r24
    2fb2:	c6 01       	movw	r24, r12
    2fb4:	b5 01       	movw	r22, r10
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 ea       	ldi	r20, 0xA0	; 160
    2fbc:	50 e4       	ldi	r21, 0x40	; 64
    2fbe:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2fc2:	9b 01       	movw	r18, r22
    2fc4:	ac 01       	movw	r20, r24
    2fc6:	c8 01       	movw	r24, r16
    2fc8:	b7 01       	movw	r22, r14
    2fca:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__divsf3>
    2fce:	f4 01       	movw	r30, r8
    2fd0:	60 83       	st	Z, r22
    2fd2:	71 83       	std	Z+1, r23	; 0x01
    2fd4:	82 83       	std	Z+2, r24	; 0x02
    2fd6:	93 83       	std	Z+3, r25	; 0x03
	//wmCtrl->boost = bstCtrl->boost;
	
	// pressure is too high
	if(((wmCtrl->pressure - wmCtrl->desiredPressure) > 10.00) )
    2fd8:	24 85       	ldd	r18, Z+12	; 0x0c
    2fda:	35 85       	ldd	r19, Z+13	; 0x0d
    2fdc:	46 85       	ldd	r20, Z+14	; 0x0e
    2fde:	57 85       	ldd	r21, Z+15	; 0x0f
    2fe0:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    2fe4:	7b 01       	movw	r14, r22
    2fe6:	8c 01       	movw	r16, r24
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e2       	ldi	r20, 0x20	; 32
    2fee:	51 e4       	ldi	r21, 0x41	; 65
    2ff0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__gtsf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	9c f4       	brge	.+38     	; 0x301e <readWM+0xd2>
	{
		// turn on yellow 
		if(((wmCtrl->pressure - wmCtrl->desiredPressure) < 20.00))
    2ff8:	c8 01       	movw	r24, r16
    2ffa:	b7 01       	movw	r22, r14
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 ea       	ldi	r20, 0xA0	; 160
    3002:	51 e4       	ldi	r21, 0x41	; 65
    3004:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	2c f4       	brge	.+10     	; 0x3016 <readWM+0xca>
		{
			PORTB |= W_G + W_B;
    300c:	88 b3       	in	r24, 0x18	; 24
    300e:	80 63       	ori	r24, 0x30	; 48
    3010:	88 bb       	out	0x18, r24	; 24
			PORTB &= ~W_R;
    3012:	c3 98       	cbi	0x18, 3	; 24
    3014:	16 c0       	rjmp	.+44     	; 0x3042 <readWM+0xf6>
		}

		// turn on red
		else
		{
			PORTB |= W_R;
    3016:	c3 9a       	sbi	0x18, 3	; 24
			PORTB &= ~(W_G + W_B);		
    3018:	88 b3       	in	r24, 0x18	; 24
    301a:	8f 7c       	andi	r24, 0xCF	; 207
    301c:	11 c0       	rjmp	.+34     	; 0x3040 <readWM+0xf4>
		}
	}
	
	// pressure is too low
	else if(((wmCtrl->pressure - wmCtrl->desiredPressure) < -20.00) )
    301e:	c8 01       	movw	r24, r16
    3020:	b7 01       	movw	r22, r14
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 ea       	ldi	r20, 0xA0	; 160
    3028:	51 ec       	ldi	r21, 0xC1	; 193
    302a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	24 f4       	brge	.+8      	; 0x303a <readWM+0xee>
	{
		// turn on blue
		PORTB |= W_B;
    3032:	c5 9a       	sbi	0x18, 5	; 24
		PORTB &= ~(W_R + W_G);
    3034:	88 b3       	in	r24, 0x18	; 24
    3036:	87 7e       	andi	r24, 0xE7	; 231
    3038:	03 c0       	rjmp	.+6      	; 0x3040 <readWM+0xf4>

	// pressure at desired level
	else
	{
		// turn on green
		PORTB |= W_G;
    303a:	c4 9a       	sbi	0x18, 4	; 24
		PORTB &= ~(W_R + W_B);
    303c:	88 b3       	in	r24, 0x18	; 24
    303e:	87 7d       	andi	r24, 0xD7	; 215
    3040:	88 bb       	out	0x18, r24	; 24
	}

}
    3042:	1f 91       	pop	r17
    3044:	0f 91       	pop	r16
    3046:	ff 90       	pop	r15
    3048:	ef 90       	pop	r14
    304a:	df 90       	pop	r13
    304c:	cf 90       	pop	r12
    304e:	bf 90       	pop	r11
    3050:	af 90       	pop	r10
    3052:	9f 90       	pop	r9
    3054:	8f 90       	pop	r8
    3056:	08 95       	ret

00003058 <initWM>:
extern float EEMEM userWMKi;
extern float EEMEM userWMKd;


void initWM(waterMethCtrl *wmCtrl)
{
    3058:	ef 92       	push	r14
    305a:	ff 92       	push	r15
    305c:	0f 93       	push	r16
    305e:	1f 93       	push	r17
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <initWM+0xe>
    3066:	00 d0       	rcall	.+0      	; 0x3068 <initWM+0x10>
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	8c 01       	movw	r16, r24
	float val;

	eeprom_read_block((void*)&val, (const void*)&userOnBoost, 4);
    306e:	7e 01       	movw	r14, r28
    3070:	08 94       	sec
    3072:	e1 1c       	adc	r14, r1
    3074:	f1 1c       	adc	r15, r1
    3076:	c7 01       	movw	r24, r14
    3078:	68 e1       	ldi	r22, 0x18	; 24
    307a:	70 e0       	ldi	r23, 0x00	; 0
    307c:	44 e0       	ldi	r20, 0x04	; 4
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	wmCtrl->onBoost = val;								// set desired turn-on point
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	9a 81       	ldd	r25, Y+2	; 0x02
    3088:	ab 81       	ldd	r26, Y+3	; 0x03
    308a:	bc 81       	ldd	r27, Y+4	; 0x04
    308c:	f8 01       	movw	r30, r16
    308e:	80 87       	std	Z+8, r24	; 0x08
    3090:	91 87       	std	Z+9, r25	; 0x09
    3092:	a2 87       	std	Z+10, r26	; 0x0a
    3094:	b3 87       	std	Z+11, r27	; 0x0b
	
	eeprom_read_block((void*)&val, (const void*)&userPressure, 4);	
    3096:	c7 01       	movw	r24, r14
    3098:	64 e1       	ldi	r22, 0x14	; 20
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	44 e0       	ldi	r20, 0x04	; 4
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	wmCtrl->desiredPressure = val;						// set desired wm pressure level;
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	ab 81       	ldd	r26, Y+3	; 0x03
    30aa:	bc 81       	ldd	r27, Y+4	; 0x04
    30ac:	f8 01       	movw	r30, r16
    30ae:	84 87       	std	Z+12, r24	; 0x0c
    30b0:	95 87       	std	Z+13, r25	; 0x0d
    30b2:	a6 87       	std	Z+14, r26	; 0x0e
    30b4:	b7 87       	std	Z+15, r27	; 0x0f

	eeprom_read_block((void*)&val, (const void*)&userWMKp, 4);
    30b6:	c7 01       	movw	r24, r14
    30b8:	6c e1       	ldi	r22, 0x1C	; 28
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	44 e0       	ldi	r20, 0x04	; 4
    30be:	50 e0       	ldi	r21, 0x00	; 0
    30c0:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	wmCtrl->Kp = val;									// set proportional multiplier
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ca:	bc 81       	ldd	r27, Y+4	; 0x04
    30cc:	f8 01       	movw	r30, r16
    30ce:	84 8b       	std	Z+20, r24	; 0x14
    30d0:	95 8b       	std	Z+21, r25	; 0x15
    30d2:	a6 8b       	std	Z+22, r26	; 0x16
    30d4:	b7 8b       	std	Z+23, r27	; 0x17

	eeprom_read_block((void*)&val, (const void*)&userWMKi, 4);
    30d6:	c7 01       	movw	r24, r14
    30d8:	60 e2       	ldi	r22, 0x20	; 32
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	44 e0       	ldi	r20, 0x04	; 4
    30de:	50 e0       	ldi	r21, 0x00	; 0
    30e0:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	wmCtrl->Ki = val;									// set integral multiplier
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ea:	bc 81       	ldd	r27, Y+4	; 0x04
    30ec:	f8 01       	movw	r30, r16
    30ee:	80 8f       	std	Z+24, r24	; 0x18
    30f0:	91 8f       	std	Z+25, r25	; 0x19
    30f2:	a2 8f       	std	Z+26, r26	; 0x1a
    30f4:	b3 8f       	std	Z+27, r27	; 0x1b
	wmCtrl->integral = 0;								// reset integral
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a0 e0       	ldi	r26, 0x00	; 0
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	84 8f       	std	Z+28, r24	; 0x1c
    3100:	95 8f       	std	Z+29, r25	; 0x1d
    3102:	a6 8f       	std	Z+30, r26	; 0x1e
    3104:	b7 8f       	std	Z+31, r27	; 0x1f

	eeprom_read_block((void*)&val, (const void*)&userWMKd, 4);
    3106:	c7 01       	movw	r24, r14
    3108:	64 e2       	ldi	r22, 0x24	; 36
    310a:	70 e0       	ldi	r23, 0x00	; 0
    310c:	44 e0       	ldi	r20, 0x04	; 4
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	0e 94 b9 20 	call	0x4172	; 0x4172 <__eerd_block_m32>
	wmCtrl->Kd = val;									// set derivative multiplier
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	9a 81       	ldd	r25, Y+2	; 0x02
    3118:	ab 81       	ldd	r26, Y+3	; 0x03
    311a:	bc 81       	ldd	r27, Y+4	; 0x04
    311c:	f8 01       	movw	r30, r16
    311e:	80 a3       	std	Z+32, r24	; 0x20
    3120:	91 a3       	std	Z+33, r25	; 0x21
    3122:	a2 a3       	std	Z+34, r26	; 0x22
    3124:	b3 a3       	std	Z+35, r27	; 0x23
	readWM(wmCtrl);										// read the boost sensor
    3126:	c8 01       	movw	r24, r16
    3128:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <readWM>
}
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	ff 90       	pop	r15
    313e:	ef 90       	pop	r14
    3140:	08 95       	ret

00003142 <__fixunssfsi>:
    3142:	ef 92       	push	r14
    3144:	ff 92       	push	r15
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	7b 01       	movw	r14, r22
    314c:	8c 01       	movw	r16, r24
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	5f e4       	ldi	r21, 0x4F	; 79
    3156:	0e 94 ad 1c 	call	0x395a	; 0x395a <__gesf2>
    315a:	88 23       	and	r24, r24
    315c:	8c f0       	brlt	.+34     	; 0x3180 <__fixunssfsi+0x3e>
    315e:	c8 01       	movw	r24, r16
    3160:	b7 01       	movw	r22, r14
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	5f e4       	ldi	r21, 0x4F	; 79
    316a:	0e 94 19 1a 	call	0x3432	; 0x3432 <__subsf3>
    316e:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__fixsfsi>
    3172:	9b 01       	movw	r18, r22
    3174:	ac 01       	movw	r20, r24
    3176:	20 50       	subi	r18, 0x00	; 0
    3178:	30 40       	sbci	r19, 0x00	; 0
    317a:	40 40       	sbci	r20, 0x00	; 0
    317c:	50 48       	sbci	r21, 0x80	; 128
    317e:	06 c0       	rjmp	.+12     	; 0x318c <__fixunssfsi+0x4a>
    3180:	c8 01       	movw	r24, r16
    3182:	b7 01       	movw	r22, r14
    3184:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__fixsfsi>
    3188:	9b 01       	movw	r18, r22
    318a:	ac 01       	movw	r20, r24
    318c:	b9 01       	movw	r22, r18
    318e:	ca 01       	movw	r24, r20
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	ff 90       	pop	r15
    3196:	ef 90       	pop	r14
    3198:	08 95       	ret

0000319a <_fpadd_parts>:
    319a:	a0 e0       	ldi	r26, 0x00	; 0
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e3 ed       	ldi	r30, 0xD3	; 211
    31a0:	f8 e1       	ldi	r31, 0x18	; 24
    31a2:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__prologue_saves__>
    31a6:	dc 01       	movw	r26, r24
    31a8:	2b 01       	movw	r4, r22
    31aa:	fa 01       	movw	r30, r20
    31ac:	9c 91       	ld	r25, X
    31ae:	92 30       	cpi	r25, 0x02	; 2
    31b0:	08 f4       	brcc	.+2      	; 0x31b4 <_fpadd_parts+0x1a>
    31b2:	39 c1       	rjmp	.+626    	; 0x3426 <_fpadd_parts+0x28c>
    31b4:	eb 01       	movw	r28, r22
    31b6:	88 81       	ld	r24, Y
    31b8:	82 30       	cpi	r24, 0x02	; 2
    31ba:	08 f4       	brcc	.+2      	; 0x31be <_fpadd_parts+0x24>
    31bc:	33 c1       	rjmp	.+614    	; 0x3424 <_fpadd_parts+0x28a>
    31be:	94 30       	cpi	r25, 0x04	; 4
    31c0:	69 f4       	brne	.+26     	; 0x31dc <_fpadd_parts+0x42>
    31c2:	84 30       	cpi	r24, 0x04	; 4
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <_fpadd_parts+0x2e>
    31c6:	2f c1       	rjmp	.+606    	; 0x3426 <_fpadd_parts+0x28c>
    31c8:	11 96       	adiw	r26, 0x01	; 1
    31ca:	9c 91       	ld	r25, X
    31cc:	11 97       	sbiw	r26, 0x01	; 1
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	98 17       	cp	r25, r24
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <_fpadd_parts+0x3c>
    31d4:	28 c1       	rjmp	.+592    	; 0x3426 <_fpadd_parts+0x28c>
    31d6:	a3 ee       	ldi	r26, 0xE3	; 227
    31d8:	b1 e0       	ldi	r27, 0x01	; 1
    31da:	25 c1       	rjmp	.+586    	; 0x3426 <_fpadd_parts+0x28c>
    31dc:	84 30       	cpi	r24, 0x04	; 4
    31de:	09 f4       	brne	.+2      	; 0x31e2 <_fpadd_parts+0x48>
    31e0:	21 c1       	rjmp	.+578    	; 0x3424 <_fpadd_parts+0x28a>
    31e2:	82 30       	cpi	r24, 0x02	; 2
    31e4:	a9 f4       	brne	.+42     	; 0x3210 <_fpadd_parts+0x76>
    31e6:	92 30       	cpi	r25, 0x02	; 2
    31e8:	09 f0       	breq	.+2      	; 0x31ec <_fpadd_parts+0x52>
    31ea:	1d c1       	rjmp	.+570    	; 0x3426 <_fpadd_parts+0x28c>
    31ec:	9a 01       	movw	r18, r20
    31ee:	ad 01       	movw	r20, r26
    31f0:	88 e0       	ldi	r24, 0x08	; 8
    31f2:	ea 01       	movw	r28, r20
    31f4:	09 90       	ld	r0, Y+
    31f6:	ae 01       	movw	r20, r28
    31f8:	e9 01       	movw	r28, r18
    31fa:	09 92       	st	Y+, r0
    31fc:	9e 01       	movw	r18, r28
    31fe:	81 50       	subi	r24, 0x01	; 1
    3200:	c1 f7       	brne	.-16     	; 0x31f2 <_fpadd_parts+0x58>
    3202:	e2 01       	movw	r28, r4
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	11 96       	adiw	r26, 0x01	; 1
    3208:	9c 91       	ld	r25, X
    320a:	89 23       	and	r24, r25
    320c:	81 83       	std	Z+1, r24	; 0x01
    320e:	08 c1       	rjmp	.+528    	; 0x3420 <_fpadd_parts+0x286>
    3210:	92 30       	cpi	r25, 0x02	; 2
    3212:	09 f4       	brne	.+2      	; 0x3216 <_fpadd_parts+0x7c>
    3214:	07 c1       	rjmp	.+526    	; 0x3424 <_fpadd_parts+0x28a>
    3216:	12 96       	adiw	r26, 0x02	; 2
    3218:	2d 90       	ld	r2, X+
    321a:	3c 90       	ld	r3, X
    321c:	13 97       	sbiw	r26, 0x03	; 3
    321e:	eb 01       	movw	r28, r22
    3220:	8a 81       	ldd	r24, Y+2	; 0x02
    3222:	9b 81       	ldd	r25, Y+3	; 0x03
    3224:	14 96       	adiw	r26, 0x04	; 4
    3226:	ad 90       	ld	r10, X+
    3228:	bd 90       	ld	r11, X+
    322a:	cd 90       	ld	r12, X+
    322c:	dc 90       	ld	r13, X
    322e:	17 97       	sbiw	r26, 0x07	; 7
    3230:	ec 80       	ldd	r14, Y+4	; 0x04
    3232:	fd 80       	ldd	r15, Y+5	; 0x05
    3234:	0e 81       	ldd	r16, Y+6	; 0x06
    3236:	1f 81       	ldd	r17, Y+7	; 0x07
    3238:	91 01       	movw	r18, r2
    323a:	28 1b       	sub	r18, r24
    323c:	39 0b       	sbc	r19, r25
    323e:	b9 01       	movw	r22, r18
    3240:	37 ff       	sbrs	r19, 7
    3242:	04 c0       	rjmp	.+8      	; 0x324c <_fpadd_parts+0xb2>
    3244:	66 27       	eor	r22, r22
    3246:	77 27       	eor	r23, r23
    3248:	62 1b       	sub	r22, r18
    324a:	73 0b       	sbc	r23, r19
    324c:	60 32       	cpi	r22, 0x20	; 32
    324e:	71 05       	cpc	r23, r1
    3250:	0c f0       	brlt	.+2      	; 0x3254 <_fpadd_parts+0xba>
    3252:	61 c0       	rjmp	.+194    	; 0x3316 <_fpadd_parts+0x17c>
    3254:	12 16       	cp	r1, r18
    3256:	13 06       	cpc	r1, r19
    3258:	6c f5       	brge	.+90     	; 0x32b4 <_fpadd_parts+0x11a>
    325a:	37 01       	movw	r6, r14
    325c:	48 01       	movw	r8, r16
    325e:	06 2e       	mov	r0, r22
    3260:	04 c0       	rjmp	.+8      	; 0x326a <_fpadd_parts+0xd0>
    3262:	96 94       	lsr	r9
    3264:	87 94       	ror	r8
    3266:	77 94       	ror	r7
    3268:	67 94       	ror	r6
    326a:	0a 94       	dec	r0
    326c:	d2 f7       	brpl	.-12     	; 0x3262 <_fpadd_parts+0xc8>
    326e:	21 e0       	ldi	r18, 0x01	; 1
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <_fpadd_parts+0xe6>
    3278:	22 0f       	add	r18, r18
    327a:	33 1f       	adc	r19, r19
    327c:	44 1f       	adc	r20, r20
    327e:	55 1f       	adc	r21, r21
    3280:	6a 95       	dec	r22
    3282:	d2 f7       	brpl	.-12     	; 0x3278 <_fpadd_parts+0xde>
    3284:	21 50       	subi	r18, 0x01	; 1
    3286:	30 40       	sbci	r19, 0x00	; 0
    3288:	40 40       	sbci	r20, 0x00	; 0
    328a:	50 40       	sbci	r21, 0x00	; 0
    328c:	2e 21       	and	r18, r14
    328e:	3f 21       	and	r19, r15
    3290:	40 23       	and	r20, r16
    3292:	51 23       	and	r21, r17
    3294:	21 15       	cp	r18, r1
    3296:	31 05       	cpc	r19, r1
    3298:	41 05       	cpc	r20, r1
    329a:	51 05       	cpc	r21, r1
    329c:	21 f0       	breq	.+8      	; 0x32a6 <_fpadd_parts+0x10c>
    329e:	21 e0       	ldi	r18, 0x01	; 1
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	79 01       	movw	r14, r18
    32a8:	8a 01       	movw	r16, r20
    32aa:	e6 28       	or	r14, r6
    32ac:	f7 28       	or	r15, r7
    32ae:	08 29       	or	r16, r8
    32b0:	19 29       	or	r17, r9
    32b2:	3c c0       	rjmp	.+120    	; 0x332c <_fpadd_parts+0x192>
    32b4:	23 2b       	or	r18, r19
    32b6:	d1 f1       	breq	.+116    	; 0x332c <_fpadd_parts+0x192>
    32b8:	26 0e       	add	r2, r22
    32ba:	37 1e       	adc	r3, r23
    32bc:	35 01       	movw	r6, r10
    32be:	46 01       	movw	r8, r12
    32c0:	06 2e       	mov	r0, r22
    32c2:	04 c0       	rjmp	.+8      	; 0x32cc <_fpadd_parts+0x132>
    32c4:	96 94       	lsr	r9
    32c6:	87 94       	ror	r8
    32c8:	77 94       	ror	r7
    32ca:	67 94       	ror	r6
    32cc:	0a 94       	dec	r0
    32ce:	d2 f7       	brpl	.-12     	; 0x32c4 <_fpadd_parts+0x12a>
    32d0:	21 e0       	ldi	r18, 0x01	; 1
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e0       	ldi	r20, 0x00	; 0
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	04 c0       	rjmp	.+8      	; 0x32e2 <_fpadd_parts+0x148>
    32da:	22 0f       	add	r18, r18
    32dc:	33 1f       	adc	r19, r19
    32de:	44 1f       	adc	r20, r20
    32e0:	55 1f       	adc	r21, r21
    32e2:	6a 95       	dec	r22
    32e4:	d2 f7       	brpl	.-12     	; 0x32da <_fpadd_parts+0x140>
    32e6:	21 50       	subi	r18, 0x01	; 1
    32e8:	30 40       	sbci	r19, 0x00	; 0
    32ea:	40 40       	sbci	r20, 0x00	; 0
    32ec:	50 40       	sbci	r21, 0x00	; 0
    32ee:	2a 21       	and	r18, r10
    32f0:	3b 21       	and	r19, r11
    32f2:	4c 21       	and	r20, r12
    32f4:	5d 21       	and	r21, r13
    32f6:	21 15       	cp	r18, r1
    32f8:	31 05       	cpc	r19, r1
    32fa:	41 05       	cpc	r20, r1
    32fc:	51 05       	cpc	r21, r1
    32fe:	21 f0       	breq	.+8      	; 0x3308 <_fpadd_parts+0x16e>
    3300:	21 e0       	ldi	r18, 0x01	; 1
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	59 01       	movw	r10, r18
    330a:	6a 01       	movw	r12, r20
    330c:	a6 28       	or	r10, r6
    330e:	b7 28       	or	r11, r7
    3310:	c8 28       	or	r12, r8
    3312:	d9 28       	or	r13, r9
    3314:	0b c0       	rjmp	.+22     	; 0x332c <_fpadd_parts+0x192>
    3316:	82 15       	cp	r24, r2
    3318:	93 05       	cpc	r25, r3
    331a:	2c f0       	brlt	.+10     	; 0x3326 <_fpadd_parts+0x18c>
    331c:	1c 01       	movw	r2, r24
    331e:	aa 24       	eor	r10, r10
    3320:	bb 24       	eor	r11, r11
    3322:	65 01       	movw	r12, r10
    3324:	03 c0       	rjmp	.+6      	; 0x332c <_fpadd_parts+0x192>
    3326:	ee 24       	eor	r14, r14
    3328:	ff 24       	eor	r15, r15
    332a:	87 01       	movw	r16, r14
    332c:	11 96       	adiw	r26, 0x01	; 1
    332e:	9c 91       	ld	r25, X
    3330:	d2 01       	movw	r26, r4
    3332:	11 96       	adiw	r26, 0x01	; 1
    3334:	8c 91       	ld	r24, X
    3336:	98 17       	cp	r25, r24
    3338:	09 f4       	brne	.+2      	; 0x333c <_fpadd_parts+0x1a2>
    333a:	45 c0       	rjmp	.+138    	; 0x33c6 <_fpadd_parts+0x22c>
    333c:	99 23       	and	r25, r25
    333e:	39 f0       	breq	.+14     	; 0x334e <_fpadd_parts+0x1b4>
    3340:	a8 01       	movw	r20, r16
    3342:	97 01       	movw	r18, r14
    3344:	2a 19       	sub	r18, r10
    3346:	3b 09       	sbc	r19, r11
    3348:	4c 09       	sbc	r20, r12
    334a:	5d 09       	sbc	r21, r13
    334c:	06 c0       	rjmp	.+12     	; 0x335a <_fpadd_parts+0x1c0>
    334e:	a6 01       	movw	r20, r12
    3350:	95 01       	movw	r18, r10
    3352:	2e 19       	sub	r18, r14
    3354:	3f 09       	sbc	r19, r15
    3356:	40 0b       	sbc	r20, r16
    3358:	51 0b       	sbc	r21, r17
    335a:	57 fd       	sbrc	r21, 7
    335c:	08 c0       	rjmp	.+16     	; 0x336e <_fpadd_parts+0x1d4>
    335e:	11 82       	std	Z+1, r1	; 0x01
    3360:	33 82       	std	Z+3, r3	; 0x03
    3362:	22 82       	std	Z+2, r2	; 0x02
    3364:	24 83       	std	Z+4, r18	; 0x04
    3366:	35 83       	std	Z+5, r19	; 0x05
    3368:	46 83       	std	Z+6, r20	; 0x06
    336a:	57 83       	std	Z+7, r21	; 0x07
    336c:	1d c0       	rjmp	.+58     	; 0x33a8 <_fpadd_parts+0x20e>
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	81 83       	std	Z+1, r24	; 0x01
    3372:	33 82       	std	Z+3, r3	; 0x03
    3374:	22 82       	std	Z+2, r2	; 0x02
    3376:	88 27       	eor	r24, r24
    3378:	99 27       	eor	r25, r25
    337a:	dc 01       	movw	r26, r24
    337c:	82 1b       	sub	r24, r18
    337e:	93 0b       	sbc	r25, r19
    3380:	a4 0b       	sbc	r26, r20
    3382:	b5 0b       	sbc	r27, r21
    3384:	84 83       	std	Z+4, r24	; 0x04
    3386:	95 83       	std	Z+5, r25	; 0x05
    3388:	a6 83       	std	Z+6, r26	; 0x06
    338a:	b7 83       	std	Z+7, r27	; 0x07
    338c:	0d c0       	rjmp	.+26     	; 0x33a8 <_fpadd_parts+0x20e>
    338e:	22 0f       	add	r18, r18
    3390:	33 1f       	adc	r19, r19
    3392:	44 1f       	adc	r20, r20
    3394:	55 1f       	adc	r21, r21
    3396:	24 83       	std	Z+4, r18	; 0x04
    3398:	35 83       	std	Z+5, r19	; 0x05
    339a:	46 83       	std	Z+6, r20	; 0x06
    339c:	57 83       	std	Z+7, r21	; 0x07
    339e:	82 81       	ldd	r24, Z+2	; 0x02
    33a0:	93 81       	ldd	r25, Z+3	; 0x03
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	93 83       	std	Z+3, r25	; 0x03
    33a6:	82 83       	std	Z+2, r24	; 0x02
    33a8:	24 81       	ldd	r18, Z+4	; 0x04
    33aa:	35 81       	ldd	r19, Z+5	; 0x05
    33ac:	46 81       	ldd	r20, Z+6	; 0x06
    33ae:	57 81       	ldd	r21, Z+7	; 0x07
    33b0:	da 01       	movw	r26, r20
    33b2:	c9 01       	movw	r24, r18
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	a1 09       	sbc	r26, r1
    33b8:	b1 09       	sbc	r27, r1
    33ba:	8f 5f       	subi	r24, 0xFF	; 255
    33bc:	9f 4f       	sbci	r25, 0xFF	; 255
    33be:	af 4f       	sbci	r26, 0xFF	; 255
    33c0:	bf 43       	sbci	r27, 0x3F	; 63
    33c2:	28 f3       	brcs	.-54     	; 0x338e <_fpadd_parts+0x1f4>
    33c4:	0b c0       	rjmp	.+22     	; 0x33dc <_fpadd_parts+0x242>
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	33 82       	std	Z+3, r3	; 0x03
    33ca:	22 82       	std	Z+2, r2	; 0x02
    33cc:	ea 0c       	add	r14, r10
    33ce:	fb 1c       	adc	r15, r11
    33d0:	0c 1d       	adc	r16, r12
    33d2:	1d 1d       	adc	r17, r13
    33d4:	e4 82       	std	Z+4, r14	; 0x04
    33d6:	f5 82       	std	Z+5, r15	; 0x05
    33d8:	06 83       	std	Z+6, r16	; 0x06
    33da:	17 83       	std	Z+7, r17	; 0x07
    33dc:	83 e0       	ldi	r24, 0x03	; 3
    33de:	80 83       	st	Z, r24
    33e0:	24 81       	ldd	r18, Z+4	; 0x04
    33e2:	35 81       	ldd	r19, Z+5	; 0x05
    33e4:	46 81       	ldd	r20, Z+6	; 0x06
    33e6:	57 81       	ldd	r21, Z+7	; 0x07
    33e8:	57 ff       	sbrs	r21, 7
    33ea:	1a c0       	rjmp	.+52     	; 0x3420 <_fpadd_parts+0x286>
    33ec:	c9 01       	movw	r24, r18
    33ee:	aa 27       	eor	r26, r26
    33f0:	97 fd       	sbrc	r25, 7
    33f2:	a0 95       	com	r26
    33f4:	ba 2f       	mov	r27, r26
    33f6:	81 70       	andi	r24, 0x01	; 1
    33f8:	90 70       	andi	r25, 0x00	; 0
    33fa:	a0 70       	andi	r26, 0x00	; 0
    33fc:	b0 70       	andi	r27, 0x00	; 0
    33fe:	56 95       	lsr	r21
    3400:	47 95       	ror	r20
    3402:	37 95       	ror	r19
    3404:	27 95       	ror	r18
    3406:	82 2b       	or	r24, r18
    3408:	93 2b       	or	r25, r19
    340a:	a4 2b       	or	r26, r20
    340c:	b5 2b       	or	r27, r21
    340e:	84 83       	std	Z+4, r24	; 0x04
    3410:	95 83       	std	Z+5, r25	; 0x05
    3412:	a6 83       	std	Z+6, r26	; 0x06
    3414:	b7 83       	std	Z+7, r27	; 0x07
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	93 81       	ldd	r25, Z+3	; 0x03
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	93 83       	std	Z+3, r25	; 0x03
    341e:	82 83       	std	Z+2, r24	; 0x02
    3420:	df 01       	movw	r26, r30
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <_fpadd_parts+0x28c>
    3424:	d2 01       	movw	r26, r4
    3426:	cd 01       	movw	r24, r26
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	e2 e1       	ldi	r30, 0x12	; 18
    342e:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__epilogue_restores__>

00003432 <__subsf3>:
    3432:	a0 e2       	ldi	r26, 0x20	; 32
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	ef e1       	ldi	r30, 0x1F	; 31
    3438:	fa e1       	ldi	r31, 0x1A	; 26
    343a:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
    343e:	69 83       	std	Y+1, r22	; 0x01
    3440:	7a 83       	std	Y+2, r23	; 0x02
    3442:	8b 83       	std	Y+3, r24	; 0x03
    3444:	9c 83       	std	Y+4, r25	; 0x04
    3446:	2d 83       	std	Y+5, r18	; 0x05
    3448:	3e 83       	std	Y+6, r19	; 0x06
    344a:	4f 83       	std	Y+7, r20	; 0x07
    344c:	58 87       	std	Y+8, r21	; 0x08
    344e:	e9 e0       	ldi	r30, 0x09	; 9
    3450:	ee 2e       	mov	r14, r30
    3452:	f1 2c       	mov	r15, r1
    3454:	ec 0e       	add	r14, r28
    3456:	fd 1e       	adc	r15, r29
    3458:	ce 01       	movw	r24, r28
    345a:	01 96       	adiw	r24, 0x01	; 1
    345c:	b7 01       	movw	r22, r14
    345e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    3462:	8e 01       	movw	r16, r28
    3464:	0f 5e       	subi	r16, 0xEF	; 239
    3466:	1f 4f       	sbci	r17, 0xFF	; 255
    3468:	ce 01       	movw	r24, r28
    346a:	05 96       	adiw	r24, 0x05	; 5
    346c:	b8 01       	movw	r22, r16
    346e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    3472:	8a 89       	ldd	r24, Y+18	; 0x12
    3474:	91 e0       	ldi	r25, 0x01	; 1
    3476:	89 27       	eor	r24, r25
    3478:	8a 8b       	std	Y+18, r24	; 0x12
    347a:	c7 01       	movw	r24, r14
    347c:	b8 01       	movw	r22, r16
    347e:	ae 01       	movw	r20, r28
    3480:	47 5e       	subi	r20, 0xE7	; 231
    3482:	5f 4f       	sbci	r21, 0xFF	; 255
    3484:	0e 94 cd 18 	call	0x319a	; 0x319a <_fpadd_parts>
    3488:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__pack_f>
    348c:	a0 96       	adiw	r28, 0x20	; 32
    348e:	e6 e0       	ldi	r30, 0x06	; 6
    3490:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

00003494 <__addsf3>:
    3494:	a0 e2       	ldi	r26, 0x20	; 32
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	e0 e5       	ldi	r30, 0x50	; 80
    349a:	fa e1       	ldi	r31, 0x1A	; 26
    349c:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
    34a0:	69 83       	std	Y+1, r22	; 0x01
    34a2:	7a 83       	std	Y+2, r23	; 0x02
    34a4:	8b 83       	std	Y+3, r24	; 0x03
    34a6:	9c 83       	std	Y+4, r25	; 0x04
    34a8:	2d 83       	std	Y+5, r18	; 0x05
    34aa:	3e 83       	std	Y+6, r19	; 0x06
    34ac:	4f 83       	std	Y+7, r20	; 0x07
    34ae:	58 87       	std	Y+8, r21	; 0x08
    34b0:	f9 e0       	ldi	r31, 0x09	; 9
    34b2:	ef 2e       	mov	r14, r31
    34b4:	f1 2c       	mov	r15, r1
    34b6:	ec 0e       	add	r14, r28
    34b8:	fd 1e       	adc	r15, r29
    34ba:	ce 01       	movw	r24, r28
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	b7 01       	movw	r22, r14
    34c0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    34c4:	8e 01       	movw	r16, r28
    34c6:	0f 5e       	subi	r16, 0xEF	; 239
    34c8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ca:	ce 01       	movw	r24, r28
    34cc:	05 96       	adiw	r24, 0x05	; 5
    34ce:	b8 01       	movw	r22, r16
    34d0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    34d4:	c7 01       	movw	r24, r14
    34d6:	b8 01       	movw	r22, r16
    34d8:	ae 01       	movw	r20, r28
    34da:	47 5e       	subi	r20, 0xE7	; 231
    34dc:	5f 4f       	sbci	r21, 0xFF	; 255
    34de:	0e 94 cd 18 	call	0x319a	; 0x319a <_fpadd_parts>
    34e2:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__pack_f>
    34e6:	a0 96       	adiw	r28, 0x20	; 32
    34e8:	e6 e0       	ldi	r30, 0x06	; 6
    34ea:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

000034ee <__mulsf3>:
    34ee:	a0 e2       	ldi	r26, 0x20	; 32
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	ed e7       	ldi	r30, 0x7D	; 125
    34f4:	fa e1       	ldi	r31, 0x1A	; 26
    34f6:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__prologue_saves__>
    34fa:	69 83       	std	Y+1, r22	; 0x01
    34fc:	7a 83       	std	Y+2, r23	; 0x02
    34fe:	8b 83       	std	Y+3, r24	; 0x03
    3500:	9c 83       	std	Y+4, r25	; 0x04
    3502:	2d 83       	std	Y+5, r18	; 0x05
    3504:	3e 83       	std	Y+6, r19	; 0x06
    3506:	4f 83       	std	Y+7, r20	; 0x07
    3508:	58 87       	std	Y+8, r21	; 0x08
    350a:	ce 01       	movw	r24, r28
    350c:	01 96       	adiw	r24, 0x01	; 1
    350e:	be 01       	movw	r22, r28
    3510:	67 5f       	subi	r22, 0xF7	; 247
    3512:	7f 4f       	sbci	r23, 0xFF	; 255
    3514:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    3518:	ce 01       	movw	r24, r28
    351a:	05 96       	adiw	r24, 0x05	; 5
    351c:	be 01       	movw	r22, r28
    351e:	6f 5e       	subi	r22, 0xEF	; 239
    3520:	7f 4f       	sbci	r23, 0xFF	; 255
    3522:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    3526:	99 85       	ldd	r25, Y+9	; 0x09
    3528:	92 30       	cpi	r25, 0x02	; 2
    352a:	88 f0       	brcs	.+34     	; 0x354e <__mulsf3+0x60>
    352c:	89 89       	ldd	r24, Y+17	; 0x11
    352e:	82 30       	cpi	r24, 0x02	; 2
    3530:	c8 f0       	brcs	.+50     	; 0x3564 <__mulsf3+0x76>
    3532:	94 30       	cpi	r25, 0x04	; 4
    3534:	19 f4       	brne	.+6      	; 0x353c <__mulsf3+0x4e>
    3536:	82 30       	cpi	r24, 0x02	; 2
    3538:	51 f4       	brne	.+20     	; 0x354e <__mulsf3+0x60>
    353a:	04 c0       	rjmp	.+8      	; 0x3544 <__mulsf3+0x56>
    353c:	84 30       	cpi	r24, 0x04	; 4
    353e:	29 f4       	brne	.+10     	; 0x354a <__mulsf3+0x5c>
    3540:	92 30       	cpi	r25, 0x02	; 2
    3542:	81 f4       	brne	.+32     	; 0x3564 <__mulsf3+0x76>
    3544:	83 ee       	ldi	r24, 0xE3	; 227
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	c6 c0       	rjmp	.+396    	; 0x36d6 <__mulsf3+0x1e8>
    354a:	92 30       	cpi	r25, 0x02	; 2
    354c:	49 f4       	brne	.+18     	; 0x3560 <__mulsf3+0x72>
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	8a 89       	ldd	r24, Y+18	; 0x12
    3554:	98 13       	cpse	r25, r24
    3556:	21 e0       	ldi	r18, 0x01	; 1
    3558:	2a 87       	std	Y+10, r18	; 0x0a
    355a:	ce 01       	movw	r24, r28
    355c:	09 96       	adiw	r24, 0x09	; 9
    355e:	bb c0       	rjmp	.+374    	; 0x36d6 <__mulsf3+0x1e8>
    3560:	82 30       	cpi	r24, 0x02	; 2
    3562:	49 f4       	brne	.+18     	; 0x3576 <__mulsf3+0x88>
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	9a 85       	ldd	r25, Y+10	; 0x0a
    3568:	8a 89       	ldd	r24, Y+18	; 0x12
    356a:	98 13       	cpse	r25, r24
    356c:	21 e0       	ldi	r18, 0x01	; 1
    356e:	2a 8b       	std	Y+18, r18	; 0x12
    3570:	ce 01       	movw	r24, r28
    3572:	41 96       	adiw	r24, 0x11	; 17
    3574:	b0 c0       	rjmp	.+352    	; 0x36d6 <__mulsf3+0x1e8>
    3576:	2d 84       	ldd	r2, Y+13	; 0x0d
    3578:	3e 84       	ldd	r3, Y+14	; 0x0e
    357a:	4f 84       	ldd	r4, Y+15	; 0x0f
    357c:	58 88       	ldd	r5, Y+16	; 0x10
    357e:	6d 88       	ldd	r6, Y+21	; 0x15
    3580:	7e 88       	ldd	r7, Y+22	; 0x16
    3582:	8f 88       	ldd	r8, Y+23	; 0x17
    3584:	98 8c       	ldd	r9, Y+24	; 0x18
    3586:	ee 24       	eor	r14, r14
    3588:	ff 24       	eor	r15, r15
    358a:	87 01       	movw	r16, r14
    358c:	aa 24       	eor	r10, r10
    358e:	bb 24       	eor	r11, r11
    3590:	65 01       	movw	r12, r10
    3592:	40 e0       	ldi	r20, 0x00	; 0
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	e0 e0       	ldi	r30, 0x00	; 0
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	c1 01       	movw	r24, r2
    35a0:	81 70       	andi	r24, 0x01	; 1
    35a2:	90 70       	andi	r25, 0x00	; 0
    35a4:	89 2b       	or	r24, r25
    35a6:	e9 f0       	breq	.+58     	; 0x35e2 <__mulsf3+0xf4>
    35a8:	e6 0c       	add	r14, r6
    35aa:	f7 1c       	adc	r15, r7
    35ac:	08 1d       	adc	r16, r8
    35ae:	19 1d       	adc	r17, r9
    35b0:	9a 01       	movw	r18, r20
    35b2:	ab 01       	movw	r20, r22
    35b4:	2a 0d       	add	r18, r10
    35b6:	3b 1d       	adc	r19, r11
    35b8:	4c 1d       	adc	r20, r12
    35ba:	5d 1d       	adc	r21, r13
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	a0 e0       	ldi	r26, 0x00	; 0
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	e6 14       	cp	r14, r6
    35c6:	f7 04       	cpc	r15, r7
    35c8:	08 05       	cpc	r16, r8
    35ca:	19 05       	cpc	r17, r9
    35cc:	20 f4       	brcc	.+8      	; 0x35d6 <__mulsf3+0xe8>
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	a0 e0       	ldi	r26, 0x00	; 0
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	ba 01       	movw	r22, r20
    35d8:	a9 01       	movw	r20, r18
    35da:	48 0f       	add	r20, r24
    35dc:	59 1f       	adc	r21, r25
    35de:	6a 1f       	adc	r22, r26
    35e0:	7b 1f       	adc	r23, r27
    35e2:	aa 0c       	add	r10, r10
    35e4:	bb 1c       	adc	r11, r11
    35e6:	cc 1c       	adc	r12, r12
    35e8:	dd 1c       	adc	r13, r13
    35ea:	97 fe       	sbrs	r9, 7
    35ec:	08 c0       	rjmp	.+16     	; 0x35fe <__mulsf3+0x110>
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	a0 e0       	ldi	r26, 0x00	; 0
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	a8 2a       	or	r10, r24
    35f8:	b9 2a       	or	r11, r25
    35fa:	ca 2a       	or	r12, r26
    35fc:	db 2a       	or	r13, r27
    35fe:	31 96       	adiw	r30, 0x01	; 1
    3600:	e0 32       	cpi	r30, 0x20	; 32
    3602:	f1 05       	cpc	r31, r1
    3604:	49 f0       	breq	.+18     	; 0x3618 <__mulsf3+0x12a>
    3606:	66 0c       	add	r6, r6
    3608:	77 1c       	adc	r7, r7
    360a:	88 1c       	adc	r8, r8
    360c:	99 1c       	adc	r9, r9
    360e:	56 94       	lsr	r5
    3610:	47 94       	ror	r4
    3612:	37 94       	ror	r3
    3614:	27 94       	ror	r2
    3616:	c3 cf       	rjmp	.-122    	; 0x359e <__mulsf3+0xb0>
    3618:	fa 85       	ldd	r31, Y+10	; 0x0a
    361a:	ea 89       	ldd	r30, Y+18	; 0x12
    361c:	2b 89       	ldd	r18, Y+19	; 0x13
    361e:	3c 89       	ldd	r19, Y+20	; 0x14
    3620:	8b 85       	ldd	r24, Y+11	; 0x0b
    3622:	9c 85       	ldd	r25, Y+12	; 0x0c
    3624:	28 0f       	add	r18, r24
    3626:	39 1f       	adc	r19, r25
    3628:	2e 5f       	subi	r18, 0xFE	; 254
    362a:	3f 4f       	sbci	r19, 0xFF	; 255
    362c:	17 c0       	rjmp	.+46     	; 0x365c <__mulsf3+0x16e>
    362e:	ca 01       	movw	r24, r20
    3630:	81 70       	andi	r24, 0x01	; 1
    3632:	90 70       	andi	r25, 0x00	; 0
    3634:	89 2b       	or	r24, r25
    3636:	61 f0       	breq	.+24     	; 0x3650 <__mulsf3+0x162>
    3638:	16 95       	lsr	r17
    363a:	07 95       	ror	r16
    363c:	f7 94       	ror	r15
    363e:	e7 94       	ror	r14
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e0       	ldi	r26, 0x00	; 0
    3646:	b0 e8       	ldi	r27, 0x80	; 128
    3648:	e8 2a       	or	r14, r24
    364a:	f9 2a       	or	r15, r25
    364c:	0a 2b       	or	r16, r26
    364e:	1b 2b       	or	r17, r27
    3650:	76 95       	lsr	r23
    3652:	67 95       	ror	r22
    3654:	57 95       	ror	r21
    3656:	47 95       	ror	r20
    3658:	2f 5f       	subi	r18, 0xFF	; 255
    365a:	3f 4f       	sbci	r19, 0xFF	; 255
    365c:	77 fd       	sbrc	r23, 7
    365e:	e7 cf       	rjmp	.-50     	; 0x362e <__mulsf3+0x140>
    3660:	0c c0       	rjmp	.+24     	; 0x367a <__mulsf3+0x18c>
    3662:	44 0f       	add	r20, r20
    3664:	55 1f       	adc	r21, r21
    3666:	66 1f       	adc	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	17 fd       	sbrc	r17, 7
    366c:	41 60       	ori	r20, 0x01	; 1
    366e:	ee 0c       	add	r14, r14
    3670:	ff 1c       	adc	r15, r15
    3672:	00 1f       	adc	r16, r16
    3674:	11 1f       	adc	r17, r17
    3676:	21 50       	subi	r18, 0x01	; 1
    3678:	30 40       	sbci	r19, 0x00	; 0
    367a:	40 30       	cpi	r20, 0x00	; 0
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	59 07       	cpc	r21, r25
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	69 07       	cpc	r22, r25
    3684:	90 e4       	ldi	r25, 0x40	; 64
    3686:	79 07       	cpc	r23, r25
    3688:	60 f3       	brcs	.-40     	; 0x3662 <__mulsf3+0x174>
    368a:	2b 8f       	std	Y+27, r18	; 0x1b
    368c:	3c 8f       	std	Y+28, r19	; 0x1c
    368e:	db 01       	movw	r26, r22
    3690:	ca 01       	movw	r24, r20
    3692:	8f 77       	andi	r24, 0x7F	; 127
    3694:	90 70       	andi	r25, 0x00	; 0
    3696:	a0 70       	andi	r26, 0x00	; 0
    3698:	b0 70       	andi	r27, 0x00	; 0
    369a:	80 34       	cpi	r24, 0x40	; 64
    369c:	91 05       	cpc	r25, r1
    369e:	a1 05       	cpc	r26, r1
    36a0:	b1 05       	cpc	r27, r1
    36a2:	61 f4       	brne	.+24     	; 0x36bc <__mulsf3+0x1ce>
    36a4:	47 fd       	sbrc	r20, 7
    36a6:	0a c0       	rjmp	.+20     	; 0x36bc <__mulsf3+0x1ce>
    36a8:	e1 14       	cp	r14, r1
    36aa:	f1 04       	cpc	r15, r1
    36ac:	01 05       	cpc	r16, r1
    36ae:	11 05       	cpc	r17, r1
    36b0:	29 f0       	breq	.+10     	; 0x36bc <__mulsf3+0x1ce>
    36b2:	40 5c       	subi	r20, 0xC0	; 192
    36b4:	5f 4f       	sbci	r21, 0xFF	; 255
    36b6:	6f 4f       	sbci	r22, 0xFF	; 255
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	40 78       	andi	r20, 0x80	; 128
    36bc:	1a 8e       	std	Y+26, r1	; 0x1a
    36be:	fe 17       	cp	r31, r30
    36c0:	11 f0       	breq	.+4      	; 0x36c6 <__mulsf3+0x1d8>
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	8a 8f       	std	Y+26, r24	; 0x1a
    36c6:	4d 8f       	std	Y+29, r20	; 0x1d
    36c8:	5e 8f       	std	Y+30, r21	; 0x1e
    36ca:	6f 8f       	std	Y+31, r22	; 0x1f
    36cc:	78 a3       	std	Y+32, r23	; 0x20
    36ce:	83 e0       	ldi	r24, 0x03	; 3
    36d0:	89 8f       	std	Y+25, r24	; 0x19
    36d2:	ce 01       	movw	r24, r28
    36d4:	49 96       	adiw	r24, 0x19	; 25
    36d6:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__pack_f>
    36da:	a0 96       	adiw	r28, 0x20	; 32
    36dc:	e2 e1       	ldi	r30, 0x12	; 18
    36de:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__epilogue_restores__>

000036e2 <__divsf3>:
    36e2:	a8 e1       	ldi	r26, 0x18	; 24
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	e7 e7       	ldi	r30, 0x77	; 119
    36e8:	fb e1       	ldi	r31, 0x1B	; 27
    36ea:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__prologue_saves__+0x10>
    36ee:	69 83       	std	Y+1, r22	; 0x01
    36f0:	7a 83       	std	Y+2, r23	; 0x02
    36f2:	8b 83       	std	Y+3, r24	; 0x03
    36f4:	9c 83       	std	Y+4, r25	; 0x04
    36f6:	2d 83       	std	Y+5, r18	; 0x05
    36f8:	3e 83       	std	Y+6, r19	; 0x06
    36fa:	4f 83       	std	Y+7, r20	; 0x07
    36fc:	58 87       	std	Y+8, r21	; 0x08
    36fe:	b9 e0       	ldi	r27, 0x09	; 9
    3700:	eb 2e       	mov	r14, r27
    3702:	f1 2c       	mov	r15, r1
    3704:	ec 0e       	add	r14, r28
    3706:	fd 1e       	adc	r15, r29
    3708:	ce 01       	movw	r24, r28
    370a:	01 96       	adiw	r24, 0x01	; 1
    370c:	b7 01       	movw	r22, r14
    370e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    3712:	8e 01       	movw	r16, r28
    3714:	0f 5e       	subi	r16, 0xEF	; 239
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	ce 01       	movw	r24, r28
    371a:	05 96       	adiw	r24, 0x05	; 5
    371c:	b8 01       	movw	r22, r16
    371e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    3722:	29 85       	ldd	r18, Y+9	; 0x09
    3724:	22 30       	cpi	r18, 0x02	; 2
    3726:	08 f4       	brcc	.+2      	; 0x372a <__divsf3+0x48>
    3728:	7e c0       	rjmp	.+252    	; 0x3826 <__divsf3+0x144>
    372a:	39 89       	ldd	r19, Y+17	; 0x11
    372c:	32 30       	cpi	r19, 0x02	; 2
    372e:	10 f4       	brcc	.+4      	; 0x3734 <__divsf3+0x52>
    3730:	b8 01       	movw	r22, r16
    3732:	7c c0       	rjmp	.+248    	; 0x382c <__divsf3+0x14a>
    3734:	8a 85       	ldd	r24, Y+10	; 0x0a
    3736:	9a 89       	ldd	r25, Y+18	; 0x12
    3738:	89 27       	eor	r24, r25
    373a:	8a 87       	std	Y+10, r24	; 0x0a
    373c:	24 30       	cpi	r18, 0x04	; 4
    373e:	11 f0       	breq	.+4      	; 0x3744 <__divsf3+0x62>
    3740:	22 30       	cpi	r18, 0x02	; 2
    3742:	31 f4       	brne	.+12     	; 0x3750 <__divsf3+0x6e>
    3744:	23 17       	cp	r18, r19
    3746:	09 f0       	breq	.+2      	; 0x374a <__divsf3+0x68>
    3748:	6e c0       	rjmp	.+220    	; 0x3826 <__divsf3+0x144>
    374a:	63 ee       	ldi	r22, 0xE3	; 227
    374c:	71 e0       	ldi	r23, 0x01	; 1
    374e:	6e c0       	rjmp	.+220    	; 0x382c <__divsf3+0x14a>
    3750:	34 30       	cpi	r19, 0x04	; 4
    3752:	39 f4       	brne	.+14     	; 0x3762 <__divsf3+0x80>
    3754:	1d 86       	std	Y+13, r1	; 0x0d
    3756:	1e 86       	std	Y+14, r1	; 0x0e
    3758:	1f 86       	std	Y+15, r1	; 0x0f
    375a:	18 8a       	std	Y+16, r1	; 0x10
    375c:	1c 86       	std	Y+12, r1	; 0x0c
    375e:	1b 86       	std	Y+11, r1	; 0x0b
    3760:	04 c0       	rjmp	.+8      	; 0x376a <__divsf3+0x88>
    3762:	32 30       	cpi	r19, 0x02	; 2
    3764:	21 f4       	brne	.+8      	; 0x376e <__divsf3+0x8c>
    3766:	84 e0       	ldi	r24, 0x04	; 4
    3768:	89 87       	std	Y+9, r24	; 0x09
    376a:	b7 01       	movw	r22, r14
    376c:	5f c0       	rjmp	.+190    	; 0x382c <__divsf3+0x14a>
    376e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3770:	3c 85       	ldd	r19, Y+12	; 0x0c
    3772:	8b 89       	ldd	r24, Y+19	; 0x13
    3774:	9c 89       	ldd	r25, Y+20	; 0x14
    3776:	28 1b       	sub	r18, r24
    3778:	39 0b       	sbc	r19, r25
    377a:	3c 87       	std	Y+12, r19	; 0x0c
    377c:	2b 87       	std	Y+11, r18	; 0x0b
    377e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3780:	fe 84       	ldd	r15, Y+14	; 0x0e
    3782:	0f 85       	ldd	r16, Y+15	; 0x0f
    3784:	18 89       	ldd	r17, Y+16	; 0x10
    3786:	ad 88       	ldd	r10, Y+21	; 0x15
    3788:	be 88       	ldd	r11, Y+22	; 0x16
    378a:	cf 88       	ldd	r12, Y+23	; 0x17
    378c:	d8 8c       	ldd	r13, Y+24	; 0x18
    378e:	ea 14       	cp	r14, r10
    3790:	fb 04       	cpc	r15, r11
    3792:	0c 05       	cpc	r16, r12
    3794:	1d 05       	cpc	r17, r13
    3796:	40 f4       	brcc	.+16     	; 0x37a8 <__divsf3+0xc6>
    3798:	ee 0c       	add	r14, r14
    379a:	ff 1c       	adc	r15, r15
    379c:	00 1f       	adc	r16, r16
    379e:	11 1f       	adc	r17, r17
    37a0:	21 50       	subi	r18, 0x01	; 1
    37a2:	30 40       	sbci	r19, 0x00	; 0
    37a4:	3c 87       	std	Y+12, r19	; 0x0c
    37a6:	2b 87       	std	Y+11, r18	; 0x0b
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 e0       	ldi	r20, 0x00	; 0
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	a0 e0       	ldi	r26, 0x00	; 0
    37b6:	b0 e4       	ldi	r27, 0x40	; 64
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	ea 14       	cp	r14, r10
    37be:	fb 04       	cpc	r15, r11
    37c0:	0c 05       	cpc	r16, r12
    37c2:	1d 05       	cpc	r17, r13
    37c4:	40 f0       	brcs	.+16     	; 0x37d6 <__divsf3+0xf4>
    37c6:	28 2b       	or	r18, r24
    37c8:	39 2b       	or	r19, r25
    37ca:	4a 2b       	or	r20, r26
    37cc:	5b 2b       	or	r21, r27
    37ce:	ea 18       	sub	r14, r10
    37d0:	fb 08       	sbc	r15, r11
    37d2:	0c 09       	sbc	r16, r12
    37d4:	1d 09       	sbc	r17, r13
    37d6:	b6 95       	lsr	r27
    37d8:	a7 95       	ror	r26
    37da:	97 95       	ror	r25
    37dc:	87 95       	ror	r24
    37de:	ee 0c       	add	r14, r14
    37e0:	ff 1c       	adc	r15, r15
    37e2:	00 1f       	adc	r16, r16
    37e4:	11 1f       	adc	r17, r17
    37e6:	6f 5f       	subi	r22, 0xFF	; 255
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ea:	6f 31       	cpi	r22, 0x1F	; 31
    37ec:	71 05       	cpc	r23, r1
    37ee:	31 f7       	brne	.-52     	; 0x37bc <__divsf3+0xda>
    37f0:	da 01       	movw	r26, r20
    37f2:	c9 01       	movw	r24, r18
    37f4:	8f 77       	andi	r24, 0x7F	; 127
    37f6:	90 70       	andi	r25, 0x00	; 0
    37f8:	a0 70       	andi	r26, 0x00	; 0
    37fa:	b0 70       	andi	r27, 0x00	; 0
    37fc:	80 34       	cpi	r24, 0x40	; 64
    37fe:	91 05       	cpc	r25, r1
    3800:	a1 05       	cpc	r26, r1
    3802:	b1 05       	cpc	r27, r1
    3804:	61 f4       	brne	.+24     	; 0x381e <__divsf3+0x13c>
    3806:	27 fd       	sbrc	r18, 7
    3808:	0a c0       	rjmp	.+20     	; 0x381e <__divsf3+0x13c>
    380a:	e1 14       	cp	r14, r1
    380c:	f1 04       	cpc	r15, r1
    380e:	01 05       	cpc	r16, r1
    3810:	11 05       	cpc	r17, r1
    3812:	29 f0       	breq	.+10     	; 0x381e <__divsf3+0x13c>
    3814:	20 5c       	subi	r18, 0xC0	; 192
    3816:	3f 4f       	sbci	r19, 0xFF	; 255
    3818:	4f 4f       	sbci	r20, 0xFF	; 255
    381a:	5f 4f       	sbci	r21, 0xFF	; 255
    381c:	20 78       	andi	r18, 0x80	; 128
    381e:	2d 87       	std	Y+13, r18	; 0x0d
    3820:	3e 87       	std	Y+14, r19	; 0x0e
    3822:	4f 87       	std	Y+15, r20	; 0x0f
    3824:	58 8b       	std	Y+16, r21	; 0x10
    3826:	be 01       	movw	r22, r28
    3828:	67 5f       	subi	r22, 0xF7	; 247
    382a:	7f 4f       	sbci	r23, 0xFF	; 255
    382c:	cb 01       	movw	r24, r22
    382e:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__pack_f>
    3832:	68 96       	adiw	r28, 0x18	; 24
    3834:	ea e0       	ldi	r30, 0x0A	; 10
    3836:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__epilogue_restores__+0x10>

0000383a <__eqsf2>:
    383a:	a8 e1       	ldi	r26, 0x18	; 24
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	e3 e2       	ldi	r30, 0x23	; 35
    3840:	fc e1       	ldi	r31, 0x1C	; 28
    3842:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
    3846:	69 83       	std	Y+1, r22	; 0x01
    3848:	7a 83       	std	Y+2, r23	; 0x02
    384a:	8b 83       	std	Y+3, r24	; 0x03
    384c:	9c 83       	std	Y+4, r25	; 0x04
    384e:	2d 83       	std	Y+5, r18	; 0x05
    3850:	3e 83       	std	Y+6, r19	; 0x06
    3852:	4f 83       	std	Y+7, r20	; 0x07
    3854:	58 87       	std	Y+8, r21	; 0x08
    3856:	89 e0       	ldi	r24, 0x09	; 9
    3858:	e8 2e       	mov	r14, r24
    385a:	f1 2c       	mov	r15, r1
    385c:	ec 0e       	add	r14, r28
    385e:	fd 1e       	adc	r15, r29
    3860:	ce 01       	movw	r24, r28
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	b7 01       	movw	r22, r14
    3866:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    386a:	8e 01       	movw	r16, r28
    386c:	0f 5e       	subi	r16, 0xEF	; 239
    386e:	1f 4f       	sbci	r17, 0xFF	; 255
    3870:	ce 01       	movw	r24, r28
    3872:	05 96       	adiw	r24, 0x05	; 5
    3874:	b8 01       	movw	r22, r16
    3876:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    387a:	89 85       	ldd	r24, Y+9	; 0x09
    387c:	82 30       	cpi	r24, 0x02	; 2
    387e:	40 f0       	brcs	.+16     	; 0x3890 <__eqsf2+0x56>
    3880:	89 89       	ldd	r24, Y+17	; 0x11
    3882:	82 30       	cpi	r24, 0x02	; 2
    3884:	28 f0       	brcs	.+10     	; 0x3890 <__eqsf2+0x56>
    3886:	c7 01       	movw	r24, r14
    3888:	b8 01       	movw	r22, r16
    388a:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fpcmp_parts_f>
    388e:	01 c0       	rjmp	.+2      	; 0x3892 <__eqsf2+0x58>
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	68 96       	adiw	r28, 0x18	; 24
    3894:	e6 e0       	ldi	r30, 0x06	; 6
    3896:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

0000389a <__nesf2>:
    389a:	a8 e1       	ldi	r26, 0x18	; 24
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	e3 e5       	ldi	r30, 0x53	; 83
    38a0:	fc e1       	ldi	r31, 0x1C	; 28
    38a2:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
    38a6:	69 83       	std	Y+1, r22	; 0x01
    38a8:	7a 83       	std	Y+2, r23	; 0x02
    38aa:	8b 83       	std	Y+3, r24	; 0x03
    38ac:	9c 83       	std	Y+4, r25	; 0x04
    38ae:	2d 83       	std	Y+5, r18	; 0x05
    38b0:	3e 83       	std	Y+6, r19	; 0x06
    38b2:	4f 83       	std	Y+7, r20	; 0x07
    38b4:	58 87       	std	Y+8, r21	; 0x08
    38b6:	89 e0       	ldi	r24, 0x09	; 9
    38b8:	e8 2e       	mov	r14, r24
    38ba:	f1 2c       	mov	r15, r1
    38bc:	ec 0e       	add	r14, r28
    38be:	fd 1e       	adc	r15, r29
    38c0:	ce 01       	movw	r24, r28
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	b7 01       	movw	r22, r14
    38c6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    38ca:	8e 01       	movw	r16, r28
    38cc:	0f 5e       	subi	r16, 0xEF	; 239
    38ce:	1f 4f       	sbci	r17, 0xFF	; 255
    38d0:	ce 01       	movw	r24, r28
    38d2:	05 96       	adiw	r24, 0x05	; 5
    38d4:	b8 01       	movw	r22, r16
    38d6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	82 30       	cpi	r24, 0x02	; 2
    38de:	40 f0       	brcs	.+16     	; 0x38f0 <__nesf2+0x56>
    38e0:	89 89       	ldd	r24, Y+17	; 0x11
    38e2:	82 30       	cpi	r24, 0x02	; 2
    38e4:	28 f0       	brcs	.+10     	; 0x38f0 <__nesf2+0x56>
    38e6:	c7 01       	movw	r24, r14
    38e8:	b8 01       	movw	r22, r16
    38ea:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fpcmp_parts_f>
    38ee:	01 c0       	rjmp	.+2      	; 0x38f2 <__nesf2+0x58>
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	68 96       	adiw	r28, 0x18	; 24
    38f4:	e6 e0       	ldi	r30, 0x06	; 6
    38f6:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

000038fa <__gtsf2>:
    38fa:	a8 e1       	ldi	r26, 0x18	; 24
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	e3 e8       	ldi	r30, 0x83	; 131
    3900:	fc e1       	ldi	r31, 0x1C	; 28
    3902:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
    3906:	69 83       	std	Y+1, r22	; 0x01
    3908:	7a 83       	std	Y+2, r23	; 0x02
    390a:	8b 83       	std	Y+3, r24	; 0x03
    390c:	9c 83       	std	Y+4, r25	; 0x04
    390e:	2d 83       	std	Y+5, r18	; 0x05
    3910:	3e 83       	std	Y+6, r19	; 0x06
    3912:	4f 83       	std	Y+7, r20	; 0x07
    3914:	58 87       	std	Y+8, r21	; 0x08
    3916:	89 e0       	ldi	r24, 0x09	; 9
    3918:	e8 2e       	mov	r14, r24
    391a:	f1 2c       	mov	r15, r1
    391c:	ec 0e       	add	r14, r28
    391e:	fd 1e       	adc	r15, r29
    3920:	ce 01       	movw	r24, r28
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	b7 01       	movw	r22, r14
    3926:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    392a:	8e 01       	movw	r16, r28
    392c:	0f 5e       	subi	r16, 0xEF	; 239
    392e:	1f 4f       	sbci	r17, 0xFF	; 255
    3930:	ce 01       	movw	r24, r28
    3932:	05 96       	adiw	r24, 0x05	; 5
    3934:	b8 01       	movw	r22, r16
    3936:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    393a:	89 85       	ldd	r24, Y+9	; 0x09
    393c:	82 30       	cpi	r24, 0x02	; 2
    393e:	40 f0       	brcs	.+16     	; 0x3950 <__gtsf2+0x56>
    3940:	89 89       	ldd	r24, Y+17	; 0x11
    3942:	82 30       	cpi	r24, 0x02	; 2
    3944:	28 f0       	brcs	.+10     	; 0x3950 <__gtsf2+0x56>
    3946:	c7 01       	movw	r24, r14
    3948:	b8 01       	movw	r22, r16
    394a:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fpcmp_parts_f>
    394e:	01 c0       	rjmp	.+2      	; 0x3952 <__gtsf2+0x58>
    3950:	8f ef       	ldi	r24, 0xFF	; 255
    3952:	68 96       	adiw	r28, 0x18	; 24
    3954:	e6 e0       	ldi	r30, 0x06	; 6
    3956:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

0000395a <__gesf2>:
    395a:	a8 e1       	ldi	r26, 0x18	; 24
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	e3 eb       	ldi	r30, 0xB3	; 179
    3960:	fc e1       	ldi	r31, 0x1C	; 28
    3962:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
    3966:	69 83       	std	Y+1, r22	; 0x01
    3968:	7a 83       	std	Y+2, r23	; 0x02
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	9c 83       	std	Y+4, r25	; 0x04
    396e:	2d 83       	std	Y+5, r18	; 0x05
    3970:	3e 83       	std	Y+6, r19	; 0x06
    3972:	4f 83       	std	Y+7, r20	; 0x07
    3974:	58 87       	std	Y+8, r21	; 0x08
    3976:	89 e0       	ldi	r24, 0x09	; 9
    3978:	e8 2e       	mov	r14, r24
    397a:	f1 2c       	mov	r15, r1
    397c:	ec 0e       	add	r14, r28
    397e:	fd 1e       	adc	r15, r29
    3980:	ce 01       	movw	r24, r28
    3982:	01 96       	adiw	r24, 0x01	; 1
    3984:	b7 01       	movw	r22, r14
    3986:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    398a:	8e 01       	movw	r16, r28
    398c:	0f 5e       	subi	r16, 0xEF	; 239
    398e:	1f 4f       	sbci	r17, 0xFF	; 255
    3990:	ce 01       	movw	r24, r28
    3992:	05 96       	adiw	r24, 0x05	; 5
    3994:	b8 01       	movw	r22, r16
    3996:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    399a:	89 85       	ldd	r24, Y+9	; 0x09
    399c:	82 30       	cpi	r24, 0x02	; 2
    399e:	40 f0       	brcs	.+16     	; 0x39b0 <__gesf2+0x56>
    39a0:	89 89       	ldd	r24, Y+17	; 0x11
    39a2:	82 30       	cpi	r24, 0x02	; 2
    39a4:	28 f0       	brcs	.+10     	; 0x39b0 <__gesf2+0x56>
    39a6:	c7 01       	movw	r24, r14
    39a8:	b8 01       	movw	r22, r16
    39aa:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fpcmp_parts_f>
    39ae:	01 c0       	rjmp	.+2      	; 0x39b2 <__gesf2+0x58>
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	68 96       	adiw	r28, 0x18	; 24
    39b4:	e6 e0       	ldi	r30, 0x06	; 6
    39b6:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

000039ba <__ltsf2>:
    39ba:	a8 e1       	ldi	r26, 0x18	; 24
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e3 ee       	ldi	r30, 0xE3	; 227
    39c0:	fc e1       	ldi	r31, 0x1C	; 28
    39c2:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
    39c6:	69 83       	std	Y+1, r22	; 0x01
    39c8:	7a 83       	std	Y+2, r23	; 0x02
    39ca:	8b 83       	std	Y+3, r24	; 0x03
    39cc:	9c 83       	std	Y+4, r25	; 0x04
    39ce:	2d 83       	std	Y+5, r18	; 0x05
    39d0:	3e 83       	std	Y+6, r19	; 0x06
    39d2:	4f 83       	std	Y+7, r20	; 0x07
    39d4:	58 87       	std	Y+8, r21	; 0x08
    39d6:	89 e0       	ldi	r24, 0x09	; 9
    39d8:	e8 2e       	mov	r14, r24
    39da:	f1 2c       	mov	r15, r1
    39dc:	ec 0e       	add	r14, r28
    39de:	fd 1e       	adc	r15, r29
    39e0:	ce 01       	movw	r24, r28
    39e2:	01 96       	adiw	r24, 0x01	; 1
    39e4:	b7 01       	movw	r22, r14
    39e6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    39ea:	8e 01       	movw	r16, r28
    39ec:	0f 5e       	subi	r16, 0xEF	; 239
    39ee:	1f 4f       	sbci	r17, 0xFF	; 255
    39f0:	ce 01       	movw	r24, r28
    39f2:	05 96       	adiw	r24, 0x05	; 5
    39f4:	b8 01       	movw	r22, r16
    39f6:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	82 30       	cpi	r24, 0x02	; 2
    39fe:	40 f0       	brcs	.+16     	; 0x3a10 <__ltsf2+0x56>
    3a00:	89 89       	ldd	r24, Y+17	; 0x11
    3a02:	82 30       	cpi	r24, 0x02	; 2
    3a04:	28 f0       	brcs	.+10     	; 0x3a10 <__ltsf2+0x56>
    3a06:	c7 01       	movw	r24, r14
    3a08:	b8 01       	movw	r22, r16
    3a0a:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <__fpcmp_parts_f>
    3a0e:	01 c0       	rjmp	.+2      	; 0x3a12 <__ltsf2+0x58>
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	68 96       	adiw	r28, 0x18	; 24
    3a14:	e6 e0       	ldi	r30, 0x06	; 6
    3a16:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

00003a1a <__floatsisf>:
    3a1a:	a8 e0       	ldi	r26, 0x08	; 8
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	e3 e1       	ldi	r30, 0x13	; 19
    3a20:	fd e1       	ldi	r31, 0x1D	; 29
    3a22:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__+0x12>
    3a26:	9b 01       	movw	r18, r22
    3a28:	ac 01       	movw	r20, r24
    3a2a:	83 e0       	ldi	r24, 0x03	; 3
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	da 01       	movw	r26, r20
    3a30:	c9 01       	movw	r24, r18
    3a32:	88 27       	eor	r24, r24
    3a34:	b7 fd       	sbrc	r27, 7
    3a36:	83 95       	inc	r24
    3a38:	99 27       	eor	r25, r25
    3a3a:	aa 27       	eor	r26, r26
    3a3c:	bb 27       	eor	r27, r27
    3a3e:	b8 2e       	mov	r11, r24
    3a40:	21 15       	cp	r18, r1
    3a42:	31 05       	cpc	r19, r1
    3a44:	41 05       	cpc	r20, r1
    3a46:	51 05       	cpc	r21, r1
    3a48:	19 f4       	brne	.+6      	; 0x3a50 <__floatsisf+0x36>
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	3a c0       	rjmp	.+116    	; 0x3ac4 <__floatsisf+0xaa>
    3a50:	88 23       	and	r24, r24
    3a52:	a9 f0       	breq	.+42     	; 0x3a7e <__floatsisf+0x64>
    3a54:	20 30       	cpi	r18, 0x00	; 0
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	38 07       	cpc	r19, r24
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	48 07       	cpc	r20, r24
    3a5e:	80 e8       	ldi	r24, 0x80	; 128
    3a60:	58 07       	cpc	r21, r24
    3a62:	29 f4       	brne	.+10     	; 0x3a6e <__floatsisf+0x54>
    3a64:	60 e0       	ldi	r22, 0x00	; 0
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	9f ec       	ldi	r25, 0xCF	; 207
    3a6c:	30 c0       	rjmp	.+96     	; 0x3ace <__floatsisf+0xb4>
    3a6e:	ee 24       	eor	r14, r14
    3a70:	ff 24       	eor	r15, r15
    3a72:	87 01       	movw	r16, r14
    3a74:	e2 1a       	sub	r14, r18
    3a76:	f3 0a       	sbc	r15, r19
    3a78:	04 0b       	sbc	r16, r20
    3a7a:	15 0b       	sbc	r17, r21
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <__floatsisf+0x68>
    3a7e:	79 01       	movw	r14, r18
    3a80:	8a 01       	movw	r16, r20
    3a82:	8e e1       	ldi	r24, 0x1E	; 30
    3a84:	c8 2e       	mov	r12, r24
    3a86:	d1 2c       	mov	r13, r1
    3a88:	dc 82       	std	Y+4, r13	; 0x04
    3a8a:	cb 82       	std	Y+3, r12	; 0x03
    3a8c:	ed 82       	std	Y+5, r14	; 0x05
    3a8e:	fe 82       	std	Y+6, r15	; 0x06
    3a90:	0f 83       	std	Y+7, r16	; 0x07
    3a92:	18 87       	std	Y+8, r17	; 0x08
    3a94:	c8 01       	movw	r24, r16
    3a96:	b7 01       	movw	r22, r14
    3a98:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <__clzsi2>
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	18 16       	cp	r1, r24
    3aa0:	19 06       	cpc	r1, r25
    3aa2:	84 f4       	brge	.+32     	; 0x3ac4 <__floatsisf+0xaa>
    3aa4:	08 2e       	mov	r0, r24
    3aa6:	04 c0       	rjmp	.+8      	; 0x3ab0 <__floatsisf+0x96>
    3aa8:	ee 0c       	add	r14, r14
    3aaa:	ff 1c       	adc	r15, r15
    3aac:	00 1f       	adc	r16, r16
    3aae:	11 1f       	adc	r17, r17
    3ab0:	0a 94       	dec	r0
    3ab2:	d2 f7       	brpl	.-12     	; 0x3aa8 <__floatsisf+0x8e>
    3ab4:	ed 82       	std	Y+5, r14	; 0x05
    3ab6:	fe 82       	std	Y+6, r15	; 0x06
    3ab8:	0f 83       	std	Y+7, r16	; 0x07
    3aba:	18 87       	std	Y+8, r17	; 0x08
    3abc:	c8 1a       	sub	r12, r24
    3abe:	d9 0a       	sbc	r13, r25
    3ac0:	dc 82       	std	Y+4, r13	; 0x04
    3ac2:	cb 82       	std	Y+3, r12	; 0x03
    3ac4:	ba 82       	std	Y+2, r11	; 0x02
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	01 96       	adiw	r24, 0x01	; 1
    3aca:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__pack_f>
    3ace:	28 96       	adiw	r28, 0x08	; 8
    3ad0:	e9 e0       	ldi	r30, 0x09	; 9
    3ad2:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__+0x12>

00003ad6 <__fixsfsi>:
    3ad6:	ac e0       	ldi	r26, 0x0C	; 12
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	e1 e7       	ldi	r30, 0x71	; 113
    3adc:	fd e1       	ldi	r31, 0x1D	; 29
    3ade:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__prologue_saves__+0x20>
    3ae2:	69 83       	std	Y+1, r22	; 0x01
    3ae4:	7a 83       	std	Y+2, r23	; 0x02
    3ae6:	8b 83       	std	Y+3, r24	; 0x03
    3ae8:	9c 83       	std	Y+4, r25	; 0x04
    3aea:	ce 01       	movw	r24, r28
    3aec:	01 96       	adiw	r24, 0x01	; 1
    3aee:	be 01       	movw	r22, r28
    3af0:	6b 5f       	subi	r22, 0xFB	; 251
    3af2:	7f 4f       	sbci	r23, 0xFF	; 255
    3af4:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__unpack_f>
    3af8:	8d 81       	ldd	r24, Y+5	; 0x05
    3afa:	82 30       	cpi	r24, 0x02	; 2
    3afc:	61 f1       	breq	.+88     	; 0x3b56 <__fixsfsi+0x80>
    3afe:	82 30       	cpi	r24, 0x02	; 2
    3b00:	50 f1       	brcs	.+84     	; 0x3b56 <__fixsfsi+0x80>
    3b02:	84 30       	cpi	r24, 0x04	; 4
    3b04:	21 f4       	brne	.+8      	; 0x3b0e <__fixsfsi+0x38>
    3b06:	8e 81       	ldd	r24, Y+6	; 0x06
    3b08:	88 23       	and	r24, r24
    3b0a:	51 f1       	breq	.+84     	; 0x3b60 <__fixsfsi+0x8a>
    3b0c:	2e c0       	rjmp	.+92     	; 0x3b6a <__fixsfsi+0x94>
    3b0e:	2f 81       	ldd	r18, Y+7	; 0x07
    3b10:	38 85       	ldd	r19, Y+8	; 0x08
    3b12:	37 fd       	sbrc	r19, 7
    3b14:	20 c0       	rjmp	.+64     	; 0x3b56 <__fixsfsi+0x80>
    3b16:	6e 81       	ldd	r22, Y+6	; 0x06
    3b18:	2f 31       	cpi	r18, 0x1F	; 31
    3b1a:	31 05       	cpc	r19, r1
    3b1c:	1c f0       	brlt	.+6      	; 0x3b24 <__fixsfsi+0x4e>
    3b1e:	66 23       	and	r22, r22
    3b20:	f9 f0       	breq	.+62     	; 0x3b60 <__fixsfsi+0x8a>
    3b22:	23 c0       	rjmp	.+70     	; 0x3b6a <__fixsfsi+0x94>
    3b24:	8e e1       	ldi	r24, 0x1E	; 30
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	82 1b       	sub	r24, r18
    3b2a:	93 0b       	sbc	r25, r19
    3b2c:	29 85       	ldd	r18, Y+9	; 0x09
    3b2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b30:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b32:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b34:	04 c0       	rjmp	.+8      	; 0x3b3e <__fixsfsi+0x68>
    3b36:	56 95       	lsr	r21
    3b38:	47 95       	ror	r20
    3b3a:	37 95       	ror	r19
    3b3c:	27 95       	ror	r18
    3b3e:	8a 95       	dec	r24
    3b40:	d2 f7       	brpl	.-12     	; 0x3b36 <__fixsfsi+0x60>
    3b42:	66 23       	and	r22, r22
    3b44:	b1 f0       	breq	.+44     	; 0x3b72 <__fixsfsi+0x9c>
    3b46:	50 95       	com	r21
    3b48:	40 95       	com	r20
    3b4a:	30 95       	com	r19
    3b4c:	21 95       	neg	r18
    3b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b50:	4f 4f       	sbci	r20, 0xFF	; 255
    3b52:	5f 4f       	sbci	r21, 0xFF	; 255
    3b54:	0e c0       	rjmp	.+28     	; 0x3b72 <__fixsfsi+0x9c>
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	09 c0       	rjmp	.+18     	; 0x3b72 <__fixsfsi+0x9c>
    3b60:	2f ef       	ldi	r18, 0xFF	; 255
    3b62:	3f ef       	ldi	r19, 0xFF	; 255
    3b64:	4f ef       	ldi	r20, 0xFF	; 255
    3b66:	5f e7       	ldi	r21, 0x7F	; 127
    3b68:	04 c0       	rjmp	.+8      	; 0x3b72 <__fixsfsi+0x9c>
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	50 e8       	ldi	r21, 0x80	; 128
    3b72:	b9 01       	movw	r22, r18
    3b74:	ca 01       	movw	r24, r20
    3b76:	2c 96       	adiw	r28, 0x0c	; 12
    3b78:	e2 e0       	ldi	r30, 0x02	; 2
    3b7a:	0c 94 ae 20 	jmp	0x415c	; 0x415c <__epilogue_restores__+0x20>

00003b7e <__floatunsisf>:
    3b7e:	a8 e0       	ldi	r26, 0x08	; 8
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	e5 ec       	ldi	r30, 0xC5	; 197
    3b84:	fd e1       	ldi	r31, 0x1D	; 29
    3b86:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__prologue_saves__+0x10>
    3b8a:	7b 01       	movw	r14, r22
    3b8c:	8c 01       	movw	r16, r24
    3b8e:	61 15       	cp	r22, r1
    3b90:	71 05       	cpc	r23, r1
    3b92:	81 05       	cpc	r24, r1
    3b94:	91 05       	cpc	r25, r1
    3b96:	19 f4       	brne	.+6      	; 0x3b9e <__floatunsisf+0x20>
    3b98:	82 e0       	ldi	r24, 0x02	; 2
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	60 c0       	rjmp	.+192    	; 0x3c5e <__floatunsisf+0xe0>
    3b9e:	83 e0       	ldi	r24, 0x03	; 3
    3ba0:	89 83       	std	Y+1, r24	; 0x01
    3ba2:	8e e1       	ldi	r24, 0x1E	; 30
    3ba4:	c8 2e       	mov	r12, r24
    3ba6:	d1 2c       	mov	r13, r1
    3ba8:	dc 82       	std	Y+4, r13	; 0x04
    3baa:	cb 82       	std	Y+3, r12	; 0x03
    3bac:	ed 82       	std	Y+5, r14	; 0x05
    3bae:	fe 82       	std	Y+6, r15	; 0x06
    3bb0:	0f 83       	std	Y+7, r16	; 0x07
    3bb2:	18 87       	std	Y+8, r17	; 0x08
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	b7 01       	movw	r22, r14
    3bb8:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <__clzsi2>
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	31 97       	sbiw	r30, 0x01	; 1
    3bc0:	f7 ff       	sbrs	r31, 7
    3bc2:	3b c0       	rjmp	.+118    	; 0x3c3a <__floatunsisf+0xbc>
    3bc4:	22 27       	eor	r18, r18
    3bc6:	33 27       	eor	r19, r19
    3bc8:	2e 1b       	sub	r18, r30
    3bca:	3f 0b       	sbc	r19, r31
    3bcc:	57 01       	movw	r10, r14
    3bce:	68 01       	movw	r12, r16
    3bd0:	02 2e       	mov	r0, r18
    3bd2:	04 c0       	rjmp	.+8      	; 0x3bdc <__floatunsisf+0x5e>
    3bd4:	d6 94       	lsr	r13
    3bd6:	c7 94       	ror	r12
    3bd8:	b7 94       	ror	r11
    3bda:	a7 94       	ror	r10
    3bdc:	0a 94       	dec	r0
    3bde:	d2 f7       	brpl	.-12     	; 0x3bd4 <__floatunsisf+0x56>
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	60 e0       	ldi	r22, 0x00	; 0
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	a0 e0       	ldi	r26, 0x00	; 0
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	04 c0       	rjmp	.+8      	; 0x3bfa <__floatunsisf+0x7c>
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	aa 1f       	adc	r26, r26
    3bf8:	bb 1f       	adc	r27, r27
    3bfa:	2a 95       	dec	r18
    3bfc:	d2 f7       	brpl	.-12     	; 0x3bf2 <__floatunsisf+0x74>
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	a1 09       	sbc	r26, r1
    3c02:	b1 09       	sbc	r27, r1
    3c04:	8e 21       	and	r24, r14
    3c06:	9f 21       	and	r25, r15
    3c08:	a0 23       	and	r26, r16
    3c0a:	b1 23       	and	r27, r17
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	a1 05       	cpc	r26, r1
    3c10:	b1 05       	cpc	r27, r1
    3c12:	21 f0       	breq	.+8      	; 0x3c1c <__floatunsisf+0x9e>
    3c14:	41 e0       	ldi	r20, 0x01	; 1
    3c16:	50 e0       	ldi	r21, 0x00	; 0
    3c18:	60 e0       	ldi	r22, 0x00	; 0
    3c1a:	70 e0       	ldi	r23, 0x00	; 0
    3c1c:	4a 29       	or	r20, r10
    3c1e:	5b 29       	or	r21, r11
    3c20:	6c 29       	or	r22, r12
    3c22:	7d 29       	or	r23, r13
    3c24:	4d 83       	std	Y+5, r20	; 0x05
    3c26:	5e 83       	std	Y+6, r21	; 0x06
    3c28:	6f 83       	std	Y+7, r22	; 0x07
    3c2a:	78 87       	std	Y+8, r23	; 0x08
    3c2c:	8e e1       	ldi	r24, 0x1E	; 30
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	8e 1b       	sub	r24, r30
    3c32:	9f 0b       	sbc	r25, r31
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	8b 83       	std	Y+3, r24	; 0x03
    3c38:	12 c0       	rjmp	.+36     	; 0x3c5e <__floatunsisf+0xe0>
    3c3a:	30 97       	sbiw	r30, 0x00	; 0
    3c3c:	81 f0       	breq	.+32     	; 0x3c5e <__floatunsisf+0xe0>
    3c3e:	0e 2e       	mov	r0, r30
    3c40:	04 c0       	rjmp	.+8      	; 0x3c4a <__floatunsisf+0xcc>
    3c42:	ee 0c       	add	r14, r14
    3c44:	ff 1c       	adc	r15, r15
    3c46:	00 1f       	adc	r16, r16
    3c48:	11 1f       	adc	r17, r17
    3c4a:	0a 94       	dec	r0
    3c4c:	d2 f7       	brpl	.-12     	; 0x3c42 <__floatunsisf+0xc4>
    3c4e:	ed 82       	std	Y+5, r14	; 0x05
    3c50:	fe 82       	std	Y+6, r15	; 0x06
    3c52:	0f 83       	std	Y+7, r16	; 0x07
    3c54:	18 87       	std	Y+8, r17	; 0x08
    3c56:	ce 1a       	sub	r12, r30
    3c58:	df 0a       	sbc	r13, r31
    3c5a:	dc 82       	std	Y+4, r13	; 0x04
    3c5c:	cb 82       	std	Y+3, r12	; 0x03
    3c5e:	1a 82       	std	Y+2, r1	; 0x02
    3c60:	ce 01       	movw	r24, r28
    3c62:	01 96       	adiw	r24, 0x01	; 1
    3c64:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <__pack_f>
    3c68:	28 96       	adiw	r28, 0x08	; 8
    3c6a:	ea e0       	ldi	r30, 0x0A	; 10
    3c6c:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__epilogue_restores__+0x10>

00003c70 <__clzsi2>:
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	0f 93       	push	r16
    3c76:	1f 93       	push	r17
    3c78:	7b 01       	movw	r14, r22
    3c7a:	8c 01       	movw	r16, r24
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	e8 16       	cp	r14, r24
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	f8 06       	cpc	r15, r24
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	08 07       	cpc	r16, r24
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	18 07       	cpc	r17, r24
    3c8c:	88 f4       	brcc	.+34     	; 0x3cb0 <__clzsi2+0x40>
    3c8e:	8f ef       	ldi	r24, 0xFF	; 255
    3c90:	e8 16       	cp	r14, r24
    3c92:	f1 04       	cpc	r15, r1
    3c94:	01 05       	cpc	r16, r1
    3c96:	11 05       	cpc	r17, r1
    3c98:	31 f0       	breq	.+12     	; 0x3ca6 <__clzsi2+0x36>
    3c9a:	28 f0       	brcs	.+10     	; 0x3ca6 <__clzsi2+0x36>
    3c9c:	88 e0       	ldi	r24, 0x08	; 8
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	a0 e0       	ldi	r26, 0x00	; 0
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	17 c0       	rjmp	.+46     	; 0x3cd4 <__clzsi2+0x64>
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	a0 e0       	ldi	r26, 0x00	; 0
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	12 c0       	rjmp	.+36     	; 0x3cd4 <__clzsi2+0x64>
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	e8 16       	cp	r14, r24
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	f8 06       	cpc	r15, r24
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	08 07       	cpc	r16, r24
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	18 07       	cpc	r17, r24
    3cc0:	28 f0       	brcs	.+10     	; 0x3ccc <__clzsi2+0x5c>
    3cc2:	88 e1       	ldi	r24, 0x18	; 24
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	a0 e0       	ldi	r26, 0x00	; 0
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	04 c0       	rjmp	.+8      	; 0x3cd4 <__clzsi2+0x64>
    3ccc:	80 e1       	ldi	r24, 0x10	; 16
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	a0 e0       	ldi	r26, 0x00	; 0
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	20 e2       	ldi	r18, 0x20	; 32
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	28 1b       	sub	r18, r24
    3cde:	39 0b       	sbc	r19, r25
    3ce0:	4a 0b       	sbc	r20, r26
    3ce2:	5b 0b       	sbc	r21, r27
    3ce4:	04 c0       	rjmp	.+8      	; 0x3cee <__clzsi2+0x7e>
    3ce6:	16 95       	lsr	r17
    3ce8:	07 95       	ror	r16
    3cea:	f7 94       	ror	r15
    3cec:	e7 94       	ror	r14
    3cee:	8a 95       	dec	r24
    3cf0:	d2 f7       	brpl	.-12     	; 0x3ce6 <__clzsi2+0x76>
    3cf2:	f7 01       	movw	r30, r14
    3cf4:	e5 51       	subi	r30, 0x15	; 21
    3cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf8:	80 81       	ld	r24, Z
    3cfa:	28 1b       	sub	r18, r24
    3cfc:	31 09       	sbc	r19, r1
    3cfe:	41 09       	sbc	r20, r1
    3d00:	51 09       	sbc	r21, r1
    3d02:	c9 01       	movw	r24, r18
    3d04:	1f 91       	pop	r17
    3d06:	0f 91       	pop	r16
    3d08:	ff 90       	pop	r15
    3d0a:	ef 90       	pop	r14
    3d0c:	08 95       	ret

00003d0e <__pack_f>:
    3d0e:	df 92       	push	r13
    3d10:	ef 92       	push	r14
    3d12:	ff 92       	push	r15
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	fc 01       	movw	r30, r24
    3d1a:	e4 80       	ldd	r14, Z+4	; 0x04
    3d1c:	f5 80       	ldd	r15, Z+5	; 0x05
    3d1e:	06 81       	ldd	r16, Z+6	; 0x06
    3d20:	17 81       	ldd	r17, Z+7	; 0x07
    3d22:	d1 80       	ldd	r13, Z+1	; 0x01
    3d24:	80 81       	ld	r24, Z
    3d26:	82 30       	cpi	r24, 0x02	; 2
    3d28:	48 f4       	brcc	.+18     	; 0x3d3c <__pack_f+0x2e>
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	a0 e1       	ldi	r26, 0x10	; 16
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	e8 2a       	or	r14, r24
    3d34:	f9 2a       	or	r15, r25
    3d36:	0a 2b       	or	r16, r26
    3d38:	1b 2b       	or	r17, r27
    3d3a:	a5 c0       	rjmp	.+330    	; 0x3e86 <__pack_f+0x178>
    3d3c:	84 30       	cpi	r24, 0x04	; 4
    3d3e:	09 f4       	brne	.+2      	; 0x3d42 <__pack_f+0x34>
    3d40:	9f c0       	rjmp	.+318    	; 0x3e80 <__pack_f+0x172>
    3d42:	82 30       	cpi	r24, 0x02	; 2
    3d44:	21 f4       	brne	.+8      	; 0x3d4e <__pack_f+0x40>
    3d46:	ee 24       	eor	r14, r14
    3d48:	ff 24       	eor	r15, r15
    3d4a:	87 01       	movw	r16, r14
    3d4c:	05 c0       	rjmp	.+10     	; 0x3d58 <__pack_f+0x4a>
    3d4e:	e1 14       	cp	r14, r1
    3d50:	f1 04       	cpc	r15, r1
    3d52:	01 05       	cpc	r16, r1
    3d54:	11 05       	cpc	r17, r1
    3d56:	19 f4       	brne	.+6      	; 0x3d5e <__pack_f+0x50>
    3d58:	e0 e0       	ldi	r30, 0x00	; 0
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	96 c0       	rjmp	.+300    	; 0x3e8a <__pack_f+0x17c>
    3d5e:	62 81       	ldd	r22, Z+2	; 0x02
    3d60:	73 81       	ldd	r23, Z+3	; 0x03
    3d62:	9f ef       	ldi	r25, 0xFF	; 255
    3d64:	62 38       	cpi	r22, 0x82	; 130
    3d66:	79 07       	cpc	r23, r25
    3d68:	0c f0       	brlt	.+2      	; 0x3d6c <__pack_f+0x5e>
    3d6a:	5b c0       	rjmp	.+182    	; 0x3e22 <__pack_f+0x114>
    3d6c:	22 e8       	ldi	r18, 0x82	; 130
    3d6e:	3f ef       	ldi	r19, 0xFF	; 255
    3d70:	26 1b       	sub	r18, r22
    3d72:	37 0b       	sbc	r19, r23
    3d74:	2a 31       	cpi	r18, 0x1A	; 26
    3d76:	31 05       	cpc	r19, r1
    3d78:	2c f0       	brlt	.+10     	; 0x3d84 <__pack_f+0x76>
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	2a c0       	rjmp	.+84     	; 0x3dd8 <__pack_f+0xca>
    3d84:	b8 01       	movw	r22, r16
    3d86:	a7 01       	movw	r20, r14
    3d88:	02 2e       	mov	r0, r18
    3d8a:	04 c0       	rjmp	.+8      	; 0x3d94 <__pack_f+0x86>
    3d8c:	76 95       	lsr	r23
    3d8e:	67 95       	ror	r22
    3d90:	57 95       	ror	r21
    3d92:	47 95       	ror	r20
    3d94:	0a 94       	dec	r0
    3d96:	d2 f7       	brpl	.-12     	; 0x3d8c <__pack_f+0x7e>
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	a0 e0       	ldi	r26, 0x00	; 0
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	04 c0       	rjmp	.+8      	; 0x3daa <__pack_f+0x9c>
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	aa 1f       	adc	r26, r26
    3da8:	bb 1f       	adc	r27, r27
    3daa:	2a 95       	dec	r18
    3dac:	d2 f7       	brpl	.-12     	; 0x3da2 <__pack_f+0x94>
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	a1 09       	sbc	r26, r1
    3db2:	b1 09       	sbc	r27, r1
    3db4:	8e 21       	and	r24, r14
    3db6:	9f 21       	and	r25, r15
    3db8:	a0 23       	and	r26, r16
    3dba:	b1 23       	and	r27, r17
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	a1 05       	cpc	r26, r1
    3dc0:	b1 05       	cpc	r27, r1
    3dc2:	21 f0       	breq	.+8      	; 0x3dcc <__pack_f+0xbe>
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	a0 e0       	ldi	r26, 0x00	; 0
    3dca:	b0 e0       	ldi	r27, 0x00	; 0
    3dcc:	9a 01       	movw	r18, r20
    3dce:	ab 01       	movw	r20, r22
    3dd0:	28 2b       	or	r18, r24
    3dd2:	39 2b       	or	r19, r25
    3dd4:	4a 2b       	or	r20, r26
    3dd6:	5b 2b       	or	r21, r27
    3dd8:	da 01       	movw	r26, r20
    3dda:	c9 01       	movw	r24, r18
    3ddc:	8f 77       	andi	r24, 0x7F	; 127
    3dde:	90 70       	andi	r25, 0x00	; 0
    3de0:	a0 70       	andi	r26, 0x00	; 0
    3de2:	b0 70       	andi	r27, 0x00	; 0
    3de4:	80 34       	cpi	r24, 0x40	; 64
    3de6:	91 05       	cpc	r25, r1
    3de8:	a1 05       	cpc	r26, r1
    3dea:	b1 05       	cpc	r27, r1
    3dec:	39 f4       	brne	.+14     	; 0x3dfc <__pack_f+0xee>
    3dee:	27 ff       	sbrs	r18, 7
    3df0:	09 c0       	rjmp	.+18     	; 0x3e04 <__pack_f+0xf6>
    3df2:	20 5c       	subi	r18, 0xC0	; 192
    3df4:	3f 4f       	sbci	r19, 0xFF	; 255
    3df6:	4f 4f       	sbci	r20, 0xFF	; 255
    3df8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dfa:	04 c0       	rjmp	.+8      	; 0x3e04 <__pack_f+0xf6>
    3dfc:	21 5c       	subi	r18, 0xC1	; 193
    3dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    3e00:	4f 4f       	sbci	r20, 0xFF	; 255
    3e02:	5f 4f       	sbci	r21, 0xFF	; 255
    3e04:	e0 e0       	ldi	r30, 0x00	; 0
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	20 30       	cpi	r18, 0x00	; 0
    3e0a:	a0 e0       	ldi	r26, 0x00	; 0
    3e0c:	3a 07       	cpc	r19, r26
    3e0e:	a0 e0       	ldi	r26, 0x00	; 0
    3e10:	4a 07       	cpc	r20, r26
    3e12:	a0 e4       	ldi	r26, 0x40	; 64
    3e14:	5a 07       	cpc	r21, r26
    3e16:	10 f0       	brcs	.+4      	; 0x3e1c <__pack_f+0x10e>
    3e18:	e1 e0       	ldi	r30, 0x01	; 1
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	79 01       	movw	r14, r18
    3e1e:	8a 01       	movw	r16, r20
    3e20:	27 c0       	rjmp	.+78     	; 0x3e70 <__pack_f+0x162>
    3e22:	60 38       	cpi	r22, 0x80	; 128
    3e24:	71 05       	cpc	r23, r1
    3e26:	64 f5       	brge	.+88     	; 0x3e80 <__pack_f+0x172>
    3e28:	fb 01       	movw	r30, r22
    3e2a:	e1 58       	subi	r30, 0x81	; 129
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	d8 01       	movw	r26, r16
    3e30:	c7 01       	movw	r24, r14
    3e32:	8f 77       	andi	r24, 0x7F	; 127
    3e34:	90 70       	andi	r25, 0x00	; 0
    3e36:	a0 70       	andi	r26, 0x00	; 0
    3e38:	b0 70       	andi	r27, 0x00	; 0
    3e3a:	80 34       	cpi	r24, 0x40	; 64
    3e3c:	91 05       	cpc	r25, r1
    3e3e:	a1 05       	cpc	r26, r1
    3e40:	b1 05       	cpc	r27, r1
    3e42:	39 f4       	brne	.+14     	; 0x3e52 <__pack_f+0x144>
    3e44:	e7 fe       	sbrs	r14, 7
    3e46:	0d c0       	rjmp	.+26     	; 0x3e62 <__pack_f+0x154>
    3e48:	80 e4       	ldi	r24, 0x40	; 64
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	a0 e0       	ldi	r26, 0x00	; 0
    3e4e:	b0 e0       	ldi	r27, 0x00	; 0
    3e50:	04 c0       	rjmp	.+8      	; 0x3e5a <__pack_f+0x14c>
    3e52:	8f e3       	ldi	r24, 0x3F	; 63
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	a0 e0       	ldi	r26, 0x00	; 0
    3e58:	b0 e0       	ldi	r27, 0x00	; 0
    3e5a:	e8 0e       	add	r14, r24
    3e5c:	f9 1e       	adc	r15, r25
    3e5e:	0a 1f       	adc	r16, r26
    3e60:	1b 1f       	adc	r17, r27
    3e62:	17 ff       	sbrs	r17, 7
    3e64:	05 c0       	rjmp	.+10     	; 0x3e70 <__pack_f+0x162>
    3e66:	16 95       	lsr	r17
    3e68:	07 95       	ror	r16
    3e6a:	f7 94       	ror	r15
    3e6c:	e7 94       	ror	r14
    3e6e:	31 96       	adiw	r30, 0x01	; 1
    3e70:	87 e0       	ldi	r24, 0x07	; 7
    3e72:	16 95       	lsr	r17
    3e74:	07 95       	ror	r16
    3e76:	f7 94       	ror	r15
    3e78:	e7 94       	ror	r14
    3e7a:	8a 95       	dec	r24
    3e7c:	d1 f7       	brne	.-12     	; 0x3e72 <__pack_f+0x164>
    3e7e:	05 c0       	rjmp	.+10     	; 0x3e8a <__pack_f+0x17c>
    3e80:	ee 24       	eor	r14, r14
    3e82:	ff 24       	eor	r15, r15
    3e84:	87 01       	movw	r16, r14
    3e86:	ef ef       	ldi	r30, 0xFF	; 255
    3e88:	f0 e0       	ldi	r31, 0x00	; 0
    3e8a:	6e 2f       	mov	r22, r30
    3e8c:	67 95       	ror	r22
    3e8e:	66 27       	eor	r22, r22
    3e90:	67 95       	ror	r22
    3e92:	90 2f       	mov	r25, r16
    3e94:	9f 77       	andi	r25, 0x7F	; 127
    3e96:	d7 94       	ror	r13
    3e98:	dd 24       	eor	r13, r13
    3e9a:	d7 94       	ror	r13
    3e9c:	8e 2f       	mov	r24, r30
    3e9e:	86 95       	lsr	r24
    3ea0:	49 2f       	mov	r20, r25
    3ea2:	46 2b       	or	r20, r22
    3ea4:	58 2f       	mov	r21, r24
    3ea6:	5d 29       	or	r21, r13
    3ea8:	b7 01       	movw	r22, r14
    3eaa:	ca 01       	movw	r24, r20
    3eac:	1f 91       	pop	r17
    3eae:	0f 91       	pop	r16
    3eb0:	ff 90       	pop	r15
    3eb2:	ef 90       	pop	r14
    3eb4:	df 90       	pop	r13
    3eb6:	08 95       	ret

00003eb8 <__unpack_f>:
    3eb8:	fc 01       	movw	r30, r24
    3eba:	db 01       	movw	r26, r22
    3ebc:	40 81       	ld	r20, Z
    3ebe:	51 81       	ldd	r21, Z+1	; 0x01
    3ec0:	22 81       	ldd	r18, Z+2	; 0x02
    3ec2:	62 2f       	mov	r22, r18
    3ec4:	6f 77       	andi	r22, 0x7F	; 127
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	22 1f       	adc	r18, r18
    3eca:	22 27       	eor	r18, r18
    3ecc:	22 1f       	adc	r18, r18
    3ece:	93 81       	ldd	r25, Z+3	; 0x03
    3ed0:	89 2f       	mov	r24, r25
    3ed2:	88 0f       	add	r24, r24
    3ed4:	82 2b       	or	r24, r18
    3ed6:	28 2f       	mov	r18, r24
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	99 1f       	adc	r25, r25
    3edc:	99 27       	eor	r25, r25
    3ede:	99 1f       	adc	r25, r25
    3ee0:	11 96       	adiw	r26, 0x01	; 1
    3ee2:	9c 93       	st	X, r25
    3ee4:	11 97       	sbiw	r26, 0x01	; 1
    3ee6:	21 15       	cp	r18, r1
    3ee8:	31 05       	cpc	r19, r1
    3eea:	a9 f5       	brne	.+106    	; 0x3f56 <__unpack_f+0x9e>
    3eec:	41 15       	cp	r20, r1
    3eee:	51 05       	cpc	r21, r1
    3ef0:	61 05       	cpc	r22, r1
    3ef2:	71 05       	cpc	r23, r1
    3ef4:	11 f4       	brne	.+4      	; 0x3efa <__unpack_f+0x42>
    3ef6:	82 e0       	ldi	r24, 0x02	; 2
    3ef8:	37 c0       	rjmp	.+110    	; 0x3f68 <__unpack_f+0xb0>
    3efa:	82 e8       	ldi	r24, 0x82	; 130
    3efc:	9f ef       	ldi	r25, 0xFF	; 255
    3efe:	13 96       	adiw	r26, 0x03	; 3
    3f00:	9c 93       	st	X, r25
    3f02:	8e 93       	st	-X, r24
    3f04:	12 97       	sbiw	r26, 0x02	; 2
    3f06:	9a 01       	movw	r18, r20
    3f08:	ab 01       	movw	r20, r22
    3f0a:	67 e0       	ldi	r22, 0x07	; 7
    3f0c:	22 0f       	add	r18, r18
    3f0e:	33 1f       	adc	r19, r19
    3f10:	44 1f       	adc	r20, r20
    3f12:	55 1f       	adc	r21, r21
    3f14:	6a 95       	dec	r22
    3f16:	d1 f7       	brne	.-12     	; 0x3f0c <__unpack_f+0x54>
    3f18:	83 e0       	ldi	r24, 0x03	; 3
    3f1a:	8c 93       	st	X, r24
    3f1c:	0d c0       	rjmp	.+26     	; 0x3f38 <__unpack_f+0x80>
    3f1e:	22 0f       	add	r18, r18
    3f20:	33 1f       	adc	r19, r19
    3f22:	44 1f       	adc	r20, r20
    3f24:	55 1f       	adc	r21, r21
    3f26:	12 96       	adiw	r26, 0x02	; 2
    3f28:	8d 91       	ld	r24, X+
    3f2a:	9c 91       	ld	r25, X
    3f2c:	13 97       	sbiw	r26, 0x03	; 3
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	13 96       	adiw	r26, 0x03	; 3
    3f32:	9c 93       	st	X, r25
    3f34:	8e 93       	st	-X, r24
    3f36:	12 97       	sbiw	r26, 0x02	; 2
    3f38:	20 30       	cpi	r18, 0x00	; 0
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	38 07       	cpc	r19, r24
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	48 07       	cpc	r20, r24
    3f42:	80 e4       	ldi	r24, 0x40	; 64
    3f44:	58 07       	cpc	r21, r24
    3f46:	58 f3       	brcs	.-42     	; 0x3f1e <__unpack_f+0x66>
    3f48:	14 96       	adiw	r26, 0x04	; 4
    3f4a:	2d 93       	st	X+, r18
    3f4c:	3d 93       	st	X+, r19
    3f4e:	4d 93       	st	X+, r20
    3f50:	5c 93       	st	X, r21
    3f52:	17 97       	sbiw	r26, 0x07	; 7
    3f54:	08 95       	ret
    3f56:	2f 3f       	cpi	r18, 0xFF	; 255
    3f58:	31 05       	cpc	r19, r1
    3f5a:	79 f4       	brne	.+30     	; 0x3f7a <__unpack_f+0xc2>
    3f5c:	41 15       	cp	r20, r1
    3f5e:	51 05       	cpc	r21, r1
    3f60:	61 05       	cpc	r22, r1
    3f62:	71 05       	cpc	r23, r1
    3f64:	19 f4       	brne	.+6      	; 0x3f6c <__unpack_f+0xb4>
    3f66:	84 e0       	ldi	r24, 0x04	; 4
    3f68:	8c 93       	st	X, r24
    3f6a:	08 95       	ret
    3f6c:	64 ff       	sbrs	r22, 4
    3f6e:	03 c0       	rjmp	.+6      	; 0x3f76 <__unpack_f+0xbe>
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	8c 93       	st	X, r24
    3f74:	12 c0       	rjmp	.+36     	; 0x3f9a <__unpack_f+0xe2>
    3f76:	1c 92       	st	X, r1
    3f78:	10 c0       	rjmp	.+32     	; 0x3f9a <__unpack_f+0xe2>
    3f7a:	2f 57       	subi	r18, 0x7F	; 127
    3f7c:	30 40       	sbci	r19, 0x00	; 0
    3f7e:	13 96       	adiw	r26, 0x03	; 3
    3f80:	3c 93       	st	X, r19
    3f82:	2e 93       	st	-X, r18
    3f84:	12 97       	sbiw	r26, 0x02	; 2
    3f86:	83 e0       	ldi	r24, 0x03	; 3
    3f88:	8c 93       	st	X, r24
    3f8a:	87 e0       	ldi	r24, 0x07	; 7
    3f8c:	44 0f       	add	r20, r20
    3f8e:	55 1f       	adc	r21, r21
    3f90:	66 1f       	adc	r22, r22
    3f92:	77 1f       	adc	r23, r23
    3f94:	8a 95       	dec	r24
    3f96:	d1 f7       	brne	.-12     	; 0x3f8c <__unpack_f+0xd4>
    3f98:	70 64       	ori	r23, 0x40	; 64
    3f9a:	14 96       	adiw	r26, 0x04	; 4
    3f9c:	4d 93       	st	X+, r20
    3f9e:	5d 93       	st	X+, r21
    3fa0:	6d 93       	st	X+, r22
    3fa2:	7c 93       	st	X, r23
    3fa4:	17 97       	sbiw	r26, 0x07	; 7
    3fa6:	08 95       	ret

00003fa8 <__fpcmp_parts_f>:
    3fa8:	1f 93       	push	r17
    3faa:	dc 01       	movw	r26, r24
    3fac:	fb 01       	movw	r30, r22
    3fae:	9c 91       	ld	r25, X
    3fb0:	92 30       	cpi	r25, 0x02	; 2
    3fb2:	08 f4       	brcc	.+2      	; 0x3fb6 <__fpcmp_parts_f+0xe>
    3fb4:	47 c0       	rjmp	.+142    	; 0x4044 <__fpcmp_parts_f+0x9c>
    3fb6:	80 81       	ld	r24, Z
    3fb8:	82 30       	cpi	r24, 0x02	; 2
    3fba:	08 f4       	brcc	.+2      	; 0x3fbe <__fpcmp_parts_f+0x16>
    3fbc:	43 c0       	rjmp	.+134    	; 0x4044 <__fpcmp_parts_f+0x9c>
    3fbe:	94 30       	cpi	r25, 0x04	; 4
    3fc0:	51 f4       	brne	.+20     	; 0x3fd6 <__fpcmp_parts_f+0x2e>
    3fc2:	11 96       	adiw	r26, 0x01	; 1
    3fc4:	1c 91       	ld	r17, X
    3fc6:	84 30       	cpi	r24, 0x04	; 4
    3fc8:	99 f5       	brne	.+102    	; 0x4030 <__fpcmp_parts_f+0x88>
    3fca:	81 81       	ldd	r24, Z+1	; 0x01
    3fcc:	68 2f       	mov	r22, r24
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	61 1b       	sub	r22, r17
    3fd2:	71 09       	sbc	r23, r1
    3fd4:	3f c0       	rjmp	.+126    	; 0x4054 <__fpcmp_parts_f+0xac>
    3fd6:	84 30       	cpi	r24, 0x04	; 4
    3fd8:	21 f0       	breq	.+8      	; 0x3fe2 <__fpcmp_parts_f+0x3a>
    3fda:	92 30       	cpi	r25, 0x02	; 2
    3fdc:	31 f4       	brne	.+12     	; 0x3fea <__fpcmp_parts_f+0x42>
    3fde:	82 30       	cpi	r24, 0x02	; 2
    3fe0:	b9 f1       	breq	.+110    	; 0x4050 <__fpcmp_parts_f+0xa8>
    3fe2:	81 81       	ldd	r24, Z+1	; 0x01
    3fe4:	88 23       	and	r24, r24
    3fe6:	89 f1       	breq	.+98     	; 0x404a <__fpcmp_parts_f+0xa2>
    3fe8:	2d c0       	rjmp	.+90     	; 0x4044 <__fpcmp_parts_f+0x9c>
    3fea:	11 96       	adiw	r26, 0x01	; 1
    3fec:	1c 91       	ld	r17, X
    3fee:	11 97       	sbiw	r26, 0x01	; 1
    3ff0:	82 30       	cpi	r24, 0x02	; 2
    3ff2:	f1 f0       	breq	.+60     	; 0x4030 <__fpcmp_parts_f+0x88>
    3ff4:	81 81       	ldd	r24, Z+1	; 0x01
    3ff6:	18 17       	cp	r17, r24
    3ff8:	d9 f4       	brne	.+54     	; 0x4030 <__fpcmp_parts_f+0x88>
    3ffa:	12 96       	adiw	r26, 0x02	; 2
    3ffc:	2d 91       	ld	r18, X+
    3ffe:	3c 91       	ld	r19, X
    4000:	13 97       	sbiw	r26, 0x03	; 3
    4002:	82 81       	ldd	r24, Z+2	; 0x02
    4004:	93 81       	ldd	r25, Z+3	; 0x03
    4006:	82 17       	cp	r24, r18
    4008:	93 07       	cpc	r25, r19
    400a:	94 f0       	brlt	.+36     	; 0x4030 <__fpcmp_parts_f+0x88>
    400c:	28 17       	cp	r18, r24
    400e:	39 07       	cpc	r19, r25
    4010:	bc f0       	brlt	.+46     	; 0x4040 <__fpcmp_parts_f+0x98>
    4012:	14 96       	adiw	r26, 0x04	; 4
    4014:	8d 91       	ld	r24, X+
    4016:	9d 91       	ld	r25, X+
    4018:	0d 90       	ld	r0, X+
    401a:	bc 91       	ld	r27, X
    401c:	a0 2d       	mov	r26, r0
    401e:	24 81       	ldd	r18, Z+4	; 0x04
    4020:	35 81       	ldd	r19, Z+5	; 0x05
    4022:	46 81       	ldd	r20, Z+6	; 0x06
    4024:	57 81       	ldd	r21, Z+7	; 0x07
    4026:	28 17       	cp	r18, r24
    4028:	39 07       	cpc	r19, r25
    402a:	4a 07       	cpc	r20, r26
    402c:	5b 07       	cpc	r21, r27
    402e:	18 f4       	brcc	.+6      	; 0x4036 <__fpcmp_parts_f+0x8e>
    4030:	11 23       	and	r17, r17
    4032:	41 f0       	breq	.+16     	; 0x4044 <__fpcmp_parts_f+0x9c>
    4034:	0a c0       	rjmp	.+20     	; 0x404a <__fpcmp_parts_f+0xa2>
    4036:	82 17       	cp	r24, r18
    4038:	93 07       	cpc	r25, r19
    403a:	a4 07       	cpc	r26, r20
    403c:	b5 07       	cpc	r27, r21
    403e:	40 f4       	brcc	.+16     	; 0x4050 <__fpcmp_parts_f+0xa8>
    4040:	11 23       	and	r17, r17
    4042:	19 f0       	breq	.+6      	; 0x404a <__fpcmp_parts_f+0xa2>
    4044:	61 e0       	ldi	r22, 0x01	; 1
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	05 c0       	rjmp	.+10     	; 0x4054 <__fpcmp_parts_f+0xac>
    404a:	6f ef       	ldi	r22, 0xFF	; 255
    404c:	7f ef       	ldi	r23, 0xFF	; 255
    404e:	02 c0       	rjmp	.+4      	; 0x4054 <__fpcmp_parts_f+0xac>
    4050:	60 e0       	ldi	r22, 0x00	; 0
    4052:	70 e0       	ldi	r23, 0x00	; 0
    4054:	cb 01       	movw	r24, r22
    4056:	1f 91       	pop	r17
    4058:	08 95       	ret

0000405a <__mulsi3>:
    405a:	62 9f       	mul	r22, r18
    405c:	d0 01       	movw	r26, r0
    405e:	73 9f       	mul	r23, r19
    4060:	f0 01       	movw	r30, r0
    4062:	82 9f       	mul	r24, r18
    4064:	e0 0d       	add	r30, r0
    4066:	f1 1d       	adc	r31, r1
    4068:	64 9f       	mul	r22, r20
    406a:	e0 0d       	add	r30, r0
    406c:	f1 1d       	adc	r31, r1
    406e:	92 9f       	mul	r25, r18
    4070:	f0 0d       	add	r31, r0
    4072:	83 9f       	mul	r24, r19
    4074:	f0 0d       	add	r31, r0
    4076:	74 9f       	mul	r23, r20
    4078:	f0 0d       	add	r31, r0
    407a:	65 9f       	mul	r22, r21
    407c:	f0 0d       	add	r31, r0
    407e:	99 27       	eor	r25, r25
    4080:	72 9f       	mul	r23, r18
    4082:	b0 0d       	add	r27, r0
    4084:	e1 1d       	adc	r30, r1
    4086:	f9 1f       	adc	r31, r25
    4088:	63 9f       	mul	r22, r19
    408a:	b0 0d       	add	r27, r0
    408c:	e1 1d       	adc	r30, r1
    408e:	f9 1f       	adc	r31, r25
    4090:	bd 01       	movw	r22, r26
    4092:	cf 01       	movw	r24, r30
    4094:	11 24       	eor	r1, r1
    4096:	08 95       	ret

00004098 <__udivmodhi4>:
    4098:	aa 1b       	sub	r26, r26
    409a:	bb 1b       	sub	r27, r27
    409c:	51 e1       	ldi	r21, 0x11	; 17
    409e:	07 c0       	rjmp	.+14     	; 0x40ae <__udivmodhi4_ep>

000040a0 <__udivmodhi4_loop>:
    40a0:	aa 1f       	adc	r26, r26
    40a2:	bb 1f       	adc	r27, r27
    40a4:	a6 17       	cp	r26, r22
    40a6:	b7 07       	cpc	r27, r23
    40a8:	10 f0       	brcs	.+4      	; 0x40ae <__udivmodhi4_ep>
    40aa:	a6 1b       	sub	r26, r22
    40ac:	b7 0b       	sbc	r27, r23

000040ae <__udivmodhi4_ep>:
    40ae:	88 1f       	adc	r24, r24
    40b0:	99 1f       	adc	r25, r25
    40b2:	5a 95       	dec	r21
    40b4:	a9 f7       	brne	.-22     	; 0x40a0 <__udivmodhi4_loop>
    40b6:	80 95       	com	r24
    40b8:	90 95       	com	r25
    40ba:	bc 01       	movw	r22, r24
    40bc:	cd 01       	movw	r24, r26
    40be:	08 95       	ret

000040c0 <__udivmodsi4>:
    40c0:	a1 e2       	ldi	r26, 0x21	; 33
    40c2:	1a 2e       	mov	r1, r26
    40c4:	aa 1b       	sub	r26, r26
    40c6:	bb 1b       	sub	r27, r27
    40c8:	fd 01       	movw	r30, r26
    40ca:	0d c0       	rjmp	.+26     	; 0x40e6 <__udivmodsi4_ep>

000040cc <__udivmodsi4_loop>:
    40cc:	aa 1f       	adc	r26, r26
    40ce:	bb 1f       	adc	r27, r27
    40d0:	ee 1f       	adc	r30, r30
    40d2:	ff 1f       	adc	r31, r31
    40d4:	a2 17       	cp	r26, r18
    40d6:	b3 07       	cpc	r27, r19
    40d8:	e4 07       	cpc	r30, r20
    40da:	f5 07       	cpc	r31, r21
    40dc:	20 f0       	brcs	.+8      	; 0x40e6 <__udivmodsi4_ep>
    40de:	a2 1b       	sub	r26, r18
    40e0:	b3 0b       	sbc	r27, r19
    40e2:	e4 0b       	sbc	r30, r20
    40e4:	f5 0b       	sbc	r31, r21

000040e6 <__udivmodsi4_ep>:
    40e6:	66 1f       	adc	r22, r22
    40e8:	77 1f       	adc	r23, r23
    40ea:	88 1f       	adc	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	1a 94       	dec	r1
    40f0:	69 f7       	brne	.-38     	; 0x40cc <__udivmodsi4_loop>
    40f2:	60 95       	com	r22
    40f4:	70 95       	com	r23
    40f6:	80 95       	com	r24
    40f8:	90 95       	com	r25
    40fa:	9b 01       	movw	r18, r22
    40fc:	ac 01       	movw	r20, r24
    40fe:	bd 01       	movw	r22, r26
    4100:	cf 01       	movw	r24, r30
    4102:	08 95       	ret

00004104 <__prologue_saves__>:
    4104:	2f 92       	push	r2
    4106:	3f 92       	push	r3
    4108:	4f 92       	push	r4
    410a:	5f 92       	push	r5
    410c:	6f 92       	push	r6
    410e:	7f 92       	push	r7
    4110:	8f 92       	push	r8
    4112:	9f 92       	push	r9
    4114:	af 92       	push	r10
    4116:	bf 92       	push	r11
    4118:	cf 92       	push	r12
    411a:	df 92       	push	r13
    411c:	ef 92       	push	r14
    411e:	ff 92       	push	r15
    4120:	0f 93       	push	r16
    4122:	1f 93       	push	r17
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	ca 1b       	sub	r28, r26
    412e:	db 0b       	sbc	r29, r27
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	f8 94       	cli
    4134:	de bf       	out	0x3e, r29	; 62
    4136:	0f be       	out	0x3f, r0	; 63
    4138:	cd bf       	out	0x3d, r28	; 61
    413a:	09 94       	ijmp

0000413c <__epilogue_restores__>:
    413c:	2a 88       	ldd	r2, Y+18	; 0x12
    413e:	39 88       	ldd	r3, Y+17	; 0x11
    4140:	48 88       	ldd	r4, Y+16	; 0x10
    4142:	5f 84       	ldd	r5, Y+15	; 0x0f
    4144:	6e 84       	ldd	r6, Y+14	; 0x0e
    4146:	7d 84       	ldd	r7, Y+13	; 0x0d
    4148:	8c 84       	ldd	r8, Y+12	; 0x0c
    414a:	9b 84       	ldd	r9, Y+11	; 0x0b
    414c:	aa 84       	ldd	r10, Y+10	; 0x0a
    414e:	b9 84       	ldd	r11, Y+9	; 0x09
    4150:	c8 84       	ldd	r12, Y+8	; 0x08
    4152:	df 80       	ldd	r13, Y+7	; 0x07
    4154:	ee 80       	ldd	r14, Y+6	; 0x06
    4156:	fd 80       	ldd	r15, Y+5	; 0x05
    4158:	0c 81       	ldd	r16, Y+4	; 0x04
    415a:	1b 81       	ldd	r17, Y+3	; 0x03
    415c:	aa 81       	ldd	r26, Y+2	; 0x02
    415e:	b9 81       	ldd	r27, Y+1	; 0x01
    4160:	ce 0f       	add	r28, r30
    4162:	d1 1d       	adc	r29, r1
    4164:	0f b6       	in	r0, 0x3f	; 63
    4166:	f8 94       	cli
    4168:	de bf       	out	0x3e, r29	; 62
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	cd bf       	out	0x3d, r28	; 61
    416e:	ed 01       	movw	r28, r26
    4170:	08 95       	ret

00004172 <__eerd_block_m32>:
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22

00004176 <__eerd_blraw_m32>:
    4176:	fc 01       	movw	r30, r24
    4178:	e1 99       	sbic	0x1c, 1	; 28
    417a:	fe cf       	rjmp	.-4      	; 0x4178 <__eerd_blraw_m32+0x2>
    417c:	06 c0       	rjmp	.+12     	; 0x418a <__eerd_blraw_m32+0x14>
    417e:	ff bb       	out	0x1f, r31	; 31
    4180:	ee bb       	out	0x1e, r30	; 30
    4182:	e0 9a       	sbi	0x1c, 0	; 28
    4184:	31 96       	adiw	r30, 0x01	; 1
    4186:	0d b2       	in	r0, 0x1d	; 29
    4188:	0d 92       	st	X+, r0
    418a:	41 50       	subi	r20, 0x01	; 1
    418c:	50 40       	sbci	r21, 0x00	; 0
    418e:	b8 f7       	brcc	.-18     	; 0x417e <__eerd_blraw_m32+0x8>
    4190:	08 95       	ret

00004192 <__eewr_block_m32>:
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	03 c0       	rjmp	.+6      	; 0x419e <__eewr_block_m32+0xc>
    4198:	2d 91       	ld	r18, X+
    419a:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__eewr_r18_m32>
    419e:	41 50       	subi	r20, 0x01	; 1
    41a0:	50 40       	sbci	r21, 0x00	; 0
    41a2:	d0 f7       	brcc	.-12     	; 0x4198 <__eewr_block_m32+0x6>
    41a4:	08 95       	ret

000041a6 <__eewr_byte_m32>:
    41a6:	26 2f       	mov	r18, r22

000041a8 <__eewr_r18_m32>:
    41a8:	e1 99       	sbic	0x1c, 1	; 28
    41aa:	fe cf       	rjmp	.-4      	; 0x41a8 <__eewr_r18_m32>
    41ac:	9f bb       	out	0x1f, r25	; 31
    41ae:	8e bb       	out	0x1e, r24	; 30
    41b0:	2d bb       	out	0x1d, r18	; 29
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	f8 94       	cli
    41b6:	e2 9a       	sbi	0x1c, 2	; 28
    41b8:	e1 9a       	sbi	0x1c, 1	; 28
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	01 96       	adiw	r24, 0x01	; 1
    41be:	08 95       	ret

000041c0 <_exit>:
    41c0:	f8 94       	cli

000041c2 <__stop_program>:
    41c2:	ff cf       	rjmp	.-2      	; 0x41c2 <__stop_program>
